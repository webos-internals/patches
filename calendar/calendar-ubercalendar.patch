diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/app-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/app-assistant.js
index bc8e512..5d4bf82 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/app-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/app-assistant.js
@@ -119,6 +119,9 @@ var AppAssistant = Class.create (
 			Mojo.Log.info("========= AA: closing reminders "+JSON.stringify(launchParams.alarmClose));			
 			this.reminderManager.closeReminders(launchParams.alarmClose);
 		}
+		else if (launchParams.playAlarmSound){			
+			this.reminderManager.playAlarmSound(JSON.parse(launchParams.playAlarmSound));
+		}
 		else if (launchParams.alarmDeleted){
 			Mojo.Log.info("========= AA: closing by event ids "+JSON.stringify(launchParams.alarmDeleted));
 			this.reminderManager.closeRemindersByEventId(launchParams.alarmDeleted);
@@ -253,6 +256,32 @@ var AppAssistant = Class.create (
 			}
 			
 			if(launchParams.quickLaunchText){
+				var datetxt, loc, subject, end, evt, fmt, fmtm, fmtl, dtStr, dt, parts = [], str = launchParams.quickLaunchText.toString();
+				parts = str.split(";");
+				var UcDate =this.getUcDateParser();
+				if(parts && parts.length >0){
+					loc = ((parts.length > 0) && parts[2]) ? parts[2] : "";
+					datetxt = ((parts.length > 0) && parts[1]) ? parts[1] : "";
+					dt = !!datetxt ? UcDate.parse(datetxt) : "";
+					dt = (!!datetxt && (dt === null || dt === "")) ? Date.parse(datetxt): dt;
+					dt = ((dt === null) || (dt==="") || (dt && isNaN(dt.getTime()))) ? "" : dt.getTime();
+					
+					subject = ((parts.length > 0) && parts[0]) ? parts[0] : params.quickLaunchText;
+					//console.error("quicktext :::::: " + (UcDate.CultureInfo && JSON.stringify(UcDate.CultureInfo.name)));
+					//console.error("quicktext :::::: " + (Date.CultureInfo && JSON.stringify(Date.CultureInfo.name)));
+					//console.error("quicktext is leap year:::::: " + Object.keys(UcDate.CultureInfo.abbreviatedTimeZoneStandard));
+					//console.error("quicktext :::::: " + Date.parse(datetxt));
+					if(dt !== "" && !(isNaN(dt))){
+						var prefs = this.prefsManager.getPrefs();
+						end = parseInt(prefs.defaultEventDuration,10)*60*1000 + dt;
+						//console.error("quicktext :::::: " + end);
+						evt = {subject: subject, dtstart: dt, dtend: end, location: loc};
+					
+						this.createNewEventAndShowDetails(stageController, evt);
+						return;
+					}
+				}
+				
 				//for quick launch text, we don't save first, we just launch straight into edit view with the given subject
 				var start = new Date();
 				if(start.minutes > 30){
@@ -401,7 +430,7 @@ var AppAssistant = Class.create (
 		
 		if(response.results && response.results.length > 0){
 			var item = response.results[0];
-			calendarStageController.pushScene('edit', item.id, targetDate, false);	
+			calendarStageController.pushScene('edit', (item.id || item._id), targetDate, false);	
 		}
 		
 	},
@@ -487,8 +516,36 @@ var AppAssistant = Class.create (
 				}.bind(this)
 			});
 		} else {
+			this.uberOpenInView = 'last';
+			this.snoozeCookie = new Mojo.Model.Cookie("snoozeCookie");	
+			if (this.snoozeCookie) {
+				var snzcookie = this.snoozeCookie.get();
+				if (snzcookie) {
+					if(snzcookie.uberopeninview !== undefined) {
+						this.uberOpenInView = snzcookie.uberopeninview;
+					} else {
+						this.uberOpenInView = 'last';
+					}
+				}
+			}
 			// Otherwise show the Day View
-			stageController.pushScene({name: "day", transition: Mojo.Transition.crossFade, disableSceneScroller: true});
+			var view = "day";
+			var cookie = new Mojo.Model.Cookie("BackGesture");
+			try {
+				var lview = cookie.get();
+
+				if(lview && lview.lastview) {
+					view = lview.lastview;
+				}
+				if ((lview.lastview != "month") && (lview.lastview != "week")) {
+					view = "day";
+				}
+			} catch (e) {}
+			if(this.uberOpenInView !== 'last' && this.uberOpenInView !== undefined) {
+				view = this.uberOpenInView;
+			}
+
+			stageController.pushScene({name: view, transition: Mojo.Transition.crossFade, disableSceneScroller: true});
 		}
 	},
 
@@ -566,6 +623,133 @@ var AppAssistant = Class.create (
 		return (""+year+"-"+month+"-"+day+" "+hour+":"+minute+":"+second+"Z");  
 	},
 	
+	getUserUberCalGroups: function() {
+		// read cookie set variables for all views
+		var userCalGrpsCookie = new Mojo.Model.Cookie("ucGroupsCookie");
+		var userCalGrps = [];
+		if(userCalGrpsCookie) {
+			var calGrps = userCalGrpsCookie.get();
+			if(calGrps) {
+				if(calGrps.usercalgroups && calGrps.usercalgroups.length > 0 ) {
+					userCalGrps = calGrps.usercalgroups;
+					if(userCalGrps && userCalGrps.length > 0 &&  userCalGrps[0] && userCalGrps[0].rId !== undefined) {
+						return userCalGrps;
+					} else {
+						userCalGrps = undefined;
+					}
+				}
+			}
+		}
+		return userCalGrps;
+	},
+	
+	getUberGroups: function() {
+		// read cookie set variables
+		var uberGrpsCookie = new Mojo.Model.Cookie("uberGrpsCookie");
+		var uberGrps = {};
+		this.alarmsFollowGroups = !!this.reminderManager.alarmsFollowGroups;
+		if(uberGrpsCookie) {
+			var uberGrps = uberGrpsCookie.get();
+			if(uberGrps && uberGrps.inUse !== undefined ) {
+				return uberGrps;
+			} else { // bad cookie, erased cookie or no defined groups yet: build it.
+				if(this.alarmsFollowGroups){
+					this.reminderManager && this.reminderManager.updateExcCals([]);
+				}
+				return {inUse: false, rId: ""};
+			}
+		} else { //bad cookie, erased cookie or no defined groups yet: build it.
+				if(this.alarmsFollowGroups){
+					this.reminderManager && this.reminderManager.updateExcCals([]);
+				}
+			return {inUse: false, rId: ""};
+		}
+	},
+	
+	setUberGroups: function(rID) {
+		//set cookie
+		if(rID){
+			var uberGrpsCookie = new Mojo.Model.Cookie("uberGrpsCookie");
+			if(uberGrpsCookie) {
+				uberGrpsCookie.put({inUse: true, rId: rID});
+			}
+		} else {
+			var uberGrpsCookie = new Mojo.Model.Cookie("uberGrpsCookie");
+			if(uberGrpsCookie) {
+				uberGrpsCookie.put({inUse: false, rId: ""});
+				if(this.alarmsFollowGroups){
+					this.reminderManager && this.reminderManager.updateExcCals([]);
+				}
+			}
+		}
+	},
+	
+	buildUberExcludes: function(includes) {
+		if(includes && includes.length > 0){
+			var tempCalModel = this.calendarsManager.getCalendarsModel();
+			var numAcc = tempCalModel.length;
+			var tempList = [];
+			for(var i = 0; i< numAcc; i++) {
+				var calendars = tempCalModel[i];
+				var numCal = calendars.length;
+				for(var j=0; j < numCal; j++) {
+					var cal = calendars[j];
+					tempList.push(cal.id);
+				}
+			}
+			this.excludes = {};
+			this.rmExcludes = [];
+			tempList.each(function(item) {
+				if(includes.indexOf(item) === -1) {
+					this.excludes[item] = true;
+					if(this.alarmsFollowGroups){
+						this.rmExcludes.push(item);
+					}
+				}
+			}, this);
+			if(this.alarmsFollowGroups){
+					this.reminderManager && this.reminderManager.updateExcCals(this.rmExcludes.slice());
+			}
+			return this.excludes;
+		} else {
+			return this.calendarsManager.getExcludeFromAllList();
+		}
+	},
+	
+	uberToggleGroupsCmd: function(usingUberGroups, name) {
+		// for toggleCmd on cal picker submenu
+		if(usingUberGroups === true && name) {
+			return name;
+		} else {
+			return this.calendarsManager.getCurrentCal();
+		}
+	},
+	
+	getNotesIconParts: function(note){
+		//Mojo.Log.error("icon parsing note :::::: "+ note );
+		if(!note || note === ""){
+			return false;
+		}
+		var start = note.indexOf('ICON=');
+		if( start > -1) {
+			var test = note.indexOf(';',start);
+			if(test >-1 && test > start + 5 && test - start <20){
+				var startTxt, endTxt, result, vresult, resultArray, patt = /[^a-z0-9_-]/;
+				startTxt = note.substring(0,start);
+				endTxt = note.length > test +1 ? note.substring(test+1) : "";
+				result = note.substring(start+5,test);
+				vresult = !patt.test(result) && result;
+				resultArray = vresult && [startTxt, vresult, endTxt];
+				//Mojo.Log.error("icon parsing :::::: "+ resultArray );
+				return resultArray;
+			} else {
+				return false;
+			}
+		} else {
+			return false;
+		}
+	},
+	
 	setupDayChangeTimer: function() {
 		if(Mojo.Host.current === Mojo.Host.mojoHost) {
 			return;
@@ -858,6 +1042,1053 @@ var AppAssistant = Class.create (
 	stopObservingTimeFormat: function (sceneName) {
 		this.timeFormatObservers.unset(sceneName);
 	},
+	
+	getUcDateParser: function(){
+		var cusDate, dTimeHash, formatHash;
+		cusDate = new Date();
+		dTimeHash = Mojo.Format.getDateTimeHash();
+		formatHash = Mojo.Format.getFormatHash()
+		if(!(dTimeHash && formatHash)){
+			//just use default
+			cusDate.parse = Date.parse;
+			return cusDate;
+		}
+		//cusDate.prototype = Object.create(Date.prototype);
+		cusDate.CultureInfo = JSON.parse(JSON.stringify(Date.CultureInfo));
+		var defRegExp = Date.CultureInfo.regexPatterns;
+		//region formatting
+		var CI = cusDate.CultureInfo;
+		if(dTimeHash && formatHash){
+			CI.name = Mojo.Locale.getCurrentLocale();
+			CI.dayNames = dTimeHash["long"].day ? dTimeHash["long"].day.slice(0) : CI.dayNames;
+			var cleanArr = [], hArr = dTimeHash["medium"].day ? dTimeHash["medium"].day.slice(0): CI.abbreviatedDayNames;
+			for(var i=0;i<hArr.length;i++){
+				cleanArr.push(hArr[i].replace(/(\.$|\s$|^\s)/g,""));
+			}
+			CI.abbreviatedDayNames = cleanArr.slice(0);
+			var cleanArr = [], hArr =  dTimeHash["short"].day ? dTimeHash["short"].day.slice(0): CI.shortestDayNames;
+			for(var i=0;i<hArr.length;i++){
+				cleanArr.push(hArr[i].replace(/(\.$|\s$|^\s)/g,""));
+			}
+			CI.shortestDayNames =cleanArr.slice(0);
+			CI.firstLetterDayNames = dTimeHash["single"].day ? dTimeHash["single"].day.slice(0):CI.firstLetterDayNames;
+			CI.monthNames = dTimeHash["long"].month ? dTimeHash["long"].month.slice(0): CI.monthNames;
+			var cleanArr = [], hArr = dTimeHash["medium"].month ? dTimeHash["medium"].month.slice(0) : CI.abbreviatedMonthNames;
+			for(var i=0;i<hArr.length;i++){
+				cleanArr.push(hArr[i].replace(/(\.$|\s$|^\s)/g,""));
+			}
+			CI.abbreviatedMonthNames = cleanArr.slice(0);
+			CI.amDesignator = dTimeHash["am"];
+			CI.pmDesignator = dTimeHash["pm"];
+			CI.firstDayOfWeek = !isNaN(formatHash["firstDayOfWeek"]) ? formatHash["firstDayOfWeek"] : CI.firstDayOfWeek;
+			CI.dateElementOrder = formatHash["dateFieldOrder"] ? formatHash["dateFieldOrder"]: CI.dateElementOrder;
+			CI.formatPatterns.shortDate = formatHash["shortDate"] ? formatHash["shortDate"]: CI.formatPatterns.shortDate;
+			if(formatHash["fullDate"]){
+				var mod = formatHash["fullDate"].replace(/E/g,"d");
+				CI.formatPatterns.longDate = mod;
+			}
+			CI.formatPatterns.shortTime = formatHash["is12HourDefault"]?formatHash["shortTime12"]&&formatHash["shortTime12"].replace("a","tt"):formatHash["shortTime24"] && formatHash["shortTime24"].replace("a","tt");
+			CI.formatPatterns.longTime = formatHash["is12HourDefault"]?formatHash["fullTime12"]&&formatHash["fullTime12"].replace("a","tt"):formatHash["fullTime24"] && formatHash["fullTime24"].replace("a","tt");
+			//CI.formatPatterns.fullDateTime = formatHash["shortDate"];
+			CI.formatPatterns.monthDay = (formatHash["longDate"].replace(/y*/g,"")).replace(/\s*$/,"");
+			CI.formatPatterns.yearMonth = (formatHash["longDate"].replace(/d*/g,"")).replace(/^\s*/,"");
+			//regex 
+			function transRegE(word, shrt, med, lng){
+				var part = false, whole;
+				if(word){
+					whole = $L(word);
+					if(whole === word){
+						return false;
+					}
+					if(shrt !== undefined && !isNaN(parseInt(shrt,10))){
+						part = whole.length > shrt ? whole.substring(0,shrt) + "("+whole.substring(shrt) +")?":whole;
+						return part;
+					} else {
+						part = whole.length > 4 ? whole.substring(0,4) + "("+whole.substring(4) +")?" : whole;
+						return part;
+					}
+				} else {
+					var doMed, doLong, cleanS, cleanM, cleanL;
+					if( !(isNaN(parseInt(shrt,10)) && !!shrt) && !(!!med && isNaN(parseInt(med,10))) && !(!!lng && isNaN(parseInt(lng,10))) ){
+						//no short, no med, no long
+						return false;
+					}
+					if(isNaN(parseInt(shrt,10)) && !!shrt) {//short
+						cleanS = (shrt.toLowerCase()).replace(/(\.$|\s$|^\s)/g,"");
+						if(!!med && isNaN(parseInt(med,10))){//short,med
+							cleanM = (med.toLowerCase()).replace(/(\.$|\s$|^\s)/g,"");
+							if(!!lng && isNaN(parseInt(lng,10))){//short, med, long
+								cleanL = (lng.toLowerCase()).replace(/(\.$|\s$|^\s)/g,"");
+							}
+						} else if(!!lng && isNaN(parseInt(lng,10)) ){// short, no med, long
+							cleanM = (lng.toLowerCase()).replace(/(\.$|\s$|^\s)/g,"");
+						}
+					} else if(!(isNaN(shrt) && !!shrt) && (!!med && isNaN(parseInt(med,10))) ){// no short, med
+						cleanS = (med.toLowerCase()).replace(/(\.$|\s$|^\s)/g,"");
+						if(!!lng && isNaN(parseInt(lng,10))){// no short, med, long
+							cleanM = (lng.toLowerCase()).replace(/(\.$|\s$|^\s)/g,"");
+						}
+					} else if(!!lng && isNaN(parseInt(lng,10)) ){// no short or med, long
+						cleanS = (lng.toLowerCase()).replace(/(\.$|\s$|^\s)/g,"");
+					}
+					if(!!cleanS){ //should always be a cleanS, unless the entry is "." was " "
+						if(!!cleanM && cleanS !== cleanM && cleanM.length > cleanS.length && cleanM.indexOf(cleanS) === 0){
+							doMed = cleanM.substring(cleanS.length);
+							if(!!doMed){// med ok
+								if(!!cleanL && cleanS !== cleanL && cleanL.length > cleanS.length && cleanL.indexOf(cleanS) === 0){
+									doLong = cleanL.substring(cleanS.length);
+								}
+								if(!!doLong && doLong !== doMed && doLong.length > doMed.length && doLong.indexOf(doMed) === 0){
+									doLong = doLong.substring(doMed.length);
+									if(!!doLong){//long ok
+										part = cleanS+"("+doMed+"("+doLong+")?)?";
+										
+									} else {//no long
+										part = cleanS+"("+doMed+")?";
+									}
+								} else { // no long
+									part = cleanS+"("+doMed+")?";
+								}
+							} else { // no med
+								if(!!cleanL && cleanS !== cleanL && cleanL.length > cleanS.length && cleanL.indexOf(cleanS) === 0){
+									doLong = cleanL.substring(cleanS.length);
+								}
+								if(!!doLong){//long ok
+									part = cleanS+"("+doLong+")?";
+								} else {//no long
+									part = cleanS.length > 4 ? cleanS.substring(0,4) + "("+cleanS.substring(4) +")?" : cleanS;
+								}
+							}
+							return part;
+						} else { //short, but no med ?long
+							if(!!cleanL && cleanS !== cleanL && cleanL.length > cleanS.length && cleanL.indexOf(cleanS) === 0){
+								doLong = cleanL.substring(cleanS.length);
+							}
+							if(!!doLong){//long ok
+								part = cleanS+"("+doLong+")?";
+							} else {//no long
+								part = cleanS.length > 4 ? cleanS.substring(0,4) + "("+cleanS.substring(4) +")?" : cleanS;
+							}
+						}
+					}
+					return part;
+				}
+			}
+			var regE = CI.regexPatterns = {
+					millisecond: /^(ms|milli(second)?s?)/i,
+					second: /^sec(ond)?s?/i,
+					minute: /^min(ute)?s?/i,
+					hour: /^h(ou)?rs?/i,
+					week: /^w(ee)?k/i,
+					month: /^m(o(nth)?s?)?/i,
+					day: /^d(ays?)?/i,
+					year: /^y((ea)?rs?)?/i,
+					
+					shortMeridian: /^(a|p)/i,
+					longMeridian: /^(a\.?m?\.?|p\.?m?\.?)/i,
+					timezone: /^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\s*(\+|\-)\s*\d\d\d\d?)|gmt)/i,
+					ordinalSuffix: /^\s*(st|nd|rd|th)/i,
+					timeContext: /^\s*(\:|a|p)/i
+				};
+			regE.future = transRegE("next") ? new RegExp("^("+transRegE("next")+"|next)", "i") : /^next/i ;
+			var lastTxt = transRegE("last") ? "^("+transRegE("last") + "|last" : "^(last";
+			lastTxt += transRegE("past") ? "|"+transRegE("past") + "|past" : "|past";
+			lastTxt += transRegE("previous") ? "|"+transRegE("previous") + "|prev(ious)?)" : "|prev(ious)?)";
+			regE.past = new RegExp(lastTxt, "i");
+			
+			lastTxt = transRegE("after") ? "^(\\+|"+transRegE("after") + "|after" : "^(\\+|after";
+			lastTxt += transRegE("from") ? "|"+transRegE("from") + "|from)" : "|from)";
+			regE.add = new RegExp(lastTxt, "i");
+			
+			lastTxt = transRegE("before") ? "^(\\-|"+transRegE("before") + "|before" : "^(\\-|before";
+			lastTxt += transRegE("ago") ? "|"+transRegE("ago") + "|ago)" : "|ago)";
+			regE.subtract = new RegExp(lastTxt, "i");
+			
+			var hashTxt = dTimeHash.relative.yesterday;
+			lastTxt = transRegE(false, hashTxt) ? "^("+transRegE(false, hashTxt) + "|yesterday)" : "^yesterday";
+			regE.yesterday = new RegExp(lastTxt, "i");
+			
+			hashTxt = dTimeHash.relative.today;
+			lastTxt = transRegE(false, hashTxt) ? "^("+transRegE(false, hashTxt) + "|t(oday)?)" : "^t(oday)?";
+			regE.today = new RegExp(lastTxt, "i");
+			
+			hashTxt = dTimeHash.relative.tomorrow;
+			lastTxt = transRegE(false, hashTxt) ? "^("+transRegE(false, hashTxt) + "|tomorrow)" : "^tomorrow";
+			regE.tomorrow = new RegExp(lastTxt, "i");
+			
+			lastTxt = transRegE("now") ? "^("+transRegE("now") + "|n(ow)?)" : "^n(ow)?";
+			regE.now = new RegExp(lastTxt, "i");
+			//days
+			var i=0, dArr = {"sun": "su(n(day)?)?", "mon": "mo(n(day)?)?", "tue": "tu(e(s(day)?)?)?", "wed": "we(d(nesday)?)?", "thu": "th(u(r(s(day)?)?)?)?", "fri": "fr(i(day)?)?", "sat": "sa(t(urday)?)?"};
+			for(var prop in dArr){
+				if(prop && dArr.hasOwnProperty(prop)){
+					var sTxt = dTimeHash["short"].day[i], mTxt = dTimeHash["medium"].day[i], lTxt = dTimeHash["long"].day[i];
+					lastTxt = (transRegE(false, sTxt, mTxt, lTxt) && (transRegE(false, sTxt, mTxt, lTxt) !== dArr[prop])) ? "^("+transRegE(false, sTxt, mTxt, lTxt) + "|"+dArr[prop]+")" : "^"+dArr[prop];
+					regE[prop] = new RegExp(lastTxt, "i");
+					i++
+				}
+			}
+			//months
+			var i=0, mArr = {jan: "jan(uary)?",feb: "feb(ruary)?",mar:"mar(ch)?", apr: "apr(il)?",may: "may",jun:"jun(e)?",jul:"jul(y)?",aug:"aug(ust)?",sep:"sep(t(ember)?)?",oct:"oct(ober)?",nov:"nov(ember)?",dec:"dec(ember)?"};
+			for(var prop in mArr){
+				if(prop && mArr.hasOwnProperty(prop)){
+					var sTxt = dTimeHash["short"].month[i], mTxt = dTimeHash["medium"].month[i], lTxt = dTimeHash["long"].month[i];
+					lastTxt = (transRegE(false, sTxt, mTxt, lTxt) && (transRegE(false, sTxt, mTxt, lTxt) !== mArr[prop])) ? "^("+transRegE(false, sTxt, mTxt, lTxt) + "|"+mArr[prop]+")" : "^"+mArr[prop];
+					regE[prop] = new RegExp(lastTxt, "i");
+					i++
+				}
+			}
+		}
+		cusDate.getMonthNumberFromName = function (name) {
+		var n = Date.CultureInfo.monthNames,
+			m = Date.CultureInfo.abbreviatedMonthNames,
+			s = name.toLowerCase();
+			for (var i = 0; i < n.length; i++) {
+				if (n[i].toLowerCase() == s || m[i].toLowerCase() == s) {
+					return i;
+				}
+			}
+			return -1;
+		};
+		
+		cusDate.getDayNumberFromName = function (name) {
+			var n = Date.CultureInfo.dayNames,
+				m = Date.CultureInfo.abbreviatedDayNames,
+				o = Date.CultureInfo.shortestDayNames,
+				s = name.toLowerCase();
+			for (var i = 0; i < n.length; i++) {
+				if (n[i].toLowerCase() == s || m[i].toLowerCase() == s) {
+					return i;
+				}
+			}
+			return -1;
+		};
+		cusDate.getWeekOfYear = function (firstDayOfWeek) {
+			var y = this.getFullYear(),
+				m = this.getMonth(),
+				d = this.getDate();
+			var dow = firstDayOfWeek || cusDate.CultureInfo.firstDayOfWeek;
+			var offset = 7 + 1 - new Date(y, 0, 1).getDay();
+			if (offset == 8) {
+				offset = 1;
+			}
+			var daynum = ((Date.UTC(y, m, d, 0, 0, 0) - Date.UTC(y, 0, 1, 0, 0, 0)) / 86400000) + 1;
+			var w = Math.floor((daynum - offset + 7) / 7);
+			if (w === dow) {
+				y--;
+				var prevOffset = 7 + 1 - new Date(y, 0, 1).getDay();
+				if (prevOffset == 2 || prevOffset == 8) {
+					w = 53;
+				} else {
+					w = 52;
+				}
+			}
+			return w;
+		};
+		cusDate.getDayName = function (abbrev) {
+			return abbrev ? cusDate.CultureInfo.abbreviatedDayNames[cusDate.getDay()] : cusDate.CultureInfo.dayNames[cusDate.getDay()];
+		};
+		cusDate.getMonthName = function (abbrev) {
+			return abbrev ? cusDate.CultureInfo.abbreviatedMonthNames[cusDate.getMonth()] : cusDate.CultureInfo.monthNames[cusDate.getMonth()];
+		};
+		cusDate._toString = Date.toString;
+		cusDate.toString = function (format) {
+			var self = cusDate;
+			var p = function p(s) {
+				return (s.toString().length == 1) ? "0" + s : s;
+			};
+			return format ? format.replace(/dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?/g, function (format) {
+				switch (format) {
+					case "hh":
+						return p(self.getHours() < 13 ? self.getHours() : (self.getHours() - 12));
+					case "h":
+						return self.getHours() < 13 ? self.getHours() : (self.getHours() - 12);
+					case "HH":
+						return p(self.getHours());
+					case "H":
+						return self.getHours();
+					case "mm":
+						return p(self.getMinutes());
+					case "m":
+						return self.getMinutes();
+					case "ss":
+						return p(self.getSeconds());
+					case "s":
+						return self.getSeconds();
+					case "yyyy":
+						return self.getFullYear();
+					case "yy":
+						return self.getFullYear().toString().substring(2, 4);
+					case "dddd":
+						return self.getDayName();
+					case "ddd":
+						return self.getDayName(true);
+					case "dd":
+						return p(self.getDate());
+					case "d":
+						return self.getDate().toString();
+					case "MMMM":
+						return self.getMonthName();
+					case "MMM":
+						return self.getMonthName(true);
+					case "MM":
+						return p((self.getMonth() + 1));
+					case "M":
+						return self.getMonth() + 1;
+					case "t":
+						return self.getHours() < 12 ? cusDate.CultureInfo.amDesignator.substring(0, 1) : cusDate.CultureInfo.pmDesignator.substring(0, 1);
+					case "tt":
+						return self.getHours() < 12 ? cusDate.CultureInfo.amDesignator : cusDate.CultureInfo.pmDesignator;
+					case "zzz":
+					case "zz":
+					case "z":
+						return "";
+				}
+			}) : cusDate._toString();
+		};
+		cusDate.isLeapYear = function (year) {
+			return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));
+		};
+		cusDate.getDaysInMonth = function (year, month) {
+			return [31, (cusDate.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
+		};
+		cusDate.getTimezoneOffset = function (s, dst) {
+			return (dst || false) ? cusDate.CultureInfo.abbreviatedTimeZoneDST[s.toUpperCase()] : cusDate.CultureInfo.abbreviatedTimeZoneStandard[s.toUpperCase()];
+		};
+		cusDate.getTimezoneAbbreviation = function (offset, dst) {
+			var n = (dst || false) ? cusDate.CultureInfo.abbreviatedTimeZoneDST : cusDate.CultureInfo.abbreviatedTimeZoneStandard,
+				p;
+			for (p in n) {
+				if (n[p] === offset) {
+					return p;
+				}
+			}
+			return null;
+		};
+		cusDate._validate = function (value, min, max, name) {
+			if (typeof value != "number") {
+				throw new TypeError(value + " is not a Number.");
+			} else if (value < min || value > max) {
+				throw new RangeError(value + " is not a valid value for " + name + ".");
+			}
+			return true;
+		};
+		cusDate.validateMillisecond = function (n) {
+			return cusDate._validate(n, 0, 999, "milliseconds");
+		};
+		cusDate.validateSecond = function (n) {
+			return cusDate._validate(n, 0, 59, "seconds");
+		};
+		cusDate.validateMinute = function (n) {
+			return cusDate._validate(n, 0, 59, "minutes");
+		};
+		cusDate.validateHour = function (n) {
+			return cusDate._validate(n, 0, 23, "hours");
+		};
+		cusDate.validateDay = function (n, year, month) {
+			return cusDate._validate(n, 1, cusDate.getDaysInMonth(year, month), "days");
+		};
+		cusDate.validateMonth = function (n) {
+			return cusDate._validate(n, 0, 11, "months");
+		};
+		cusDate.validateYear = function (n) {
+			return cusDate._validate(n, 1, 9999, "seconds");
+		};
+		cusDate.now2 = function () {
+			return new Date();
+		};
+		cusDate.today = function () {
+			return cusDate.now2().clearTime();
+		};
+		
+		cusDate.Parsing = {
+				Exception: function (s) {
+					this.message = "Parse error at '" + s.substring(0, 10) + " ...'";
+				}
+		};
+		//(function () {
+			
+			var $P = cusDate.Parsing;
+			var _ = cusDate.Parsing.Operators = {
+				rtoken: function (r) {
+					return function (s) {
+						//console.error("_.rtoken " + r + ", s: "+s);
+						var mx = s.match(r);
+						if (mx) {
+							return ([mx[0], s.substring(mx[0].length)]);
+						} else {
+							throw new $P.Exception(s);
+						}
+					};
+				},
+				token: function (s) {
+					return function (s) {
+						return _.rtoken(new RegExp("^\s*" + s + "\s*"))(s);
+					};
+				},
+				stoken: function (s) {
+					return _.rtoken(new RegExp("^" + s));
+				},
+				until: function (p) {
+					return function (s) {
+						var qx = [],
+							rx = null;
+						while (s.length) {
+							try {
+								rx = p.call(this, s);
+							} catch (e) {
+								qx.push(rx[0]);
+								s = rx[1];
+								continue;
+							}
+							break;
+						}
+						return [qx, s];
+					};
+				},
+				many: function (p) {
+					return function (s) {
+						var rx = [],
+							r = null;
+						while (s.length) {
+							try {
+								r = p.call(this, s);
+							} catch (e) {
+								return [rx, s];
+							}
+							rx.push(r[0]);
+							s = r[1];
+						}
+						return [rx, s];
+					};
+				},
+				optional: function (p) {
+					return function (s) {
+						var r = null;
+						try {
+							r = p.call(this, s);
+						} catch (e) {
+							return [null, s];
+						}
+						return [r[0], r[1]];
+					};
+				},
+				not: function (p) {
+					return function (s) {
+						try {
+							p.call(this, s);
+						} catch (e) {
+							return [null, s];
+						}
+						throw new $P.Exception(s);
+					};
+				},
+				ignore: function (p) {
+					return p ? function (s) {
+						var r = null;
+						r = p.call(this, s);
+						return [null, r[1]];
+					} : null;
+				},
+				product: function () {
+					var px = arguments[0],
+						qx = Array.prototype.slice.call(arguments, 1),
+						rx = [];
+					for (var i = 0; i < px.length; i++) {
+						rx.push(_.each(px[i], qx));
+					}
+					return rx;
+				},
+				cache: function (rule) {
+					var cache = {}, r = null;
+					return function (s) {
+						try {
+							r = cache[s] = (cache[s] || rule.call(this, s));
+						} catch (e) {
+							r = cache[s] = e;
+						}
+						if (r instanceof $P.Exception) {
+							throw r;
+						} else {
+							return r;
+						}
+					};
+				},
+				any: function () {
+					var px = arguments;
+					return function (s) {
+						var r = null;
+						for (var i = 0; i < px.length; i++) {
+							if (px[i] == null) {
+								continue;
+							}
+							try {
+								r = (px[i].call(this, s));
+							} catch (e) {
+								r = null;
+							}
+							if (r) {
+								return r;
+							}
+						}
+						throw new $P.Exception(s);
+					};
+				},
+				each: function () {
+					var px = arguments;
+					return function (s) {
+						var rx = [],
+							r = null;
+						for (var i = 0; i < px.length; i++) {
+							if (px[i] == null) {
+								continue;
+							}
+							try {
+								r = (px[i].call(this, s));
+							} catch (e) {
+								throw new $P.Exception(s);
+							}
+							rx.push(r[0]);
+							s = r[1];
+						}
+						return [rx, s];
+					};
+				},
+				all: function () {
+					var px = arguments,
+						_ = _;
+					return _.each(_.optional(px));
+				},
+				sequence: function (px, d, c) {
+					d = d || _.rtoken(/^\s*/);
+					c = c || null;
+					if (px.length == 1) {
+						return px[0];
+					}
+					return function (s) {
+						var r = null,
+							q = null;
+						var rx = [];
+						for (var i = 0; i < px.length; i++) {
+							try {
+								r = px[i].call(this, s);
+							} catch (e) {
+								break;
+							}
+							rx.push(r[0]);
+							try {
+								q = d.call(this, r[1]);
+							} catch (ex) {
+								q = null;
+								break;
+							}
+							s = q[1];
+						}
+						if (!r) {
+							throw new $P.Exception(s);
+						}
+						if (q) {
+							throw new $P.Exception(q[1]);
+						}
+						if (c) {
+							try {
+								r = c.call(this, r[1]);
+							} catch (ey) {
+								throw new $P.Exception(r[1]);
+							}
+						}
+						return [rx, (r ? r[1] : s)];
+					};
+				},
+				between: function (d1, p, d2) {
+					d2 = d2 || d1;
+					var _fn = _.each(_.ignore(d1), p, _.ignore(d2));
+					return function (s) {
+						var rx = _fn.call(this, s);
+						return [[rx[0][0], r[0][2]], rx[1]];
+					};
+				},
+				list: function (p, d, c) {
+					d = d || _.rtoken(/^\s*/);
+					c = c || null;
+					return (p instanceof Array ? _.each(_.product(p.slice(0, - 1), _.ignore(d)), p.slice(-1), _.ignore(c)) : _.each(_.many(_.each(p, _.ignore(d))), px, _.ignore(c)));
+				},
+				set: function (px, d, c) {
+					d = d || _.rtoken(/^\s*/);
+					c = c || null;
+					return function (s) {
+						var r = null,
+							p = null,
+							q = null,
+							rx = null,
+							best = [
+								[], s],
+							last = false;
+						for (var i = 0; i < px.length; i++) {
+							q = null;
+							p = null;
+							r = null;
+							last = (px.length == 1);
+							try {
+								r = px[i].call(this, s);
+							} catch (e) {
+								continue;
+							}
+							rx = [
+								[r[0]], r[1]
+							];
+							if (r[1].length > 0 && !last) {
+								try {
+									q = d.call(this, r[1]);
+								} catch (ex) {
+									last = true;
+								}
+							} else {
+								last = true;
+							}
+							if (!last && q[1].length === 0) {
+								last = true;
+							}
+							if (!last) {
+								var qx = [];
+								for (var j = 0; j < px.length; j++) {
+									if (i != j) {
+										qx.push(px[j]);
+									}
+								}
+								p = _.set(qx, d).call(this, q[1]);
+								if (p[0].length > 0) {
+									rx[0] = rx[0].concat(p[0]);
+									rx[1] = p[1];
+								}
+							}
+							if (rx[1].length < best[1].length) {
+								best = rx;
+							}
+							if (best[1].length === 0) {
+								break;
+							}
+						}
+						if (best[0].length === 0) {
+							return best;
+						}
+						if (c) {
+							try {
+								q = c.call(this, best[1]);
+							} catch (ey) {
+								throw new $P.Exception(best[1]);
+							}
+							best[1] = q[1];
+						}
+						return best;
+					};
+				},
+				forward: function (gr, fname) {
+					return function (s) {
+						return gr[fname].call(this, s);
+					};
+				},
+				replace: function (rule, repl) {
+					return function (s) {
+						var r = rule.call(this, s);
+						return [repl, r[1]];
+					};
+				},
+				process: function (rule, fn) {
+					return function (s) {
+						var r = rule.call(this, s);
+						//console.error(".process " +r+ ", s: "+s);
+						return [fn.call(this, r[0]), r[1]];
+					};
+				},
+				min: function (min, rule) {
+					return function (s) {
+						var rx = rule.call(this, s);
+						if (rx[0].length < min) {
+							throw new $P.Exception(s);
+						}
+						return rx;
+					};
+				}
+			};
+			var _generator = function (op) {
+				return function () {
+					var args = null,
+						rx = [];
+					if (arguments.length > 1) {
+						args = Array.prototype.slice.call(arguments);
+					} else if (arguments[0] instanceof Array) {
+						args = arguments[0];
+					}
+					if (args) {
+						for (var i = 0, px = args.shift(); i < px.length; i++) {
+							args.unshift(px[i]);
+							rx.push(op.apply(null, args));
+							args.shift();
+							return rx;
+						}
+					} else {
+						return op.apply(null, arguments);
+					}
+				};
+			};
+			var gx = "optional not ignore cache".split(/\s/);
+			for (var i = 0; i < gx.length; i++) {
+				_[gx[i]] = _generator(_[gx[i]]);
+			}
+			var _vector = function (op) {
+				return function () {
+					if (arguments[0] instanceof Array) {
+						return op.apply(null, arguments[0]);
+					} else {
+						return op.apply(null, arguments);
+					}
+				};
+			};
+			var vx = "each any all".split(/\s/);
+			for (var j = 0; j < vx.length; j++) {
+				_[vx[j]] = _vector(_[vx[j]]);
+			}
+		//}());
+		//(function () {
+			var flattenAndCompact = function (ax) {
+				var rx = [];
+				for (var i = 0; i < ax.length; i++) {
+					if (ax[i] instanceof Array) {
+						rx = rx.concat(flattenAndCompact(ax[i]));
+					} else {
+						if (ax[i]) {
+							rx.push(ax[i]);
+						}
+					}
+				}
+				return rx;
+			};
+			cusDate.Grammar = {};
+			cusDate.Translator = {
+				hour: function (s) {
+					return function () {
+						this.hour = Number(s);
+					};
+				},
+				minute: function (s) {
+					return function () {
+						this.minute = Number(s);
+					};
+				},
+				second: function (s) {
+					return function () {
+						this.second = Number(s);
+					};
+				},
+				meridian: function (s) {
+					return function () {
+						this.meridian = s.slice(0, 1).toLowerCase();
+					};
+				},
+				timezone: function (s) {
+					return function () {
+						var n = s.replace(/[^\d\+\-]/g, "");
+						if (n.length) {
+							this.timezoneOffset = Number(n);
+						} else {
+							this.timezone = s.toLowerCase();
+						}
+					};
+				},
+				day: function (x) {
+					var s = x[0];
+					return function () {
+						this.day = Number(s.match(/\d+/)[0]);
+					};
+				},
+				month: function (s) {
+					return function () {
+						this.month = ((s.length == 3) ? cusDate.getMonthNumberFromName(s) : (Number(s) - 1));
+					};
+				},
+				year: function (s) {
+					return function () {
+						var n = Number(s);
+						this.year = ((s.length > 2) ? n : (n + (((n + 2000) < cusDate.CultureInfo.twoDigitYearMax) ? 2000 : 1900)));
+					};
+				},
+				rday: function (s) {
+					return function () {
+						switch (s) {
+							case "yesterday":
+								this.days = -1;
+								break;
+							case "tomorrow":
+								this.days = 1;
+								break;
+							case "today":
+								this.days = 0;
+								break;
+							case "now":
+								this.days = 0;
+								this.now = true;
+								break;
+						}
+					};
+				},
+				finishExact: function (x) {
+					x = (x instanceof Array) ? x : [x];
+					var now = new Date();
+					this.year = now.getFullYear();
+					this.month = now.getMonth();
+					this.day = 1;
+					this.hour = 0;
+					this.minute = 0;
+					this.second = 0;
+					for (var i = 0; i < x.length; i++) {
+						if (x[i]) {
+							x[i].call(this);
+						}
+					}
+					this.hour = (this.meridian == "p" && this.hour < 13) ? this.hour + 12 : this.hour;
+					if (this.day > cusDate.getDaysInMonth(this.year, this.month)) {
+						throw new RangeError(this.day + " is not a valid value for days.");
+					}
+					var r = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second);
+					if (this.timezone) {
+						r.set({
+							timezone: this.timezone
+						});
+					} else if (this.timezoneOffset) {
+						r.set({
+							timezoneOffset: this.timezoneOffset
+						});
+					}
+					return r;
+				},
+				finish: function (x) {
+					x = (x instanceof Array) ? flattenAndCompact(x) : [x];
+					if (x.length === 0) {
+						return null;
+					}
+					for (var i = 0; i < x.length; i++) {
+						if (typeof x[i] == "function") {
+							x[i].call(this);
+						}
+					}
+					if (this.now) {
+						return new Date();
+					}
+					var today = Date.today();
+					var method = null;
+					var expression = !! (this.days != null || this.orient || this.operator);
+					if (expression) {
+						var gap, mod, orient;
+						orient = ((this.orient == "past" || this.operator == "subtract") ? -1 : 1);
+						if (this.weekday) {
+							this.unit = "day";
+							gap = (cusDate.getDayNumberFromName(this.weekday) - today.getDay());
+							mod = 7;
+							this.days = gap ? ((gap + (orient * mod)) % mod) : (orient * mod);
+						}
+						if (this.month) {
+							this.unit = "month";
+							gap = (this.month - today.getMonth());
+							mod = 12;
+							this.months = gap ? ((gap + (orient * mod)) % mod) : (orient * mod);
+							this.month = null;
+						}
+						if (!this.unit) {
+							this.unit = "day";
+						}
+						if (this[this.unit + "s"] == null || this.operator != null) {
+							if (!this.value) {
+								this.value = 1;
+							}
+							if (this.unit == "week") {
+								this.unit = "day";
+								this.value = this.value * 7;
+							}
+							this[this.unit + "s"] = this.value * orient;
+						}
+						return today.add(this);
+					} else {
+						if (this.meridian && this.hour) {
+							this.hour = (this.hour < 13 && this.meridian == "p") ? this.hour + 12 : this.hour;
+						}
+						if (this.weekday && !this.day) {
+							//console.error("finish :::: " + cusDate.getDayNumberFromName(this.weekday));
+							this.day = (today.addDays((cusDate.getDayNumberFromName(this.weekday) - today.getDay()))).getDate();
+						}
+						if (this.month && !this.day) {
+							this.day = 1;
+						}
+						return today.set(this);
+					}
+				}
+			};
+			//var _ = cusDate.Parsing.Operators,
+			var	g = cusDate.Grammar,
+				t = cusDate.Translator,
+				_fn;
+			g.datePartDelimiter = _.rtoken(/^([\s\-\.\,\/\x27]+)/);
+			g.timePartDelimiter = _.stoken(":");
+			g.whiteSpace = _.rtoken(/^\s*/);
+			g.generalDelimiter = _.rtoken(/^(([\s\,]|at|on)+)/);
+			var _C = {};
+			g.ctoken = function (keys) {
+				var fn = _C[keys];
+				if (!fn) {
+					var c = cusDate.CultureInfo.regexPatterns;
+					var kx = keys.split(/\s+/),
+						px = [];
+					for (var i = 0; i < kx.length; i++) {
+						px.push(_.replace(_.rtoken(c[kx[i]]), kx[i]));
+					}
+					fn = _C[keys] = _.any.apply(null, px);
+				}
+				return fn;
+			};
+			g.ctoken2 = function (key) {
+				return _.rtoken(cusDate.CultureInfo.regexPatterns[key]);
+			};
+			g.h = _.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2]|[1-9])/), t.hour));
+			g.hh = _.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2])/), t.hour));
+			g.H = _.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3]|[0-9])/), t.hour));
+			g.HH = _.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3])/), t.hour));
+			g.m = _.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/), t.minute));
+			g.mm = _.cache(_.process(_.rtoken(/^[0-5][0-9]/), t.minute));
+			g.s = _.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/), t.second));
+			g.ss = _.cache(_.process(_.rtoken(/^[0-5][0-9]/), t.second));
+			g.hms = _.cache(_.sequence([g.H, g.mm, g.ss], g.timePartDelimiter));
+			g.t = _.cache(_.process(g.ctoken2("shortMeridian"), t.meridian));
+			g.tt = _.cache(_.process(g.ctoken2("longMeridian"), t.meridian));
+			g.z = _.cache(_.process(_.rtoken(/^(\+|\-)?\s*\d\d\d\d?/), t.timezone));
+			g.zz = _.cache(_.process(_.rtoken(/^(\+|\-)\s*\d\d\d\d/), t.timezone));
+			g.zzz = _.cache(_.process(g.ctoken2("timezone"), t.timezone));
+			g.timeSuffix = _.each(_.ignore(g.whiteSpace), _.set([g.tt, g.zzz]));
+			g.time = _.each(_.optional(_.ignore(_.stoken("T"))), g.hms, g.timeSuffix);
+			g.d = _.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1]|\d)/), _.optional(g.ctoken2("ordinalSuffix"))), t.day));
+			g.dd = _.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1])/), _.optional(g.ctoken2("ordinalSuffix"))), t.day));
+			g.ddd = g.dddd = _.cache(_.process(g.ctoken("sun mon tue wed thu fri sat"), function (s) {
+				return function () {
+					//console.error("g.ddd weekday: " +s);
+					this.weekday = s;
+				};
+			}));
+			g.M = _.cache(_.process(_.rtoken(/^(1[0-2]|0\d|\d)/), t.month));
+			g.MM = _.cache(_.process(_.rtoken(/^(1[0-2]|0\d)/), t.month));
+			g.MMM = g.MMMM = _.cache(_.process(g.ctoken("jan feb mar apr may jun jul aug sep oct nov dec"), t.month));
+			g.y = _.cache(_.process(_.rtoken(/^(\d\d?)/), t.year));
+			g.yy = _.cache(_.process(_.rtoken(/^(\d\d)/), t.year));
+			g.yyy = _.cache(_.process(_.rtoken(/^(\d\d?\d?\d?)/), t.year));
+			g.yyyy = _.cache(_.process(_.rtoken(/^(\d\d\d\d)/), t.year));
+			_fn = function () {
+				return _.each(_.any.apply(null, arguments), _.not(g.ctoken2("timeContext")));
+			};
+			g.day = _fn(g.d, g.dd);
+			g.month = _fn(g.M, g.MMM);
+			g.year = _fn(g.yyyy, g.yy);
+			g.orientation = _.process(g.ctoken("past future"), function (s) {
+				return function () {
+					this.orient = s;
+				};
+			});
+			g.operator = _.process(g.ctoken("add subtract"), function (s) {
+				return function () {
+					this.operator = s;
+				};
+			});
+			g.rday = _.process(g.ctoken("yesterday tomorrow today now"), t.rday);
+			g.unit = _.process(g.ctoken("minute hour day week month year"), function (s) {
+				return function () {
+					this.unit = s;
+				};
+			});
+			g.value = _.process(_.rtoken(/^\d\d?(st|nd|rd|th)?/), function (s) {
+				return function () {
+					this.value = s.replace(/\D/g, "");
+				};
+			});
+			g.expression = _.set([g.rday, g.operator, g.value, g.unit, g.orientation, g.ddd, g.MMM]);
+			_fn = function () {
+				return _.set(arguments, g.datePartDelimiter);
+			};
+			g.mdy = _fn(g.ddd, g.month, g.day, g.year);
+			g.ymd = _fn(g.ddd, g.year, g.month, g.day);
+			g.dmy = _fn(g.ddd, g.day, g.month, g.year);
+			g.date = function (s) {
+				return ((g[cusDate.CultureInfo.dateElementOrder] || g.mdy).call(this, s));
+			};
+			g.format = _.process(_.many(_.any(_.process(_.rtoken(/^(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?)/), function (fmt) {
+				if (g[fmt]) {
+					return g[fmt];
+				} else {
+					throw cusDate.Parsing.Exception(fmt);
+				}
+			}), _.process(_.rtoken(/^[^dMyhHmstz]+/), function (s) {
+				return _.ignore(_.stoken(s));
+			}))), function (rules) {
+				return _.process(_.each.apply(null, rules), t.finishExact);
+			});
+			var _F = {};
+			var _get = function (f) {
+				return _F[f] = (_F[f] || g.format(f)[0]);
+			};
+			g.formats = function (fx) {
+				if (fx instanceof Array) {
+					var rx = [];
+					//console.error("g.formats " + JSON.stringify(fx));
+					for (var i = 0; i < fx.length; i++) {
+						rx.push(_get(fx[i]));
+					}
+					return _.any.apply(null, rx);
+				} else {
+					//console.error("g.formats " + JSON.stringify(fx));
+					return _get(fx);
+				}
+			};
+			g._formats = g.formats(["yyyy-MM-ddTHH:mm:ss", "ddd, MMM dd, yyyy H:mm:ss tt", "ddd MMM d yyyy HH:mm:ss zzz", "d"]);
+			g._start = _.process(_.set([g.date, g.time, g.expression], g.generalDelimiter, g.whiteSpace), t.finish);
+			g.start = function (s) {
+				try {
+					var r = g._formats.call({}, s);
+					//console.error("cusDate.start " + JSON.stringify(s));
+					if (r[1].length === 0) {
+						return r;
+					}
+				} catch (e) {/* console.error("cusDate.start " + JSON.stringify(e)); */}
+				return g._start.call({}, s);
+			};
+		//}());
+		cusDate._parse = cusDate.parse;
+		cusDate.parse = function (s) {
+			var r = null;
+			if (!s) {
+				return null;
+			}
+			try {
+				r = cusDate.Grammar.start.call({}, s);
+			} catch (e) {
+				console.error("cusDate.parse " + JSON.stringify(e)); 
+				return null;
+			}
+			return ((r[1].length === 0) ? r[0] : null);
+		};
+		cusDate.getParseFunction = function (fx) {
+			var fn = cusDate.Grammar.formats(fx);
+			return function (s) {
+				var r = null;
+				try {
+					r = fn.call({}, s);
+				} catch (e) {
+					return null;
+				}
+				return ((r[1].length === 0) ? r[0] : null);
+			};
+		};
+		cusDate.parseExact = function (s, fx) {
+			return cusDate.getParseFunction(fx)(s);
+		};
+		
+		return cusDate;
+	},
 
 
 	// ** SERVICES
@@ -881,6 +2112,9 @@ var AppAssistant = Class.create (
 	},
 	getReminderManager: function () {
 		return this.reminderManager;
+	},
+	getEventManager: function () {
+		return this.eventManager;
 	}
 });
 
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/dashboard-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/dashboard-assistant.js
index e1a8eb1..cfe7474 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/dashboard-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/dashboard-assistant.js
@@ -12,6 +12,19 @@ var DashboardAssistant = Class.create({
 	},
 
 	setup: function() {
+		this.snoozeCookie = new Mojo.Model.Cookie("snoozeCookie");
+		
+		this.showReminderDashboard = true;
+		if (this.snoozeCookie) {
+			var snzcookie = this.snoozeCookie.get();
+			if (snzcookie) {
+				if(snzcookie.showReminderDashboard !== undefined) {
+					this.showReminderDashboard = snzcookie.showReminderDashboard;
+				} else {
+					this.showReminderDashboard = true;
+				}
+			}
+		}
 		Mojo.Log.info("========= DS: setup");
 		this.reminderManager.observeReminders ("dashboard", this);
 		this.reminderManager.observeRemindersDisplay ("dashboard", this);
@@ -30,8 +43,12 @@ var DashboardAssistant = Class.create({
 		//Swiping the dashboard === dismiss.  If our reminder still exists, dismiss it.  If we have multiples, this should
 		//leave the remaining in whatever state they were in (likely snoozed) and dismiss whichever one we showed.
 		if(this.reminder){
+			//UberCalendar Mod -- Do not remove the scheduled reminders
+			//This is so that if the dashboard event is swiped away the reminder is not removed
+			//to support reminders that are far in the future but may not want the icon in the dashboard.
+
 			Mojo.Log.info("========= DS: deactivate: dismissing "+this.reminder._id);
-			this.reminderManager.dismissReminder(this.reminder);
+			//this.reminderManager.dismissReminder(this.reminder);
 		}			
 	},
 	
@@ -55,7 +72,10 @@ var DashboardAssistant = Class.create({
 			
 		}		
 		
-		if(this.reminder){
+		if(this.showReminderDashboard === false && (!this.reminder || (this.reminder && this.reminder.state === ReminderManager.SNOOZED)) ) {
+			Mojo.Log.error("========= DS: UC show reminder dash false")
+			this.controller.window.close();
+		} else if(this.reminder){
 			Mojo.Log.info("========= DS: update dash: "+this.reminder._id);
 			this.reminderManager.showCompleted('dashboard',this.reminder._id);
 			this.updateHTML (this.controller.get ("dashboard-subject"), (this.reminder.subject) ? this.reminder.subject	  : '');
@@ -104,6 +124,8 @@ var DashboardAssistant = Class.create({
 	},
 
 	showEventDetails: function() {
+		// set var so it won't repeat alert from dashboard
+		ReminderManager.fromDash = true;
 		//show the full reminder dialog again
 		this.reminderManager.addReminders([this.reminder]);
 	},
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/datetime-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/datetime-assistant.js
index de09b4c..7f8475d 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/datetime-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/datetime-assistant.js
@@ -12,8 +12,9 @@ var DatetimeAssistant = Class.create({
         //Mojo.Log.info("datetime-assistant:initialize");
 
 		this.app			= getAppAssistant();
-		this.eventManager	= new Calendar.EventManager();
+		this.eventManager	= this.app.getEventManager();
 		this.prefsManager	= this.app.getPrefsManager();
+		this.tzMgr			= new Calendar.TimezoneManager();
         this.targetEvent	= targetEvent;
         this.targetCallBack	= callback;
         this.oldEvent		= oldEvent;
@@ -46,7 +47,7 @@ var DatetimeAssistant = Class.create({
 	updateTargetEvent: function (response) {
 		if (!response.returnValue) { return; }
 		//console.log ("\n\n\ndate-time.updateTargetEvent: response: "+JSON.stringify (response)+"\n\ntargetEvent: "+JSON.stringify (this.targetEvent)+"\n\n\n");
-		this.targetEvent._rev = response.results[0].rev;
+		this.targetEvent._rev = response.results[0].rev || response.results[0]._rev;
 	},
 
     update: function(){
@@ -173,9 +174,702 @@ var DatetimeAssistant = Class.create({
         }
     },
     
+	// From monthview (Feb is fixed up by hand as necessary)
+	// We try to avoid the DateJS stuff because it's indescribably slow.
+	_monthDays: [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ],
+	
+	rdayNames: function() {
+		var stday = 0;
+		if(this.startOfWeek==null || this.startOfWeek == 'undefined'){
+			this.startOfWeek = 1;
+		}
+		stday = this.startOfWeek - 1;
+		var tday = new Date();
+		tday.moveToDayOfWeek(stday);
+		for (var i = 0; i < 7; i++) {
+			this._rdNames[i] = Mojo.Format.formatDate(tday, "E");
+			tday.addDays(1);
+		}
+	},
+	
+	isLeapYear: function(year) {
+		if (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0)) {
+			return true;
+		}
+			
+		return false;
+	},
+	
+	getIsLastProps: function(value) {
+		var monthDays= [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
+		var dt = new Date(value);
+		var daydt = dt.getDate();
+		var yr = dt.getFullYear();
+		var mn = dt.getMonth();
+		if(this.isLeapYear(yr)) {
+			monthDays[1] = 29;
+		} else {
+			monthDays[1] = 28;
+		}
+		var lastdayIdx = (daydt - monthDays[mn] -1);
+		if(monthDays[mn] - daydt < 7) {
+			if(monthDays[mn] - daydt === 0) {
+				return {lastweek: true, lastday: lastdayIdx, islastday: true };
+			} else {
+				return {lastweek: true, lastday: lastdayIdx, islastday: false};
+			}
+		} else {
+			return {lastweek: false, lastday: lastdayIdx, islastday: false};
+		}
+	},
+	
+	radvanceWk: function(wk, month, year, maxwkn) {
+		var wkn = parseInt(wk, 10);
+		if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+			var maxwkn = this.weekModulusNum;
+		}
+		if((wkn > 8) && (wkn < maxwkn)) {
+			return (wkn + 1);
+		} else if((wkn <= 8) && (wkn < maxwkn)) {
+			wkn +=1;
+			var zd = '0';
+			return zd + wkn.toString();
+		} else if(wkn == maxwkn || wkn > maxwkn) {
+			var zd = '01';
+			return zd;
+		}
+	},
+	
+	// draw month function, expects numbers 0 based month
+	canvasRM: function(month, year, context) {
+		// date object
+		var rmon = new Date(year, month, 1);
+		
+		//setup number of days, 1st day(day of week), week number, number of weeks
+		var rd1dayOfMon = rmon.getDay();
+		//var rwkNum = rmon.getISO8601Week();
+		//var maxwkn = new Date((month != 0 ? year : year -1), 11, 28).getISO8601Week();
+		var rwkNum = this.useISOweekNum === true ? rmon.getISO8601Week() : rmon.getWeekOfYear(this.prefStartDoW);
+		var maxwkn = this.useISOweekNum === true ? new Date((month != 0 ? year : year -1), 11, 28).getISO8601Week() : new Date((month != 0 ? year : year -1), 11, 28).getWeekOfYear(this.prefStartDoW);
+		maxwkn = maxwkn == 0 ? 53 : maxwkn;
+		rwkNum = rwkNum == 0 ? maxwkn : rwkNum;
+		if(this.weekNumOffset !== undefined && this.weekNumOffset !=0) {
+			var wkNum = parseInt(rwkNum,10) + this.weekNumOffset;
+			rwkNum = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			rwkNum = rwkNum < 10 ? '0' + rwkNum : rwkNum;
+		}
+		if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+			rwkNum = (parseInt(rwkNum, 10) % this.weekModulusNum);
+			rwkNum = rwkNum !== 0 ? rwkNum : this.weekModulusNum;
+			rwkNum = rwkNum < 10 ? '0' + rwkNum : rwkNum;
+		}
+		var r1offset = rd1dayOfMon - (this.startOfWeek - 1);
+		if (r1offset < 0) {r1offset += 7;}  //num of days of prev mon
+		if(this.isLeapYear(year)) {
+			this._monthDays[1] = 29;
+		} else {
+			this._monthDays[1] = 28;
+		}
+		this.RM[context].maxdays = this._monthDays[month];		
+		//setup fonts and spacing
+		this.mthctx[context].fillStyle = "rgb(0, 0, 0)";
+		this.mthctx[context].font = "bold 14px Prelude";
+		this.mthctx[context].textAlign = "left";
+		this.mthctx[context].textBaseline = "top";
+		var top = 2;
+		var leftmargin = 2;
+		var left = 0 + leftmargin;
+		var txt = "";
+		this.colHW = 30;
+		var maxW = 30;
+		this.topCor = 42 + (this.colHW/2); //top margin + half-cell
+		this.leftCor = this.colHW;
+		this.RM[context].fstDayLidx = r1offset;
+		this.RM[context].fstDayTidx = 1;
+		// setup title and week header
+		var titleTxt = Mojo.Format.formatDate(rmon, $L("MMM yyyy"));
+		this.mthctx[context].strokeText(titleTxt, left + 90, top);
+		this.mthctx[context].textAlign = "center";
+		for (var i = 0; i < 7; i++) {
+			txt = this._rdNames[i];
+			left = (i * this.colHW) + this.leftCor + 13;//13 is for font &txt to ctr
+			top = 22;
+			this.mthctx[context].strokeText(txt, left, top);	
+		}
+		this.mthctx[context].fillStyle = "rgb(104, 104, 104)";
+		this.mthctx[context].font = "14px Prelude";
+		this.mthctx[context].textAlign = "left";
+		this.mthctx[context].textBaseline = "alphabetic";
+		for (var j = 0; j < 6; j++) {
+			txt = rwkNum;
+			left = leftmargin;
+			top = (j * this.colHW) + this.topCor + 3; // 3 is for font correction
+			this.mthctx[context].strokeText(txt, left, top);
+			rwkNum = this.radvanceWk(rwkNum, month, year, maxwkn);
+		}
+		//iterate through the date rows
+		var num = 1;
+		this.mthctx[context].fillStyle = "rgb(0, 0, 0)";
+		this.mthctx[context].font = "bold 14px Prelude";
+		this.mthctx[context].textAlign = "center";
+		for (var j=0; j<6; j++) {
+			if (num > this.RM[context].maxdays) {
+				break; }
+			top = (j * this.colHW) + this.topCor + 3;
+			for (var i=0; i<7; i++) {
+				if (j==0 && i ==0) {i = r1offset;}
+				txt = num;
+				left =  (i * this.colHW) + this.leftCor + 13;
+				this.mthctx[context].strokeText(txt, left, top);
+				num +=1;
+				if (num > this.RM[context].maxdays) {
+					break; }
+			}
+		}
+	},
+	
+	RMnextM: function(index) {
+		this.RM[index].month = this.RM[index - 1].month;
+		this.RM[index].year = this.RM[index - 1].year;
+		if(this.RM[index].month == 11) {
+			this.RM[index].month = 0;
+			this.RM[index].year += 1;
+		} else {
+			this.RM[index].month += 1;
+		}
+	},
+	
+	RMprevM: function(index) {
+		this.RM[index].month = this.RM[index + 1].month;
+		this.RM[index].year = this.RM[index + 1].year;
+		if(this.RM[index].month == 0) {
+			this.RM[index].month = 11;
+			this.RM[index].year -= 1;
+		} else {
+			this.RM[index].month -= 1;
+		}
+	},
+	
+	// determin calendar order for the canvas's
+	orderRM: function( stDate, eDate, isAllDay) {
+		//check first
+		if(stDate.getTime() > eDate.getTime) {
+			Mojo.Log.error ("start after end");
+			return;
+		}
+		for(var i=0; i<6; i++) {
+			this.RM[i] = {};
+			this.RM[i].month = "";
+			this.RM[i].year = "";
+			this.RM[i].fstDayLidx = 1;
+			this.RM[i].fstDayTidx = 1;
+			this.RM[i].maxdays = 1;
+		}
+		// date objects
+		var curD = new Date();
+		var utils = new Calendar.Utils();
+		var curMY = {month: curD.getMonth(), year: curD.getFullYear() };
+		var stMY = {month: stDate.getMonth(), year: stDate.getFullYear() };
+		var eMY = {month: eDate.getMonth(), year: eDate.getFullYear() };
+		this.RMlast.duration = utils.getTimePeriodParts(stDate, eDate, isAllDay);
+		var rwhen = {};
+		rwhen = utils.getTimePeriodParts(curD, stDate, isAllDay);
+		var dura = this.RMlast.duration;
+		// determine duration case
+		if ( (dura.years == 0) && (((dura.months == 5) && (dura.days == 0)) || (dura.months < 5)) ) {
+			if ( (dura.months <=1) && ((rwhen.months <= 3) && (rwhen.years <=0)) ){
+				// we can fit in 6 months try to get today in the 6 months
+				if(curD.getTime() < stDate.getTime()) {
+					//close future start with curDate 
+					this.redlineSplit.setStyle('border-right: 1px solid black');
+					this.RM[0].month = curMY.month;
+					this.RM[0].year = curMY.year;
+					for (var i = 1; i < 6; i++) {
+						this.RMnextM(i);
+					}
+				} else {
+					// in close past start with stDate
+					this.redlineSplit.setStyle('border-right: 1px solid black');
+					this.RM[0].month = stMY.month;
+					this.RM[0].year = stMY.year;
+					for (var i = 1; i < 6; i++) {
+						this.RMnextM(i);
+					}
+				}
+			} else {
+				if((curD.getTime() < stDate.getTime()) && (((dura.months == 4) && (dura.days == 0) && (dura.years ==0)) || ((dura.months <4) && (dura.years==0)))){
+					// in 6 months, too far away for today, in future do prev 
+					this.redlineSplit.setStyle('border-right: 1px solid black');
+					this.RM[1].month = stMY.month;
+					this.RM[1].year = stMY.year;
+					this.RMprevM(0);
+					this.RMnextM(2);
+					this.RMnextM(3);
+					this.RMnextM(4);
+					this.RMnextM(5);
+				} else {
+					// in past or could be 6 cal months do start + 5
+					this.redlineSplit.setStyle('border-right: 1px solid black');
+					this.RM[0].month = stMY.month;
+					this.RM[0].year = stMY.year;
+					for (var i = 1; i < 6; i++) {
+						this.RMnextM(i);
+					}
+				}
+			}
+		} else { //duration won't fit in 6 months
+			if( ((stMY.year == curMY.year) && (stMY.month == curMY.month)) ||
+			  ((stMY.year < curMY.year) ||  ((stMY.year == curMY.year) && (stMY.month < curMY.month))) ){
+			//past or present month - do start + next + next redline split then -- prev + end + next
+				this.redlineSplit.setStyle('border-right: 2px solid red');
+				this.RM[0].month = stMY.month;
+				this.RM[0].year = stMY.year;
+				this.RMnextM(1);
+				this.RMnextM(2);
+				this.RM[4].month = eMY.month;
+				this.RM[4].year = eMY.year;
+				this.RMprevM(3);
+				this.RMnextM(5);
+			} else if((stMY.year > curMY.year) ||  ((stMY.year == curMY.year) && (stMY.month > curMY.month))) {
+			// future - do prev + start + next redline split prev + end + next
+				this.redlineSplit.setStyle('border-right: 2px solid red');
+				this.RM[1].month = stMY.month;
+				this.RM[1].year = stMY.year;
+				this.RMprevM(0);
+				this.RMnextM(2);
+				this.RM[4].month = eMY.month;
+				this.RM[4].year = eMY.year;
+				this.RMprevM(3);
+				this.RMnextM(5);
+			}
+		}	
+		// call canvasRM
+		for(var k=0; k<6; k++){
+			this.canvasRM(this.RM[k].month, this.RM[k].year, k);
+		}
+		// record for next time comparisons
+		this.RMlast.stMY = stMY;
+		this.RMlast.eMY = eMY;
+		this.RMlast.curMY = curMY;
+	},
+	
+	risRendered: function( year, month) {
+		for(var i=0; i<6; i++) {
+			if((this.RM[i].month == month) && (this.RM[i].year == year)) {
+				return i;
+			}
+		}
+		return -1;
+	},
+	
+	//mark days in calendar
+	markDay: function(rdate, imgsrc, color, rx, ry, rwt, rht) {
+		// determine which month, year, date
+		if (rdate instanceof Date == true) { 
+			var whatMn = rdate.getMonth();
+			var whatYr = rdate.getFullYear();
+			var whatDt = rdate.getDate();
+		} else if(rdate !== undefined) {
+			this.rtdate = new Date(rdate);
+			var whatMn = this.rtdate.getMonth();
+			var whatYr = this.rtdate.getFullYear();
+			var whatDt = this.rtdate.getDate();
+		}
+		var rmimgsrc = imgsrc;
+		var idx = this.risRendered(whatYr, whatMn);
+		if(idx == -1) { return; }
+		var fstDayLidx = this.RM[idx].fstDayLidx;
+		var fstDayTidx = this.RM[idx].fstDayTidx;
+		var rRow = Math.floor((whatDt + fstDayLidx -1) / 7);
+		var col = (whatDt + fstDayLidx - 1) % 7;
+		var itop = (rRow * this.colHW) + 40;
+		var ileft = (col * this.colHW) + this.colHW;
+		itop = (ry !== undefined) ? itop + ry : itop;
+		ileft = (rx !== undefined) ? ileft + rx : ileft;
+		if (rmimgsrc !== undefined) {
+			this.mthctx[idx].drawImage(rmimgsrc, ileft, itop, (rwt !== undefined)? rwt : this.colHW,(rht !== undefined)? rht : this.colHW);
+		} else if(color !== undefined) {
+			this.mthctx[idx].fillStyle = color;
+			this.mthctx[idx].fillRect(ileft, itop, this.colHW-2, this.colHW-2);
+		} else {
+			this.mthctx[idx].fillStyle = "rgba(232,227,124,0.5)";
+			this.mthctx[idx].fillRect(ileft, itop, this.colHW-2, this.colHW-2);
+		}
+	},
+	
+	rmMarkD: function() {
+		if(this.RMlast.duration.months > 7) {
+			return;
+		}
+		if((this.RMlast.stMY.month == this.RMlast.eMY.month) && (this.RMlast.stD.getDate() == this.RMlast.eD.getDate())) {
+			this.RMlast.HMDB = 1;
+			return;
+		}
+		var stTS = new Date(this.RMlast.stMY.year, this.RMlast.stMY.month, this.RMlast.stD.getDate(), 12).getTime();
+		var daylen = 3600000*24;
+		var utils = new Calendar.Utils();
+		var end = utils.howManyDaysBetween(this.RMlast.stD, this.RMlast.eD) +1;
+		this.RMlast.HMDB = end;
+		this.RMlast.stTS = stTS;
+		for (var z = 0; z < end; z++) {
+			this.markDay(stTS + (z*daylen),
+							this.dImg, 
+							null/*color*/,
+							null/*x adjust*/,
+							this.colHW-2/*y adjust*/ ,
+							this.colHW/*wd adjust*/,
+							2 /*ht adjust*/)
+		}
+	},
+	
+	rmRecur: function() {
+		var utils = new Calendar.Utils();
+		// this function is after it is a known recurrent model
+		// time of when -- occuring each
+		var rcfrequency = this.targetEvent.rrule.freq;
+		// howmany times between
+		var rcint = this.targetEvent.rrule.interval;
+		// take stTS and duradays to create the base event from the curent event
+		var rcduraD = this.RMlast.HMDB;
+		var rcstTS = this.targetEvent.dtstart;
+		var rcstD = new Date(rcstTS);
+		var rcEvtHour = rcstD.getHours();
+		var rcEvtMin = rcstD.getMinutes();
+		var rcEvtSec = 0;
+		var stDoW = rcstD.getDay();
+		var dlen = 3600000*24;
+		var rcdaysofwk = [];
+		this.recTS = []; // array of timestamps of the recurring evt
+		switch (rcfrequency) {
+				case 'DAILY':
+					var recfreqTS = dlen;
+					break;
+				case 'WEEKLY':
+					var recfreqTS = dlen * 7;
+					break;
+				case 'MONTHLY':
+					var recfreqTS = -1;
+					break;
+				case 'YEARLY':
+					var recfreqTS = -1;
+					break;
+		}
+		if(this.targetEvent.rrule.until) {
+			this.RMlast.recD = new Date(this.targetEvent.rrule.until);
+		} else if(this.targetEvent.isRecurringForever) {
+			if(rcfrequency == "DAILY" || recfreqTS == -1) {
+			// go out 6 months
+				this.RMlast.recD = new Date(this.RMlast.eMY.month + 6 > 11 ? this.RMlast.eMY.year + 1 : this.RMlast.eMY.year, this.RMlast.eMY.month + 6 > 11 ? this.RMlast.eMY.month - 6 : this.RMlast.eMY.month + 6, this.RMlast.eD.getDate());
+			} else {	// go out 1 year from the end date
+				this.RMlast.recD = new Date(this.RMlast.eMY.year + 1, this.RMlast.eMY.month, this.RMlast.eD.getDate());
+			}
+		} else {
+			// go out 6 months
+				this.RMlast.recD = new Date(this.RMlast.eMY.month + 6 > 11 ? this.RMlast.eMY.year + 1 : this.RMlast.eMY.year, this.RMlast.eMY.month + 6 > 11 ? this.RMlast.eMY.month - 6 : this.RMlast.eMY.month + 6, this.RMlast.eD.getDate());
+		}
+		this.RMlast.recD.setHours(rcEvtHour);	
+		this.RMlast.recD.setMinutes(rcEvtMin);
+		this.RMlast.recD.setSeconds(rcEvtSec);
+		var recHMDB = utils.howManyDaysBetween(rcstD, this.RMlast.recD) +1;
+		// detect recurr model
+		switch (rcfrequency) {
+			case 'DAILY' : // Do Not Localize
+				// get how many intervals
+				var rcdays = 1 + Math.floor((recHMDB*dlen) / (recfreqTS*rcint));
+				for(var k=0; k < rcdays; k++) { // cycle through intervals
+					this.recTS.push((dlen*k*rcint) + rcstTS);	
+				}
+				while(this.recTS[this.recTS.length -1] > this.RMlast.recD.getTime()){
+					this.recTS.pop();
+				}
+				break;
+				
+            case 'WEEKLY': // Do NOT Localize
+				// find the day numbers from their names
+				var rci = this.targetEvent.rrule.rules[0].ruleValue.length;
+				var rcSundayTS = rcstTS - (stDoW*dlen); 
+				for(var i=0; i < rci; i++) {
+					rcdaysofwk[i] = this.targetEvent.rrule.rules[0].ruleValue[i].day;
+				}
+				if(rci > 1) {
+				// get start day dow because it has to be in rcdaysofwk
+					var rcpos = rcdaysofwk.indexOf(stDoW);
+					//need to get to the last of the array before start of next week
+					if(rcpos !== rci - 1){
+						for(var i = rcpos; i <= rci; i++) {
+							for(var j = 0; j < rcduraD; j++) {
+							// array's TS = duration days *milliseconds in a day + (sundays TS + day of week adjustment) 
+							this.recTS.push((dlen*j) + (rcSundayTS + dlen*rcdaysofwk[i]));	
+							}
+						}
+					}
+				}
+				//should be at the first day of the week after start day's week
+				// need to get how many intervals until GetHowManyDays / 7*interval
+				var rcwks = 1 + Math.floor((recHMDB*dlen) / (recfreqTS*rcint)); 
+				for(var k=1; k <= rcwks; k++) { // cycle through intervals
+					var rcwkSunTS = rcSundayTS + (rcint * recfreqTS * k);
+					for(var i = 0; i < rci; i++) { // cycle through days of week
+						for(var j = 0; j < rcduraD; j++) { //cycle duration
+						this.recTS.push((dlen*j) + (rcwkSunTS + dlen*rcdaysofwk[i]));	
+						}
+					}
+				}
+				while(this.recTS[this.recTS.length -1] > this.RMlast.recD.getTime()){
+					this.recTS.pop();
+				}
+            	break;
+                
+            case 'MONTHLY': // Do NOT Localize
+                //Monthly by date
+				var rcmonths = 1 + Math.floor(utils.howManyMonthsBetween(rcstD ,this.RMlast.recD)/rcint);
+                if (this.targetEvent.rrule.rules[0].ruleType === "BYMONTHDAY") {
+                    var rcmonthday = parseInt(this.targetEvent.rrule.rules[0].ruleValue[0].ord, 10);
+					if(rcmonthday > 0) {
+						var rcstmon = rcstD.getMonth();
+						var rcstyear = rcstD.getFullYear();
+						for(var i=0; i<rcmonths; i++) { //cycle through intervals
+							var rcmon = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon + (i*rcint);
+							var rcyear = (rcstmon + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear; 
+							var rcmonChk = new Date(rcyear, rcmon, rcmonthday, rcEvtHour, rcEvtMin, rcEvtSec, 0);
+							var rcmonTS = rcmonChk.getTime();
+							if(rcmonChk.getMonth() === rcmon) { // test valid date in the month
+								for(var j=0; j<rcduraD; j++) { // cycle through duration
+									this.recTS.push(rcmonTS + (j*dlen));
+								}
+							}
+						}
+					} else if(rcmonthday < 0) {
+						var rcstmon = rcstD.getMonth();
+						var rcstyear = rcstD.getFullYear();
+						for(var i=0; i<rcmonths; i++) { //cycle through intervals
+							var rcmon = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon + (i*rcint);
+							var rcmonLast = (rcstmon + 1 + (i*rcint)) > 11 ? rcstmon +1 + (i*rcint) - 12 : rcstmon + 1 + (i*rcint);
+							var rcyear = (rcstmon + 1 + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear; 
+							var rcmonChk = new Date(new Date(rcyear, rcmonLast, 1, rcEvtHour, rcEvtMin, rcEvtSec, 0).getTime() + rcmonthday*dlen);
+							var rcmonTS = rcmonChk.getTime();
+							if(rcmonChk.getMonth() === rcmon) { // test valid date in the month
+								for(var j=0; j<rcduraD; j++) { // cycle through duration
+									this.recTS.push(rcmonTS + (j*dlen));
+								}
+							}
+						}
+					}
+                } else {
+					// check for multiple by days and last week type set
+					var byDayLen = this.targetEvent.rrule.rules[0].ruleValue.length;
+					var byDayDefault = true;
+					if(byDayLen && byDayLen > 1) {
+						var byDayArray = [];
+						var ford = parseInt(this.targetEvent.rrule.rules[0].ruleValue[0].ord, 10);
+						for(var i=0; i<byDayLen; i++) {
+							var ord = parseInt(this.targetEvent.rrule.rules[0].ruleValue[i].ord, 10);
+							if(ord && ord !== ford) {//we only care about matching bysetpos type repeat
+								byDayDefault = true; //default to just using first byday
+								break; //cal doesn't support multiple pos days in monthly repeat 
+							} else if(ord && ord === ford) {
+								var DoW = this.targetEvent.rrule.rules[0].ruleValue[i].day;
+								if(byDayArray.indexOf(DoW) === -1) {//not in previously
+									byDayArray.push(DoW);
+								}
+								byDayDefault = false;
+							}
+						} //should have an array with the last days wanted
+						if(!byDayDefault && byDayArray.length > 1) {
+							if(ford<0){
+								var rcmonthday = -1;
+							} else if(ford>0) {
+								var rcmonthday = 1;
+							}
+							var rcstmon = rcstD.getMonth();
+							var rcstyear = rcstD.getFullYear();
+							for(var i=0; i<rcmonths; i++) { //cycle through intervals
+								var rcmon = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon + (i*rcint);
+								if(ford<0){
+									var rcmonLast = (rcstmon + 1 + (i*rcint)) > 11 ? rcstmon +1 + (i*rcint) - 12 : rcstmon + 1 +(i*rcint);
+									var rcyear = (rcstmon + 1 + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear; 
+									var rcmonTS = new Date(rcyear, rcmonLast, 1, rcEvtHour, rcEvtMin, rcEvtSec, 0).getTime() + rcmonthday*dlen;
+								} else if(ford>0){
+									var rcmonLast = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon +(i*rcint);
+									var rcyear = (rcstmon + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear; 
+									var rcmonTS = new Date(rcyear, rcmonLast, 1, rcEvtHour, rcEvtMin, rcEvtSec, 0).getTime();
+								}
+									var rcDoW = new Date(rcmonTS).getDay();
+								for(var k=0; k< Math.abs(ford); k++) {
+									while(byDayArray.indexOf(rcDoW) === -1) {
+										rcmonTS = rcmonTS + rcmonthday*dlen;
+										rcDoW = new Date(rcmonTS).getDay();
+									}
+									if(k !== Math.abs(ford) - 1){
+										rcmonTS = rcmonTS + rcmonthday*dlen;
+										var rcDoW = new Date(rcmonTS).getDay();
+									}
+								}
+								var rcmonChk = new Date(rcmonTS);
+								if(rcmonChk.getMonth() === rcmon) { // test valid date in the month
+									for(var j=0; j<rcduraD; j++) { // cycle through duration
+										this.recTS.push(rcmonTS + (j*dlen));
+									}
+								}
+							}
+						} else {
+							byDayDefault = true; // just one byday
+						}
+					} else if(byDayLen === 1 || byDayDefault) {
+						var nth = parseInt(this.targetEvent.rrule.rules[0].ruleValue[0].ord,10);
+						if(nth && nth > 0) {
+							var rcmonths = 1 + Math.floor(utils.howManyMonthsBetween(rcstD ,this.RMlast.recD)/rcint);
+							var rcstmon = rcstD.getMonth();
+							var rcstyear = rcstD.getFullYear();
+							var rcwantday = rcstD.getDay();
+							for(var i=0; i<rcmonths; i++) { // cycle through intervals
+								var rcmon = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon + (i*rcint);
+								var rcyear = (rcstmon + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear;
+								var rcmonD = new Date(rcyear, rcmon, 1, rcEvtHour, rcEvtMin, rcEvtSec, 0);
+								var rcfstday = rcmonD.getDay();
+								var rcaddTS = ((rcwantday - rcfstday) < 0) ? ((rcwantday - rcfstday) + 7)*dlen : (rcwantday - rcfstday)*dlen;
+								var rcmonTS = rcmonD.getTime() + rcaddTS + 7*dlen*(nth-1);
+								var rcmonChk = new Date(rcmonTS);
+								if(rcmonChk.getMonth() === rcmon) { // test valid date in the month
+									for(var j=0; j<rcduraD; j++) { // cycle through duration
+										this.recTS.push(rcmonTS + (j*dlen));
+									}
+								}
+							}
+						} else if(nth && nth<0) {
+							var rcmonths = 1 + Math.floor(utils.howManyMonthsBetween(rcstD ,this.RMlast.recD)/rcint);
+							var rcstmon = rcstD.getMonth();
+							var rcstyear = rcstD.getFullYear();
+							var rcwantday = rcstD.getDay();
+							for(var i=0; i<rcmonths; i++) { // cycle through intervals
+								var rcmon = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon + (i*rcint);
+								var rcmonLast = (rcstmon + 1 + (i*rcint)) > 11 ? rcstmon +1 + (i*rcint) - 12 : rcstmon + 1 +(i*rcint);
+								var rcyear = (rcstmon + 1 + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear;
+								var rcmonD = new Date(new Date(rcyear, rcmonLast, 1, rcEvtHour, rcEvtMin, rcEvtSec, 0).getTime() - dlen) ;
+								var rcLstday = rcmonD.getDay();
+								var rcaddTS = ((rcwantday - rcLstday) > 0) ? ((rcwantday - rcLstday) - 7)*dlen : (rcwantday - rcLstday)*dlen;
+								var rcmonTS = rcmonD.getTime() + rcaddTS + 7*dlen*(nth+1);
+								var rcmonChk = new Date(rcmonTS);
+								if(rcmonChk.getMonth() === rcmon) { // test valid date in the month
+									for(var j=0; j<rcduraD; j++) { // cycle through duration
+										this.recTS.push(rcmonTS + (j*dlen));
+									}
+								}
+							}
+						}
+					}	
+				}
+				while(this.recTS[this.recTS.length -1] > this.RMlast.recD.getTime()){
+					this.recTS.pop();
+				}
+				break;
+				
+			default:                
+				break;
+		}
+		this.rcexTS = [];
+		// pull out the exceptions
+		if(this.targetEvent.exdates !== undefined) {
+			if(this.targetEvent.exdates !== "") {
+				
+				var rcexstr = [];
+				for(var i=0; i<this.targetEvent.exdates.length; i++) {
+					rcexstr[i] = this.targetEvent.exdates[i];
+				}
+				for(var j=0; j<rcexstr.length; j++) {
+					var rcyear = rcexstr[j].substring(0,4);
+					var rcmon = parseInt(rcexstr[j].substring(4,6), 10) -1;
+					var rcday = parseInt(rcexstr[j].substring(6,8), 10);
+					var rchour = parseInt(rcexstr[j].substring(9,11), 10);
+					var rcmin = parseInt(rcexstr[j].substring(11,13), 10);
+					var rcsec = 0; // parseInt(rcexstr[j].substring(16,18), 10);
+					var rctestD = new Date(Date.UTC(rcyear, rcmon, rcday, rchour, rcmin, rcsec, 0));
+					this.rcexTS[j] = rctestD.getTime();
+				}
+				// pull exdates out of array
+				for(var k=0; k<this.rcexTS.length; k++) {
+					var idx = this.recTS.indexOf(this.rcexTS[k]);
+					if(idx !== -1) {
+						this.recTS.splice(idx,1);
+					}
+				}
+			}
+		}
+		// mark the recurrence days
+		var rcstop = this.recTS.length;
+		for(var k=0; k<rcstop; k++){
+			this.markDay(this.recTS[k],
+							this.rImg, 
+							null/*color*/,
+							null/*x adjust*/,
+							this.colHW-2/*y adjust*/ ,
+							this.colHW/*wd adjust*/,
+							2 /*ht adjust*/)
+		}
+		
+	},
+	
+	rmEval: function() {
+		if(this.targetModifiedTime) {			
+			this.RMlast.stD = new Date(this.targetModifiedTime.start);
+			this.RMlast.eD = new Date(this.targetModifiedTime.end);
+		} else {
+			this.RMlast.stD = new Date(this.targetEvent.dtstart);
+			this.RMlast.eD = new Date(this.targetEvent.dtend);
+		}
+		if(this.targetEvent.rrule) {
+			
+			this.rmdoRec = true;
+			return;
+		} else {
+			this.rmdoRec = false;
+			return;
+		}
+	},
     setup: function(){
         //Mojo.Log.info("datetime-assistant:setup");
-        
+		this.weekModulusNum = 1;
+		this.weekNumOffset = 0;
+		this.useISOweekNum = false;
+		this.uberMinuteInterval = 5;
+		this.prefStartDoW = 0;
+		this.duraBtnOnTop = false;
+		this.weekCookie = new Mojo.Model.Cookie('WeekViewEnhanced');
+		if (this.weekCookie) {
+			var weekcookie = this.weekCookie.get();
+			if(weekcookie) {
+				if(weekcookie.weeknumoffset !== undefined) {
+						this.weekNumOffset = parseInt(weekcookie.weeknumoffset, 10);
+				} else {
+						this.weekNumOffset = 0;
+				}
+				if(weekcookie.weekmodulusnum !== undefined) {
+						this.weekModulusNum = parseInt(weekcookie.weekmodulusnum, 10);
+				} else {
+						this.weekModulusNum = 1;
+				}
+				if (weekcookie.useisoweeknum !== undefined) {
+					this.useISOweekNum = weekcookie.useisoweeknum;
+				} else {
+					this.useISOweekNum = false;
+				}
+				if (weekcookie.prefsstartofweek !== undefined) {
+					this.prefStartDoW = parseInt(weekcookie.prefsstartofweek, 10) -1;
+				} else {
+					this.prefStartDoW = 0;
+				}
+				if (weekcookie.uberminuteinterval !== undefined) {
+					this.uberMinuteInterval = parseInt(weekcookie.uberminuteinterval, 10);
+				} else {
+					this.uberMinuteInterval = 5;
+				}
+				if (weekcookie.durabtnontop !== undefined) {
+					this.duraBtnOnTop = weekcookie.durabtnontop;
+				} else {
+					this.duraBtnOnTop = false;
+				}
+			}
+		}
 		this.appMenuModel= { visible:true, 
             label: $L('Calendar'),
 							items: [ Mojo.Menu.editItem,
@@ -187,8 +881,15 @@ var DatetimeAssistant = Class.create({
         
         
         this.dateTimeView = this.controller.get('datetime_view');
-        this.header = this.controller.get('edit_header');
+		this.duraBtn = 'edit_duration';
+		if(this.duraBtnOnTop === true){
+			this.duraBtn = "uber_dura_picker";
+			var headerParent = this.controller.get('edit_header').parentNode;
+			headerParent.innerHTML = '<div class="icon timedate"></div><div class="title" id="edit_header"></div><div style="float:right; margin-right:5px; margin-top: 13px;" id="uber_dura_picker">@</div>';
+        }
+		this.header = this.controller.get('edit_header');
         
+		
         this.blurStage = this.blurStageBound.bind(this);
         this.controller.listen(this.controller.document, Mojo.Event.deactivate, this.blurStage);
 		this.header.update(Mojo.View.render({template: 'datetime/header', object: this.targetEvent}));
@@ -202,29 +903,77 @@ var DatetimeAssistant = Class.create({
         this.startDateModel = {
             date: new Date(this.targetModifiedTime.start)
         };
+		this.uberEventDuration = (this.targetModifiedTime.end - this.targetModifiedTime.start)/(60*1000);
+
+	   // setup canvas
+		var startDiv = this.controller.get("start_date_row");
+        startDiv.style.paddingTop = "0px";
+        //startDiv.style.marginTop = "-40px";
+        startDiv.removeChild(startDiv.firstChild);
+        startDiv.innerHTML = '<table width="100%"><tr><td width="10%"><div x-mojo-element="Button" id="popCanvasBtn2" class="popCanvas"></div></td><td width="90%"><div class="datetime-picker"><div id="edit_startDate" x-mojo-element="DatePicker"></div></div></td></tr></table>';
+		
+		var startTimeDiv = this.controller.get("start_time_row");
+        startTimeDiv.style.paddingTop = "0px";
+        //startTimeDiv.style.marginTop = "-40px";
+        startTimeDiv.removeChild(startTimeDiv.firstChild);
+        startTimeDiv.innerHTML = '<table width="100%"><tr><td width="10%"><div x-mojo-element="Button" id="popTimezoneBtn2" class="popTimezone"></div></td><td width="90%"><div class="datetime-picker"><div id="edit_startTime" x-mojo-element="TimePicker"></div></div></td></tr></table>';
+
+        var endDiv = this.controller.get("end_date_row");
+        endDiv.style.paddingTop = "0px";
+        //endDiv.style.marginTop = "-40px";
+        endDiv.removeChild(endDiv.firstChild);
+        endDiv.innerHTML = '<table width="100%"><tr><td width="10%"><div x-mojo-element="Button" id="popCanvasBtn" class="popCanvas"></div></td><td width="90%"><div class="datetime-picker"><div id="edit_endDate" x-mojo-element="DatePicker"></div></div></td></tr></table>';
+		
+		var endTimeDiv = this.controller.get("end_time_row");
+        endTimeDiv.style.paddingTop = "0px";
+        //endTimeDiv.style.marginTop = "-40px";
+        endTimeDiv.removeChild(endTimeDiv.firstChild);
+        endTimeDiv.innerHTML = '<table width="100%"><tr><td width="10%"><div x-mojo-element="Button" id="popTimezoneBtn" class="popTimezone"></div></td><td width="90%"><div class="datetime-picker"><div id="edit_endTime" x-mojo-element="TimePicker"></div></div></td></tr></table>';
+
+		var startdatePalmListDiv = this.controller.get("start_date_row").parentNode;
+        var parentDiv = this.controller.get("datetime_view");
+        var newDiv = this.controller.document.createElement("div");
+        newDiv.setAttribute("id", "lDrawer");
+        newDiv.setAttribute("x-mojo-element", "Drawer");
+        newDiv.setAttribute("class", "drawerClass");
+        newDiv.setAttribute("name", "DPmonth_view");
+        newDiv.innerHTML = '<div id="DPscrol" x-mojo-element="Scroller"><div id="DPscrolct">' +
+				'<div id="DPmonth_0" class="DPmv">' +
+				'<canvas id="left0" width="240" height="220" left="0"></canvas>' +
+				'</div><div id="DPmonth_1" class="DPmv">' +
+				'<canvas id="left1" width="240" height="220"></canvas>' +
+				'</div><div id="DPmonth_2" class="DPmv">' +
+				'<canvas id="left2" width="240" height="220"></canvas>' +
+				'</div><div id="DPmonth_3" class="DPmv">' +
+				'<canvas id="right0" width="240" height="220"></canvas>' +
+				'</div><div id="DPmonth_4" class="DPmv">' +
+				'<canvas id="right1" width="240" height="220"></canvas>' +
+				'</div><div id="DPmonth_5" class="DPmv">' +
+				'<canvas id="right2" width="280" height="220"></canvas></div></div></div>';
+        parentDiv.insertBefore(newDiv, startdatePalmListDiv.nextSibling);
         
-		this.controller.setupWidget('edit_startDate',{label: $L('Date'),modelProperty:'date'}, this.startDateModel);
+		this.controller.setupWidget('edit_startDate',{label: ' ',modelProperty:'date'}, this.startDateModel);
         this.controller.listen('edit_startDate', Mojo.Event.propertyChange, this.startDateCallback.bindAsEventListener(this));
         
         this.endDateModel = {
             date: new Date(this.targetModifiedTime.end)
         };
 
-		this.controller.setupWidget('edit_endDate', {label: $L('Date'),modelProperty:'date'}, this.endDateModel);
+		this.controller.setupWidget('edit_endDate', {label: ' ',modelProperty:'date'}, this.endDateModel);
         this.controller.listen('edit_endDate', Mojo.Event.propertyChange, this.endDateCallback.bindAsEventListener(this));
         
         this.startTimeModel = {
             time: new Date(this.targetModifiedTime.start)
         };
     
-		this.controller.setupWidget('edit_startTime', {label: $L('Time'),modelProperty:'time'}, this.startTimeModel);
+		this.controller.setupWidget('edit_startTime', {label: ' ',modelProperty:'time', minuteInterval:this.uberMinuteInterval}, this.startTimeModel);
         this.controller.listen('edit_startTime', Mojo.Event.propertyChange, this.startTimeCallback.bindAsEventListener(this));
         
         this.endTimeModel = {
             time: new Date(this.targetModifiedTime.end)
         };
     
-		this.controller.setupWidget('edit_endTime', {label: $L('Time'), modelProperty:'time'}, this.endTimeModel);
+		this.controller.setupWidget('edit_endTime', {label: ' ', modelProperty:'time', minuteInterval:this.uberMinuteInterval}, this.endTimeModel);
         this.controller.listen('edit_endTime', Mojo.Event.propertyChange, this.endTimeCallback.bindAsEventListener(this));
         
         
@@ -241,8 +990,257 @@ var DatetimeAssistant = Class.create({
         this.controller.setupWidget('dtl_allday_cb', this.allDayCheckboxAttribute, this.allDayCheckboxModel);
         
         this.updateTimedAllDay(false);
-        
-        
+        if(!this.duraBtnOnTop) {
+			this.controller.get('edit_duration').setStyle({textDecoration:"underline", height: "30px", fontSize: "14"});
+		}
+        // button setup
+		/*this.controller.setupWidget("uber_dura_picker",
+			{},
+			{
+				label : '@',
+				disabled: false,
+				buttonClass: "secondary"
+			}
+		);*/
+		this.durationClickHandler = this.handleDurationClick.bindAsEventListener(this);
+		this.controller.get(this.duraBtn).observe('mojo-tap', this.durationClickHandler);
+		this.controller.get(this.duraBtn).observe('mojo-hold', this.durationClickHandler);
+		this.controller.setupWidget("popCanvasBtn",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		this.popCanvasBtn = this.controller.get('popCanvasBtn');
+		this.controller.setupWidget("popCanvasBtn2",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		this.canvasBtnHandler = this.DPtoggleDrawer.bind(this);
+		this.popCanvasBtn2 = this.controller.get('popCanvasBtn2');
+		
+		this.controller.setupWidget("popTimezoneBtn",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		this.popTimezoneBtn = this.controller.get('popTimezoneBtn');
+		this.controller.setupWidget("popTimezoneBtn2",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		this.timezoneBtnHandler = this.DPtimezonePop.bind(this);
+		this.popTimezoneBtn2 = this.controller.get('popTimezoneBtn2');
+		Mojo.Event.listen(this.popCanvasBtn, Mojo.Event.tap, this.canvasBtnHandler);
+		Mojo.Event.listen(this.popCanvasBtn2, Mojo.Event.tap, this.canvasBtnHandler);
+		Mojo.Event.listen(this.popTimezoneBtn, Mojo.Event.tap, this.timezoneBtnHandler);
+		Mojo.Event.listen(this.popTimezoneBtn2, Mojo.Event.tap, this.timezoneBtnHandler);
+		// drawer setup
+		this.controller.setupWidget("DPscrol",{mode: 'horizontal-snap'}, {snapElements: {x:[this.controller.get("DPmonth_0"), this.controller.get("DPmonth_1"), this.controller.get("DPmonth_2"), this.controller.get("DPmonth_3"), this.controller.get("DPmonth_4"), this.controller.get("DPmonth_5")]}});
+		this.dModel = {open:false};
+		this.controller.setupWidget('lDrawer', {property:'open', drawerBottomOffset: 50}, this.dModel);
+		this.ldrawer = this.controller.get('lDrawer');		
+		// setup month canvas context
+		this.redlineSplit = this.controller.get("DPmonth_2");
+		this.mthctx = [];
+		this.left0 = this.controller.get("left0");
+		this.mthctx[0] = this.left0.getContext('2d');
+		this.left1 = this.controller.get("left1");
+		this.mthctx[1] = this.left1.getContext('2d');
+		this.left2 = this.controller.get("left2");
+		this.mthctx[2] = this.left2.getContext('2d');
+		this.right0 = this.controller.get("right0");
+		this.mthctx[3] = this.right0.getContext('2d');
+		this.right1 = this.controller.get("right1");
+		this.mthctx[4] = this.right1.getContext('2d');
+		this.right2 = this.controller.get("right2");
+		this.mthctx[5] = this.right2.getContext('2d');
+		// setup vars
+		this.startOfWeek = this.prefsManager.getPrefs().startOfWeek;
+		this._rdNames = [];
+		this.RMlast = {};
+		this.RMlast.duration = {years: 0, months: 0, days: 0, hours: 0, minutes: 0};
+		this.RM = [];
+		this.topCor = "";
+		this.leftCor = "";
+		this.rtdayimg = new Image();
+		this.rtdayimg.src = "./images/week-current-day.png";
+		this.rmdoRec = false;
+		this.rdayNames();
+		this.rmEval();
+		this.orderRM(this.RMlast.stD, this.RMlast.eD, this.targetEvent.allDay);
+		this.stImg = new Image();
+		this.stImg.src = "./images/day-allday-event-green-center.png";
+		this.eImg = new Image();
+		this.eImg.src = "./images/day-allday-event-red-center.png";
+		this.dImg = new Image();
+		this.dImg.src = "./images/day-event-green.png";
+		this.rImg = new Image();
+		this.rImg.src = "./images/day-event-yellow.png";
+		this.rmScroller = this.controller.get('DPscrol');
+		this.rmlastBtn = null;
+		this.tzlastBtn = null;
+		this.convertedTS = null;
+		this.rtDate = new Date();
+		this.rmcalHold = false;
+		var uberYear = new Date(this.targetModifiedTime.start).getFullYear();
+		var timezones = this.tzMgr.timezones;
+		this.uberTZIds = [];
+		if(timezones && timezones[uberYear]) {
+			var obj = timezones[uberYear];
+			this.uberTzIds = Object.values(obj);
+		}
+    },
+    
+	// toggle drawer function:
+	DPtoggleDrawer: function(e) {
+		var curBtn = e.currentTarget.id;
+		if(curBtn == "popCanvasBtn2") {
+			this.rmScrollTo(this.RMlast.stD);
+		} else {
+			this.rmScrollTo(this.RMlast.eD);
+		}
+		if (curBtn == this.rmlastBtn)  {
+			this.ldrawer.mojo.setOpenState(false);
+			this.rmlastBtn = null;
+			if(!this.targetEvent.allDay) {
+				this.slideDown(this.controller.get('start_time_row'), 0.4);		
+				this.slideDown(this.controller.get('end_time_row'), 0.4);
+			}
+		} else {
+			this.rmlastBtn = curBtn;
+			var state = this.ldrawer.mojo.getOpenState();
+			if(!state) {
+			
+				this.ldrawer.mojo.setOpenState(true);
+				if(!this.targetEvent.allDay) {
+					this.slideUp(this.controller.get('start_time_row'), 0.4);
+					this.slideUp(this.controller.get('end_time_row'), 0.4);
+				}
+			}
+		}
+	},	
+	
+	DPtimezonePop: function(e) {
+		this.tzlastBtn = e.currentTarget.id && e.currentTarget.id;
+		//Mojo.Log.error("Pop timezone converter  :" + e.currentTarget.id);
+		var tz = this.targetEvent.tzId || this.app.getTimezoneName();
+		if(this.tzlastBtn != null && this.tzlastBtn == "popTimezoneBtn2") {
+			// start date
+			var dateStamp = new Date(this.startDateModel.date);
+			var timeStamp = new Date(this.startTimeModel.time);
+			timeStamp.setFullYear(dateStamp.getFullYear());
+			timeStamp.setMonth(dateStamp.getMonth());
+			timeStamp.setDate(dateStamp.getDate());
+		} else if(this.tzlastBtn !== null && this.tzlastBtn == "popTimezoneBtn") {
+			// end date
+			var dateStamp = new Date(this.endDateModel.date);
+			var timeStamp = new Date(this.endTimeModel.time);
+			timeStamp.setFullYear(dateStamp.getFullYear());
+			timeStamp.setMonth(dateStamp.getMonth());
+			timeStamp.setDate(dateStamp.getDate());
+		}
+		if(this.tzlastBtn !== null && timeStamp && tz && this.uberTzIds && this.uberTzIds.length > 0){
+			this.controller.showDialog({
+            template: 'shared/uber-timezone',
+            assistant: new UberTimezoneConverter(this.controller, this, tz, timeStamp.getTime(), this.uberTzIds.clone()),
+			});
+		}
+	},
+	
+	uberConverterCallBack: function(){
+		if(!this.convertedTS || this.tzlastBtn == null){
+			return;
+		}
+		if(this.tzlastBtn != null && this.tzlastBtn == "popTimezoneBtn2") {
+			// start date
+			var oldDura = this.targetModifiedTime.end - this.targetModifiedTime.start;
+			var cDate = new Date(this.convertedTS);
+			var oldDate = new Date(this.startDateModel.date);
+			if(cDate.getFullYear() === oldDate.getFullYear() && cDate.getMonth() === oldDate.getMonth() && cDate.getDate() === oldDate.getDate() ) {
+				if((this.convertedTS < oldDate.getTime()) || ((this.convertedTS > oldDate.getTime()) && this.convertedTS - oldDate.getTime() < oldDura)){this.targetModifiedTime.start = this.convertedTS;}
+				this.startTimeModel.time = new Date(cDate);
+				this.controller.modelChanged(this.startTimeModel);
+				Mojo.Event.send(this.controller.get('edit_startTime'), 'mojo-property-change', {value: this.startTimeModel.time} );
+			} else { //leave targetModifiedTime "date" alone until after time switch
+				var newDate = new Date(this.targetModifiedTime.start); 
+				newDate.setHours(cDate.getHours());
+				newDate.setMinutes(cDate.getMinutes());
+				if((this.convertedTS < oldDate.getTime()) || ((this.convertedTS > oldDate.getTime()) && this.convertedTS- oldDate.getTime() < oldDura)){this.targetModifiedTime.start = newDate.getTime();}
+				this.startTimeModel.time = new Date(newDate);
+				this.controller.modelChanged(this.startTimeModel);
+				Mojo.Event.send(this.controller.get('edit_startTime'), 'mojo-property-change', {value: this.startTimeModel.time} );
+				if((this.convertedTS < oldDate.getTime()) || ((this.convertedTS > oldDate.getTime()) && this.convertedTS - oldDate.getTime() < oldDura)){
+					this.targetModifiedTime.start = this.convertedTS;
+					this.changingStartDate = true;
+				}
+				this.startDateModel.date = new Date(cDate);
+				this.controller.modelChanged(this.startDateModel);
+				Mojo.Event.send(this.controller.get('edit_startDate'), 'mojo-property-change', {value: this.startDateModel.date} );
+				if(this.changingStartDate){this.changingStartDate = false;}
+			}
+			this.calcDuration();
+		} else if(this.tzlastBtn !== null && this.tzlastBtn == "popTimezoneBtn") {
+			// end date
+			var cDate = new Date(this.convertedTS);
+			var oldDate = new Date(this.endDateModel.date);
+			if(cDate.getFullYear() === oldDate.getFullYear() && cDate.getMonth() === oldDate.getMonth() && cDate.getDate() === oldDate.getDate() ) {
+				this.targetModifiedTime.end = cDate.getTime();
+				this.endTimeModel.time = new Date(cDate);
+				this.controller.modelChanged(this.endTimeModel);
+				Mojo.Event.send(this.controller.get('edit_endTime'), 'mojo-property-change', {value: this.endTimeModel.time} );
+			} else { //change time then day
+				//leave targetModifiedTime "date" alone until after time switch
+				var newDate = new Date(this.targetModifiedTime.end); 
+				newDate.setHours(cDate.getHours());
+				newDate.setMinutes(cDate.getMinutes());
+				this.targetModifiedTime.end = newDate.getTime();
+				this.endTimeModel.time = new Date(newDate);
+				this.controller.modelChanged(this.endTimeModel);
+				this.dateTimeoutID = 0;
+				//Mojo.Event.send(this.controller.get('edit_endTime'), 'mojo-property-change', {value: this.endTimeModel.time} );
+				this.targetModifiedTime.end = cDate.getTime();
+				this.endDateModel.date = new Date(this.targetModifiedTime.end);
+				this.controller.modelChanged(this.endDateModel);
+				Mojo.Event.send(this.controller.get('edit_endDate'), 'mojo-property-change', {value: this.endDateModel.date} );
+				this.targetModifiedTime.changed = true;
+			}
+		}
+	},
+	
+	rmScrollTo: function(x) {
+		if (x instanceof Date == true) { 
+			var whatMn = x.getMonth();
+			var whatYr = x.getFullYear();
+			var idx = this.risRendered(whatYr, whatMn);
+		} else if(x >= 0 && x <= 6) {
+			var idx = x;
+		}
+		this.controller.get('DPscrol').mojo.setSnapIndex(idx, true);
+	},
+	
+	rmHandleUpdate: function() {
+		// date picker model changed do redraw
+		for(var i = 0;i<6; i++) {
+			this.mthctx[i].clearRect(0, 0, 240,220);
+		}
+		this.rmEval();
+		this.orderRM(this.RMlast.stD, this.RMlast.eD, this.targetEvent.allDay);
+		this.markDay(new Date(), this.rtdayimg);
+		this.markDay(this.RMlast.stD, this.stImg , null/*color*/, 1/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		this.markDay(this.RMlast.eD, this.eImg , null/*color*/, this.colHW-2/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		this.rmMarkD();
+		if(this.rmdoRec) {this.rmRecur(); }
+		this.rmScrollTo(this.RMlast.stD);
     },
     
     checkTargetEventDirty: function(){
@@ -448,6 +1446,7 @@ var DatetimeAssistant = Class.create({
 			//If the event already existed, and we don't have a parent event, 
 			//then we are either a single event, or this is the parent event 
 			//and we're changing the whole series.
+			//Mojo.Log.error(" datetime saveEvent :   " + (this.targetEvent._id ? "updateEvent " : "createEvent ") + JSON.stringify(this.targetEvent));
 			if(this.targetEvent._id){
 				this.db.updateEventDeleteChildren
 				(	this.targetEvent
@@ -480,6 +1479,53 @@ var DatetimeAssistant = Class.create({
         }
     },
 	
+	saveThisAndFuture: function() {
+		// change end date, add exception, new event
+		if(this.targetEvent.dtstart === this.unchangedtargetModified.start) {
+			//this is the first event so, this and future is the whole series
+			this.saveEvent(undefined);
+			return;
+		}
+		this.newEvent = JSON.parse(JSON.stringify(this.targetEvent));
+		this.targetEvent.rrule.until = (new Date(this.targetModifiedTime.end)).addDays(-1).getTime();
+		this.targetEvent.isRecurringForever = false;
+		if(this.targetEvent.rrule.count) {this.targetEvent.rrule.count = undefined;}
+		//this.app.getRecurrenceRule().addException(this.targetEvent, new Date(this.unchangedtargetModified.start));
+		var eventToUpdate = JSON.parse(JSON.stringify(this.targetEvent));
+		
+		this.db ["updateEvent"]
+				(	eventToUpdate
+				,	this.ThisAndFutureCB.bind(this)
+				,	function(response){Mojo.Log.error("failed this and future" + response.errorText)}
+		);
+	},
+	
+	ThisAndFutureCB: function () {
+		delete this.newEvent._id;
+		this.newEvent._rev = undefined;
+		this.newEvent.parentId = undefined;
+		this.newEvent.id = undefined;
+		this.newEvent.remoteId = undefined;
+		this.newEvent.dtstart = this.targetModifiedTime.start;
+		this.newEvent.dtend = this.targetModifiedTime.end;
+		var eventToUpdate = JSON.parse(JSON.stringify(this.newEvent));
+		this.db ["createEvent"]
+				(	eventToUpdate
+				,	this.createdEvent.bind(this)
+				,	function(response){Mojo.Log.error("failed this and future" + response.errorText)}
+		);
+	},
+	
+	createdEvent: function(response) {
+		if((response.results[0].id && response.results[0].rev) || (response.results[0]._id && response.results[0]._rev)) {
+			this.newEvent._id = response.results[0].id || response.results[0]._id;
+			this.newEvent._rev = response.results[0].rev ||  response.results[0]._rev;
+			this.newEvent.dirty = false;
+		}
+		this.targetCallBack(this.newEvent, JSON.parse(JSON.stringify(this.newEvent)));
+		this.controller.stageController.popScene("datetime");
+	},
+	
     renderSetEvent: function(response){
         //this callback is called only in the case
         //when we are in the scene and went into cardmode
@@ -495,12 +1541,12 @@ var DatetimeAssistant = Class.create({
 		var rev;
 		//if we're coming from a batch
 		if (response.responses) {
-			eventId = response.responses[1].results[0].id;
-			rev = response.responses[1].results[0].rev;
+			eventId = response.responses[1].results[0].id || response.responses[1].results[0]._id;
+			rev = response.responses[1].results[0].rev || response.responses[1].results[0]._rev;
 		}
 		else {
-			eventId = response.results[0].id;
-			rev = response.results[0].rev;
+			eventId = response.results[0].id ||  response.results[0]._id;
+			rev = response.results[0].rev || response.results[0]._rev;
 		}
 		
 		this.targetEvent._rev	= rev;
@@ -512,11 +1558,50 @@ var DatetimeAssistant = Class.create({
     },
 
     activate: function(){
+		this.markDay(new Date(), this.rtdayimg);
+		this.markDay(this.RMlast.stD, this.stImg , null/*color*/,0/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		this.markDay(this.RMlast.eD, this.eImg , null/*color*/, this.colHW-2/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		this.rmMarkD();
+		if(this.rmdoRec) {this.rmRecur(); }
+		this.rmScrollTo(this.RMlast.stD);
+		//tap handlers
+		this.calTapHandler = this.handleCalTap.bind(this);
+		this.calHoldHandler = this.handleCalHold.bind(this);
+		Mojo.Event.listen(this.left0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.left1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.left2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.right0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.right1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.right2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.left0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.left1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.left2, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.right0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.right1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.right2, Mojo.Event.hold, this.calHoldHandler);
     },
     
     deactivate: function(){
-        //Mojo.Log.info("datetime-assistant:deactivate");	
+		Mojo.Event.stopListening(this.popCanvasBtn, Mojo.Event.tap, this.canvasBtnHandler);
+		Mojo.Event.stopListening(this.popCanvasBtn2, Mojo.Event.tap, this.canvasBtnHandler);
+        Mojo.Event.stopListening(this.popTimezoneBtn, Mojo.Event.tap, this.timezoneBtnHandler);
+		Mojo.Event.stopListening(this.popTimezoneBtn2, Mojo.Event.tap, this.timezoneBtnHandler);
+        this.controller.get(this.duraBtn).stopObserving('mojo-tap', this.durationClickHandler);
+		this.controller.get(this.duraBtn).stopObserving('mojo-hold', this.durationClickHandler);
+		//Mojo.Log.info("datetime-assistant:deactivate");	
         this.controller.stopListening(this.controller.document, Mojo.Event.deactivate, this.blurStage);
+		Mojo.Event.stopListening(this.left0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.left1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.left2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.right0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.right1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.right2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.left0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.left1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.left2, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.right0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.right1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.right2, Mojo.Event.hold, this.calHoldHandler);
     },
 
 
@@ -629,12 +1714,35 @@ var DatetimeAssistant = Class.create({
                 
             case 'MONTHLY': // Do NOT Localize
                 //Monthly by date
-				
-                if (byMonthDayRuleIndex != -1) {
-					rrule.rules[byMonthDayRuleIndex].ruleValue = [{"ord": newDate.getDate()}];
-                }
-                else {
-                    var nth = Utilities.getDOWCount(this.targetEvent.dtstart);
+				if(oldDate.getDate() === newDate.getDate() && oldDate.getMonth() === newDate.getMonth() && oldDate.getFullYear() === newDate.getFullYear()) {
+					return; // no reason to change - just changed time
+				}
+				if (byMonthDayRuleIndex != -1) {
+					var oldByDay = parseInt(rrule.rules[byMonthDayRuleIndex].ruleValue.ord, 10);
+					if(oldByDay && oldByDay < 0) { // old rule was last
+						//test if going to last day
+						var isLast = this.getIsLastProps(newDate.getTime());
+						if(isLast && isLast.lastweek && isLast.lastday != undefined) {
+							rrule.rules[byMonthDayRuleIndex].ruleValue = [{"ord": isLast.lastday}];
+						} else { // not in last week
+							rrule.rules[byMonthDayRuleIndex].ruleValue = [{"ord": newDate.getDate()}];
+						}
+					} else { //was not from last
+						rrule.rules[byMonthDayRuleIndex].ruleValue = [{"ord": newDate.getDate()}];
+					}
+				} else { // was by Day of Week
+					var oldByDay = parseInt(rule.rules[byDayRuleIndex].ruleValue.ord, 10);
+					if(oldByDay && oldByDay < 0) { //was last week
+						//test if going to last week
+						var isLast = this.getIsLastProps(newDate.getTime());
+						if(isLast && isLast.lastweek) { // is in last week
+							var nth = "-1";
+						} else { // not in last week
+							var nth = Utilities.getDOWCount(this.targetEvent.dtstart);
+						}
+					} else { // was not last week
+						var nth = Utilities.getDOWCount(this.targetEvent.dtstart);
+					}
                     rrule.rules[byDayRuleIndex].ruleValue = [{"ord": nth, "day": newDate.getDay()}];
                 }
                 break;
@@ -684,6 +1792,7 @@ var DatetimeAssistant = Class.create({
             this.targetEvent.alldayReserveddtstart = this.targetModifiedTime.start;
             this.targetEvent.alldayReserveddtstart = this.targetModifiedTime.end;
         }
+		this.rmHandleUpdate();
     },
     
     endDateSet: function(isOnBack){
@@ -775,6 +1884,7 @@ var DatetimeAssistant = Class.create({
             
             if (isOnBack === false) {
 				this.calcDuration();
+				this.rmHandleUpdate();
 			}
             this.targetModifiedTime.changed = true;
             if (this.datetimeoutID) {
@@ -884,6 +1994,7 @@ var DatetimeAssistant = Class.create({
         this.controller.modelChanged(this.startTimeModel);
         this.controller.modelChanged(this.endTimeModel);
         this.targetModifiedTime.changed = false;
+		this.rmHandleUpdate();
 		this.calcDuration();
         //Mojo.Log.info("Old event all day %o, new Event all day %o",this.oldEvent.allDay,this.allDayCheckboxModel);
         if (this.oldEvent.allDay != this.allDayCheckboxModel.value) {
@@ -894,6 +2005,216 @@ var DatetimeAssistant = Class.create({
         }
         this.targetCallBack(this.targetEvent, null);
         
-    }
+    },
+	
+	eventDurationChoose: function(value){
+		if (value !== undefined && value != this.uberEventDuration) {
+			if(this.duraOnEnd){
+				var startTS = this.targetModifiedTime.start;
+				var eDate = new Date(startTS + value*60*1000);
+				//first time
+				this.targetModifiedTime.end = eDate.getTime();
+				this.endTimeModel.time = new Date(eDate);
+				this.controller.modelChanged(this.endTimeModel);
+				this.dateTimeoutID = 0;
+				//now date
+				this.targetModifiedTime.end = eDate.getTime();
+				this.endDateModel.date = new Date(this.targetModifiedTime.end);
+				this.controller.modelChanged(this.endDateModel);
+				Mojo.Event.send(this.controller.get('edit_endDate'), 'mojo-property-change', {value: this.endDateModel.date} );
+				this.targetModifiedTime.changed = true;
+				this.uberEventDuration = value;
+			} else {
+				var oldDura = this.targetModifiedTime.end - this.targetModifiedTime.start;
+				var oldDate = new Date(this.startDateModel.date);
+				var endTS = this.targetModifiedTime.end;
+				var startTS = endTS - value*60*1000;
+				var sDate = new Date(endTS - value*60*1000);
+				if(sDate.getFullYear() === oldDate.getFullYear() && sDate.getMonth() === oldDate.getMonth() && sDate.getDate() === oldDate.getDate() ) {
+					if((startTS < oldDate.getTime()) || ((startTS > oldDate.getTime()) && startTS - oldDate.getTime() < oldDura)){this.targetModifiedTime.start = startTS;}
+					this.startTimeModel.time = new Date(sDate);
+					this.targetModifiedTime.start = startTS;
+					this.controller.modelChanged(this.startTimeModel);
+					Mojo.Event.send(this.controller.get('edit_startTime'), 'mojo-property-change', {value: this.startTimeModel.time} );
+				}else { //leave targetModifiedTime "date" alone until after time switch
+					var newDate = new Date(this.targetModifiedTime.start); 
+					newDate.setHours(sDate.getHours());
+					newDate.setMinutes(sDate.getMinutes());
+					if((startTS < oldDate.getTime()) || ((startTS > oldDate.getTime()) && startTS - oldDate.getTime() < oldDura)){this.targetModifiedTime.start = newDate.getTime();}
+					this.startTimeModel.time = new Date(newDate);
+					this.controller.modelChanged(this.startTimeModel);
+					Mojo.Event.send(this.controller.get('edit_startTime'), 'mojo-property-change', {value: this.startTimeModel.time} );
+					if((startTS < oldDate.getTime()) || ((startTS > oldDate.getTime()) && startTS - oldDate.getTime() < oldDura)){
+						this.targetModifiedTime.start = startTS;
+						this.changingStartDate = true;
+					}
+					this.startDateModel.date = new Date(sDate);
+					this.controller.modelChanged(this.startDateModel);
+					Mojo.Event.send(this.controller.get('edit_startDate'), 'mojo-property-change', {value: this.startDateModel.date} );
+					if(this.changingStartDate){this.changingStartDate = false;}
+				}
+				this.uberEventDuration = value;
+				this.calcDuration();
+			}
+		}
+	},
+	
+	handleDurationClick: function(event){
+		//console.error("event down altKey" + JSON.stringify((event && event.type)));
+		var items = [];
+		if(event && event.type && event.type === 'mojo-tap'){
+			this.duraOnEnd = true;
+		} else {
+			this.duraOnEnd = false;
+		}
+		Event.stop(event);
+		var hrs, mins;
+		var prefs = this.prefsManager.getPrefs();
+		var startTime = new Date(prefs.startTimeOfDay);
+		startTime.addMinutes(startTime.getTimezoneOffset());
+		var utcStartTime = startTime.getTime();
+		var startDate = new Date(utcStartTime);
+		hrs = startDate.getHours();
+		mins = startDate.getMinutes();
+		startDate.setTime(this.targetModifiedTime.start);
+		startDate.clearTime();
+		startDate.setHours(hrs);
+		startDate.setMinutes(mins);
+		var startTS =startDate.getTime(); 
+		var endTime = new Date(prefs.endTimeOfDay);
+		endTime.addMinutes(endTime.getTimezoneOffset());
+		var utcEndTime = endTime.getTime();
+		var endDate = new Date(utcEndTime);
+		hrs = endDate.getHours();
+		mins = endDate.getMinutes();
+		endDate.setTime(this.targetModifiedTime.end);
+		endDate.clearTime();
+		endDate.setHours(hrs);
+		endDate.setMinutes(mins);
+		var endTS = endDate.getTime();
+		items = [{
+					label: $L("15 minutes"),
+					command: 15
+				},{
+					label: $L("30 minutes"),
+					command: 30
+				},{
+					label: $L("45 minutes"),
+					command: 45
+				}, {
+					label: $L("1 hour"),
+					command: 60
+				}, {
+				label: $L("90 minutes"),
+					command: 90
+				}, {
+					label: $L("2 hours"),
+					command: 120
+				}, {
+					label: $L("3 hours"),
+					command: 180
+				}, {
+					label: $L("4 hours"),
+					command: 240
+				}, {
+					label: $L("8 hours"),
+					command: 480
+				}];
+		if(this.duraOnEnd){
+			var cmd = (endTS - this.targetModifiedTime.start)/(60*1000);
+			//console.error("cmd end : " + cmd);
+			items.push({label: $L("Until end of day"), command: cmd});
+		} else {
+			var cmd = (this.targetModifiedTime.end - startTS)/(60*1000);
+			//console.error("cmd start : " + cmd);
+			items.push({label: $L("From start of day"), command: cmd});
+		}
+		
+		this.controller.popupSubmenu({
+				onChoose: this.eventDurationChoose.bind(this),
+				toggleCmd: this.uberEventDuration,
+				items: items
+			});
+	},
+	
+	//Calendar Tap Handlers
+	handleCalHold: function(event) {
+		// set the hold var, send to tap handler
+		this.rmcalHold = true;
+		this.handleCalTap(event);
+	},
+	
+	handleCalTap: function(event) {
+		Event.stop(event);
+		var x = event.down.offsetX;
+		var y = event.down.offsetY;
+		//get rid of tap areas not in calendar day area
+		if(x <= 30 || y <= 40 || x>= 241) {
+			this.rmcalHold = false;
+			return;
+		}
+		var rmcan = event.target.id;
+		switch (rmcan) {
+			case 'left0':
+				var rmindex = 0;
+				break;
+			case 'left1':
+				var rmindex = 1;
+				break;
+			case 'left2':
+				var rmindex = 2;
+				break;
+			case 'right0':
+				var rmindex = 3;
+				break;
+			case 'right1':
+				var rmindex = 4;
+				break;
+			case 'right2':
+				var rmindex = 5;
+				break;
+		}
+		// get first day index month year
+		if (x && y && (rmindex !== undefined)) {
+			var calx = x - 30;
+			var caly = y - 40;
+			var cald1idx = this.RM[rmindex].fstDayLidx;
+			var calcol = Math.floor(calx/this.colHW);
+			var calrow = Math.floor(caly/this.colHW);
+			var caldate = ((calrow * 7) + calcol +1) - cald1idx;
+			if((caldate > this.RM[rmindex].maxdays) || (caldate <= 0)) {
+				// tapped an area with invalid date
+				this.rmcalHold = false;
+				return;
+			}
+			var calmon = this.RM[rmindex].month;
+			var calyear = this.RM[rmindex].year;
+			if((calyear !== undefined) && (calmon !== undefined) && (caldate !== undefined)) {
+				if(this.rmlastBtn != null && this.rmlastBtn == "popCanvasBtn2") {
+					// start date
+					this.startDateModel.date = new Date(calyear, calmon, caldate);
+					this.controller.modelChanged(this.startDateModel);
+					Mojo.Event.send(this.controller.get('edit_startDate'), 'mojo-property-change', {value: this.startDateModel.date} )
+				} else if(this.rmlastBtn !== null && this.rmlastBtn == "popCanvasBtn") {
+					// end date
+					this.endDateModel.date = new Date(calyear, calmon, caldate);
+					this.controller.modelChanged(this.endDateModel);
+					Mojo.Event.send(this.controller.get('edit_endDate'), 'mojo-property-change', {value: this.endDateModel.date} )
+				}
+				// check whether drawer should close
+				if(this.rmcalHold == false) {
+					this.ldrawer.mojo.setOpenState(false);
+					this.rmlastBtn = null;
+					if(!this.targetEvent.allDay) {
+						this.slideDown(this.controller.get('start_time_row'), 0.4);		
+						this.slideDown(this.controller.get('end_time_row'), 0.4);
+					}
+				} else {
+					this.rmcalHold = false;
+					return;
+				}
+			}
+		}
+	}
 
 });
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/day-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/day-assistant.js
index c7127f8..657be02 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/day-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/day-assistant.js
@@ -20,16 +20,135 @@ var DayAssistant = Class.create({
 		this.appMenuModel = { visible:true, 
 								label:$L('Calendar'), 
 								items: [ Mojo.Menu.editItem,
-										{label:$L('New'), items: [{label:$L('Event'), command:'newtimed', disabled:false},
-																	{label:$L('All day event'), command:'newallday', disabled:false}] 
+										{label:$L('New'), items: [{label:$L('Event'), shortcut:'n', command:'newtimed', disabled:false},
+																	{label:$L('All day event'), shortcut:'d', command:'newallday', disabled:false}] 
 										},											
 										{label:$L('Sync Now'), command:'sync', id: 2},
 										{label:$L('Show today'), command:'today', id: 3},
-										{label:$L('Jump to...'), command:'jumpto', id: 4},
+										{label:$L('Jump to...')+ '/' + $L("Templates"), command:'jumpto', id: 4},
 										{label:$L('Missed reminders...'), command:'reminders', id: 5},
 										{label:$L('Preferences & Accounts'), command:Mojo.Menu.prefsCmd, disabled: false},
 										{label:$L('Help'), command:Mojo.Menu.helpCmd, disabled:false}]
 							};
+							
+		this.uberCategories = [
+				{'name': 'birthday'}, // Do NOT Localize these
+				{'name': 'car'},
+				{'name': 'doctor'},
+				{'name': 'holiday'},
+				{'name': 'kids'},
+				{'name': 'party'},
+				{'name': 'plane'},
+				{'name': 'vacation'},
+			];
+		
+		this.compressedView = false;
+		this.enhancedView = false;
+		this.dayViewShrink = "none";
+		this.dayViewIcons = true;
+		this.uberBackGesture = 'last';
+		this.weekNumOffset = 0;
+		this.useISOweekNum = false;
+		this.prefStartDoW = 0;
+		this.weekModulusNum = 1;
+		this.weekNumberTitle = true;
+		this.ucGroupsFirst = false;
+		this.dayMinutePopup = false;
+		this.dayMinInterval = 15;
+		this.useAgendaZ = false;
+		this.dayCookie = new Mojo.Model.Cookie('DayEnhanced');
+		if (this.dayCookie !== undefined) {
+			var daycookie = this.dayCookie.get();
+			if(daycookie !== undefined) {
+				if(daycookie.dayviewcompressed !== undefined) {
+					this.compressedView = daycookie.dayviewcompressed;
+				} else {
+					this.compressedView = false;
+				}
+				if(daycookie.dayviewenhanced !== undefined) {
+					this.enhancedView = daycookie.dayviewenhanced;
+				} else {
+					this.enhancedView = false;
+				}
+				if(daycookie.dayviewshrink !== undefined) {
+					this.dayViewShrink = daycookie.dayviewshrink;
+				} else {
+					this.dayViewShrink = "none";
+				}
+				if(daycookie.dayviewicons !== undefined) {
+					this.dayViewIcons = daycookie.dayviewicons;
+				} else {
+					this.dayViewIcons = true;
+				}
+				if(daycookie.weeknumoffset !== undefined) {
+					this.weekNumOffset = parseInt(daycookie.weeknumoffset,10);
+				} else {
+					this.weekNumOffset = 0;
+				}
+				if(daycookie.weekmodulusnum !== undefined) {
+					this.weekModulusNum = parseInt(daycookie.weekmodulusnum, 10);
+				} else {
+					this.weekModulusNum = 1;
+				}
+				if(daycookie.weeknumbertitle !== undefined) {
+						this.weekNumberTitle = daycookie.weeknumbertitle;
+				} else {
+						this.weekNumberTitle = true;
+				}
+				if(daycookie.uberbackgesture !== undefined) {
+						this.uberBackGesture = daycookie.uberbackgesture;
+				} else {
+						this.uberBackGesture = 'last';
+				}
+				if (daycookie.useisoweeknum !== undefined) {
+					this.useISOweekNum = daycookie.useisoweeknum;
+				} else {
+					this.useISOweekNum = false;
+				}
+				if (daycookie.prefsstartofweek !== undefined) {
+					this.prefStartDoW = parseInt(daycookie.prefsstartofweek, 10) -1;
+				} else {
+					this.prefStartDoW = 0;
+				}
+				if (daycookie.ucgroupsfirst !== undefined) {
+					this.ucGroupsFirst = daycookie.ucgroupsfirst;
+				} else {
+					this.ucGroupsFirst = false;
+				}
+				if (daycookie.useagendaz !== undefined) {
+					this.useAgendaZ = daycookie.useagendaz;
+				} else {
+					this.useAgendaZ = false;
+				}
+				if(daycookie.dayminutepopup !== undefined) {
+						this.dayMinutePopup = daycookie.dayminutepopup;
+				} else {
+						this.dayMinutePopup = false;
+				}
+				if(daycookie.daymininterval !== undefined) {
+						this.dayMinInterval = parseInt(daycookie.daymininterval, 10);
+				} else {
+						this.dayMinInterval = 15;
+				}
+			}
+		}
+		this.userUberCats = [];
+		this.catCookie = new Mojo.Model.Cookie("userUberCats");
+		if(this.catCookie) {
+			var catcookie = this.catCookie.get();
+			if(catcookie) {
+				if(catcookie.userubercats && catcookie.userubercats.length > 0){
+					this.userUberCats = catcookie.userubercats;
+				} else {
+					this.userUberCats = this.uberCategories;
+				}
+			} else {
+				this.userUberCats = this.uberCategories;
+			}
+		} else {
+				this.userUberCats = this.uberCategories;
+		}
+		
 		this.colors = {
 				'cal-color-blue':   {background: 'rgb(145, 211, 234)', border: 'rgb(99, 165, 188)',	text: 'rgb(5, 32, 41)'},
 				'cal-color-green':  {background: 'rgb(140, 240, 140)', border: 'rgb(77, 206, 77)',  text: 'rgb(1, 52, 1)'},
@@ -47,7 +166,7 @@ var DayAssistant = Class.create({
 		this.app				= getAppAssistant();
 		this.busyFreeManager	= new BusyFreeManager();
 		this.calendarsManager	= this.app.getCalendarsManager();
-		this.eventManager		= new Calendar.EventManager();
+		this.eventManager		= this.app.getEventManager();
 		this.layoutManager		= new LayoutManager();
 		this.prefsManager		= this.app.getPrefsManager();
 		this.formatter			= this.app.getFormatterService();
@@ -60,14 +179,29 @@ var DayAssistant = Class.create({
 		this.pendingCalendarSettingsUpdate = false;
 		//this.pendingOpenScratchEventInDetails = false;
 		this.snapEffectCount = 0;
+		this.imgAlarm = new Image();
+		this.imgAlarm.src = "/media/internal/.scrims/ubercalendar/alarm-icon.png";
+		this.imgIcons = new Object();
+		
+		if(this.enhancedView && this.dayViewShrink == "strong") {
+			this.hourHeight = 16;
+			this.halfHourHeight = Math.round(this.hourHeight / 2);
+			this.fifteenMinuteHeight = Math.round(this.hourHeight / 4);
+		} else if(this.enhancedView && this.dayViewShrink == "medium") {
+			this.hourHeight = 24;
+			this.halfHourHeight = Math.round(this.hourHeight / 2);
+			this.fifteenMinuteHeight = Math.round(this.hourHeight / 4);
+		} else {
 		this.hourHeight = 48;
 		this.halfHourHeight = 24;
 		this.fifteenMinuteHeight = 12;
+		}
+		
 		this.totalWidth = 320;
 		this.totalHeight = this.hourHeight * 24;
 		// To make sure that the 11pm timeline can be scrolled above the command menu buttons, add an extra timeline
 		// at the bottom
-		this.totalHeight += this.hourHeight;
+		this.totalHeight += 48;
 
 		this.onHorizontalScroll	= this.onHorizontalScroll	.bind (this);
 		this.onResize			= this.onResize				.bind (this);
@@ -196,6 +330,29 @@ var DayAssistant = Class.create({
 		this.hideFastScrollView();
 	},
 
+	
+	getUCGroupsProps: function() {
+		// check for UC groups
+		if(this.uberGroups && this.uberGroups.inUse === true && this.userUberCalGroups && this.userUberCalGroups.length > 0 && this.userUberCalGroups[0].rId !== undefined) {
+			var rID = this.uberGroups.rId;
+			if(rID) {
+				var len = this.userUberCalGroups.length;
+				var idx;
+				for(var i=0; i < len; i++){
+					if(rID === this.userUberCalGroups[i].rId) {
+						var idx = i;
+						break;
+					}
+				}
+				if(idx !== undefined && this.userUberCalGroups[idx].includes && this.userUberCalGroups[idx].includes.length >0) {
+					this.ucGroupIdx = idx;
+				}
+			}
+		} else {
+			this.ucGroupIdx = undefined;
+		}
+	},
+	
 	isDayDisplayed: function(day) {
 		if (this.listeningToScroller) {
 			return 0;
@@ -241,6 +398,9 @@ var DayAssistant = Class.create({
 		
 	buildDayTitle: function(doScrim) {
 		var today = Date.today().clearTime();
+		var year = new Date(this.dayDate).getFullYear();
+		var month = new Date(this.dayDate).getMonth();
+		var maxwkn = this.useISOweekNum === true ? new Date((month != 0 ? year : year -1), 11, 28).getISO8601Week() : new Date((month != 0 ? year : year -1), 11, 28).getWeekOfYear(this.prefStartDoW);
 		var dayDateNoTime = new Date(this.dayDate).clearTime();
 		var formatObj = {};
 		
@@ -248,20 +408,47 @@ var DayAssistant = Class.create({
         formatObj.date = "medium";
         formatObj.weekday = "medium";
         formatObj.dateComponents = "md";
+		var weekNumber = this.useISOweekNum === true ? new Date(this.dayDate).getISO8601Week() : new Date(this.dayDate).getWeekOfYear(this.prefStartDoW);
+		maxwkn = maxwkn == 0 ? 53 : maxwkn;
+		weekNumber = weekNumber == 0 ? maxwkn : weekNumber;
+		if(this.weekNumOffset !== undefined && this.weekNumOffset !=0) {
+			var wkNum = parseInt(weekNumber,10) + this.weekNumOffset;
+			weekNumber = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			weekNumber = weekNumber < 10 ? '0' + weekNumber : weekNumber;
+		}
+		if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+			modNumber = (parseInt(weekNumber, 10) % this.weekModulusNum);
+			modNumber = modNumber !== 0 ? modNumber : this.weekModulusNum;
+			weekNumber = weekNumber + ' (' + modNumber +')';
+		}
 		
 		if (dayDateNoTime.compareTo(today) === 0) {
-			var template = new Template($L("#{todayStr}, #{dateStr}"));
+			var templateModel = {};
+			if(this.weekNumberTitle) {
+				var template = new Template($L("#{todayStr}, #{dateStr}") + ", " + $L("W#{weekStr}"));
+				templateModel.weekStr = weekNumber;
+			} else {
+				var template = new Template($L("#{todayStr}, #{dateStr}"));
+			}
 			var todayStr= Mojo.Format.formatRelativeDate(today, {date: "short"}).capitalize();
 			
-			var templateModel = {};
 			templateModel.todayStr = todayStr;
 			//templateModel.dateStr = Mojo.Format.formatDate(this.dayDate, $L("EEE MMM d"));
 			templateModel.dateStr = Mojo.Format.formatDate(this.dayDate, formatObj);
 			this.controller.get('dv_title').update(template.evaluate(templateModel)); // Localize this date format string
 		} else {
-			//this.controller.get('dv_title').update(Mojo.Format.formatDate(this.dayDate, $L("EEE MMM d, yyyy"))); // Localize this date format string
-			formatObj.dateComponents = "mdy";
-			this.controller.get('dv_title').update(Mojo.Format.formatDate(this.dayDate, formatObj)); // Localize this date format string
+			if(this.weekNumberTitle) {
+				var template = new Template($L("#{dateStr}") + ", " + $L("W#{weekStr}"));
+				var templateModel = {};
+				templateModel.weekStr = weekNumber;
+				//this.controller.get('dv_title').update(Mojo.Format.formatDate(this.dayDate, $L("EEE MMM d, yyyy"))); // Localize this date format string
+				formatObj.dateComponents = "mdy";
+				templateModel.dateStr = Mojo.Format.formatDate(this.dayDate, formatObj);
+				this.controller.get('dv_title').update(template.evaluate(templateModel)); // Localize this date format string
+			} else {
+				formatObj.dateComponents = "mdy";
+				this.controller.get('dv_title').update(Mojo.Format.formatDate(this.dayDate, formatObj)); // Localize this date format string
+			}
 		}
 		
 		if (doScrim) {
@@ -332,6 +519,7 @@ var DayAssistant = Class.create({
 		if (newHeight < scrollerHeight) {
 			newHeight = scrollerHeight;
 		}
+		newHeight += 48;
 				
 		if (this.divs[whichDay].eventsCanvas.offsetHeight != newHeight) {
 			this.divs[whichDay].eventsCanvas.setAttribute('height', newHeight+'px');
@@ -400,8 +588,14 @@ var DayAssistant = Class.create({
 	},
 	getXIndexForTimeText:function(ctx,i,text)
 	{		
+			if(this.enhancedView && this.dayViewShrink == "strong") {
+				ctx.font = "bold 10px Prelude";
+			} else if(this.enhancedView && this.dayViewShrink == "medium") {
+				ctx.font = "bold 12px Prelude";
+			} else {
 			
 			ctx.font = "bold 14px Prelude";
+			}
 			
 
 			var metrics = ctx.measureText(text);
@@ -441,16 +635,39 @@ var DayAssistant = Class.create({
 				}
 				
 				if (i < 24) {
-					var text = String(i);
-					if (this.currentTimeFormat == "HH12") {
-						if (i === 0) {
-							text = '12';
+					if(this.enhancedView && this.dayViewShrink != "none") {
+						// replace the time labels on the left with just three labels
+						var text = "";
+						if ( i == 12 ) {
+							text = (this.currentTimeFormat == "HH12") ? $L("noon") : "12";
+							ctx.strokeText(text, this.getXIndexForTimeText(ctx, i, text), top + (this.dayViewShrink == "strong" ? 7 : 11));
+						} else if ( i == 6  || i == 18 ) {
+							text = "";
+							if (this.currentTimeFormat == "HH12") {
+								if ( i > 12 ) {
+									text = String(i - 12) + "pm";
+								}
+								else {
+									text = i + "am";
+								}
+							} else {
+								i = i<10 ? '0' + i : i;
+								text = String(i);
+							}
 						}
-						if (i > 12) {
-							text = String(i - 12);
+						ctx.strokeText(text, this.getXIndexForTimeText(ctx, i, text), top + (this.dayViewShrink == "strong" ? 7 : 11));
+					} else {
+						var text = String(i);
+						if (this.currentTimeFormat == "HH12") {
+							if (i === 0) {
+								text = '12';
+							}
+							if (i > 12) {
+								text = String(i - 12);
+							}
 						}
+						ctx.strokeText(text, this.getXIndexForTimeText(ctx, i, text), top + 15);
 					}
-					ctx.strokeText(text, this.getXIndexForTimeText(ctx, i, text), top + 15);
 				}
 			}
 		}
@@ -808,20 +1025,100 @@ var DayAssistant = Class.create({
 		// Subject
 		ctx.fillStyle = this.colors[event.calendarColor].text;
 		if (selected) {
-			ctx.fillStyle = "rgb(255, 255, 255)";
-		}
-		ctx.font = "bold 14px Prelude";
-		var bottom = textTop;
-		var subjectTop = top+15;
+			ctx.fillStyle = "rgb(255, 255, 255)"; }
+		if(this.enhancedView && this.dayViewShrink != "none") {
+			ctx.font = (this.dayViewShrink == "strong") ? "bold 10px Prelude" : "bold 12px Prelude";
+			bottom = textTop;
+			// prepend the subject with a human readable time stamp
+			var subjectTop = top+12;
+			var timeText = "";
+			var d = new Date(event.dtstart);
+			var timeH = d.getHours();
+			var timeM = d.getMinutes();
+			timeM = timeM <10 ? '0' + String(timeM) : String(timeM);
+			if (this.currentTimeFormat == "HH12") {
+				if ( timeM > 0 ) {
+					if ( timeH == 0 ) {
+						timeText = "12:" + timeM + "a";
+					} else if ( timeH == 12 ) {
+						timeText = timeH + ":" + timeM + "p";
+					} else if ( timeH < 12 ) {
+						timeText = timeH + ":" + timeM + "a";
+					} else {
+						timeText = String(timeH - 12) + ":" + timeM + "p";
+					}
+				}
+				else {
+					if ( timeH == 0 ) {
+						timeText = "12a";
+					} else if ( timeH == 12 ) {
+						timeText = timeH + "p";
+					} else if ( timeH < 12 ) {
+						timeText = timeH + "a";
+					} else {
+						timeText = String(timeH - 12) + "p";
+					}
+				}
+			} else {
+				timeText = timeH + ":" + timeM;
+			}
+			//var str = Object.toJSON(event);
+			//console.error(str);
+			this.fillText(timeText + " " + event.subject, ctx, left+4, subjectTop, width, bottom, 15 /*line height*/);	
+		} else {
+			ctx.font = "bold 14px Prelude";
+			var bottom = textTop;
+			var subjectTop = top+15;

-		if (bottom >= (top + height)) {
-			subjectTop = top + 17; // no room for location or note, therefore vertically center subject text
-		}
-		this.fillText(event.subject, ctx, left+4, subjectTop, width, bottom, 15 /*line height*/);
+			if (bottom >= (top + height)) {
+				subjectTop = top + 17; // no room for location or note, therefore vertically center subject text
+			}		
+			this.fillText(event.subject, ctx, left+4, subjectTop, width, bottom, 15 /*line height*/);
+		}
+		if(this.enhancedView) {
+			// Alarm
+			var testA, xx = false, AA, ZZ = event.alarm;
+			if(ZZ){
+				for(AA=0;AA<ZZ.length;AA++){
+					testA = ZZ[AA];
+					if(testA &&  testA.alarmTrigger && testA.action === "display" && testA.alarmTrigger.valueType && testA.alarmTrigger.valueType === "DURATION" && testA.alarmTrigger.value && testA.alarmTrigger.value !== "" && testA.alarmTrigger.value !== "none"){
+						xx = true;
+						break;
+					}
+				}
+			}
+			if (xx) {
+				if(this.dayViewShrink != "none") {
+					try{ ctx.drawImage(this.imgAlarm, left+4+width-18, subjectTop-10, 12, 12); }catch(e) {}
+				} else {
+				try{ ctx.drawImage(this.imgAlarm, left+4+width-18, subjectTop+1, 12, 12); }catch(e) {}
+				}
+			}
+			// Icon
+			if (event.note !== undefined && this.dayViewIcons) {
+				var start = this.app.getNotesIconParts(event.note);
+				if (start && start[1]) {
+					var icon = start[1];
+					if(icon && this.imgIcons.hasOwnProperty(icon)){try{
+						if(this.dayViewShrink != "none") {
+							ctx.drawImage(this.imgIcons[icon], left+4+width-30, subjectTop-10, 12, 12);
+						} else {
+							ctx.drawImage(this.imgIcons[icon], left+4+width-30, subjectTop+12, 12, 12);
+						}
+					}catch (e) {}}
+				}
+			}
+		}
 		
 		// Location
 		if (event.location && (event.location.length > 0) && (textTop < (top + height))) {
-			ctx.font = "italic bold 14px Prelude";
+			if(this.enhancedView && this.dayViewShrink == "strong") {
+				ctx.font = "italic bold 10px Prelude";
+			} else if(this.enhancedView && this.dayViewShrink == "medium") {
+				ctx.font = "italic bold 12px Prelude";
+			} else {
+				ctx.font = "italic bold 14px Prelude";
+			}
 			bottom = textTop+15;			
 			this.fillText(event.location, ctx, left+4, textTop, width, bottom, 15 /*line height*/);
 			textTop += 15;
@@ -829,9 +1126,18 @@ var DayAssistant = Class.create({
 		
 		// Notes
 		if (event.note && (event.note.length > 0) && (textTop < (top + height))) {
+			if(this.enhancedView && this.dayViewIcons){
+				if (start && start[1]) {
+					var uberNoteTxt = start[0] + start[2];
+				} else {
+					var uberNoteTxt = event.note;
+				}
+			} else {
+				var uberNoteTxt = event.note;
+			}
 			ctx.font = "12px Prelude";
 			bottom = top+height;
-			this.fillText(event.note, ctx, left+4, textTop-2, width, bottom-2, 12 /*line height*/);
+			this.fillText(uberNoteTxt, ctx, left+4, textTop-2, width, bottom-2, 12 /*line height*/);
 		}
 
 		var selectedColor;		
@@ -860,11 +1166,11 @@ var DayAssistant = Class.create({
 		var marginRight = 4;
 		//Incorporates the padding-top of the first all day event 
 		//from the old css style .dv-allday-event:first-child
-		var marginTop = 10;
-		var eventHeight = 24;
+		var marginTop = (this.enhancedView && this.dayViewShrink != "none") ? 8 : 10;
+		var eventHeight = (this.enhancedView && this.dayViewShrink != "none") ? 18 : 24;
 		// Incorporates the padding-top 1px + padding-bottom 9px from 
 		// the old css style dv-allday-event
-		var totalHeight = 34;
+		var totalHeight = (this.enhancedView && this.dayViewShrink != "none") ? 26 : 34;
 		
 		return {
 			top : (totalHeight * index + marginTop),
@@ -899,8 +1205,44 @@ var DayAssistant = Class.create({
 		if (selected) {
 			ctx.fillStyle = "rgb(255, 255, 255)";
 		}
-		ctx.font = "bold 14px Prelude";
-		this.fillText(event.subject, ctx, dim.left+10, dim.top+17, dim.width-10, dim.top+30, 15 /*line height*/);
+		if(this.enhancedView && this.dayViewShrink == "strong") {
+			ctx.font = "bold 10px Prelude";
+		} else if(this.enhancedView && this.dayViewShrink == "medium") {
+			ctx.font = "bold 12px Prelude";
+		} else {
+			ctx.font = "bold 14px Prelude";
+		}
+		if(this.enhancedView && this.dayViewShrink != "none") {
+			this.fillText(event.subject, ctx, dim.left+10, dim.top+17, dim.width-10, dim.top+27, 13 /*line height*/);
+		} else {
+			this.fillText(event.subject, ctx, dim.left+10, dim.top+17, dim.width-10, dim.top+30, 15 /*line height*/);
+		}
+		if(this.enhancedView) {
+			// Alarm
+			var testA, xx = false, AA, ZZ = event.alarm;
+			if(ZZ){
+				for(AA=0;AA<ZZ.length;AA++){
+					testA = ZZ[AA];
+					if(testA &&  testA.alarmTrigger && testA.action === "display" && testA.alarmTrigger.valueType && testA.alarmTrigger.valueType === "DURATION" && testA.alarmTrigger.value && testA.alarmTrigger.value !== "" && testA.alarmTrigger.value !== "none"){
+						xx = true;
+						break;
+					}
+				}
+			}
+			if (xx) {
+				try{ ctx.drawImage(this.imgAlarm, dim.left+dim.width-18, dim.top+(dim.height-12)/2, 12, 12); }catch(e) {}
+			}
+			// Icon
+			if (event.note !== undefined && this.dayViewIcons) {
+				try {
+					var start = this.app.getNotesIconParts(event.note);
+					if (start && start[1]) {
+						var icon = start[1];
+						if(icon && this.imgIcons.hasOwnProperty(icon)){try{ctx.drawImage(this.imgIcons[icon], dim.left+dim.width-30, dim.top+(dim.height-12)/2, 12, 12);}catch (e) {}}
+					}
+				} catch(e) {}
+			}
+		}
 		
 		if (selected) {
 			var selectedColor = "rgba(4, 4, 4, 0.5)";
@@ -912,9 +1254,33 @@ var DayAssistant = Class.create({
 	calcEventCompression: function (day) {
 
 		// Make sure that free times, busy times, and events are sorted by start times
-		day.freeTimes	= day.freeTimes.sortBy	(function (f) { return f.start_decimal; });
+		//day.freeTimes	= day.freeTimes.sortBy	(function (f) { return f.start_decimal; });
 		day.events		= day.events.sortBy		(function (e) { return e.start_decimal; });
 		day.busyTimes	= day.busyTimes.sortBy	(function (b) { return b.start_decimal; });
+		if (this.compressedView && this.enhancedView) {
+			if (day.events.length == 0 && day.busyTimes.length == 0) {
+				day.freeTimes.push({start_decimal: 0, end_decimal: 2400, duration: 2400});
+			} else {
+				if ((day.events.length >0 && day.events[0].start_decimal > 0 )|| (day.busyTimes.length > 0 && day.busyTimes[0].start_decimal > 0)) {
+					if(day.events.length >0){var evt = day.events[0].start_decimal;}else{var evt = 2400;}
+					if(day.busyTimes.length >0){var bsy = day.busyTimes[0].start_decimal;}else{var bsy = 2400;}
+					var startDecimal = evt < bsy ? evt : bsy;
+					day.freeTimes.push({start_decimal: 0, end_decimal: startDecimal, duration: startDecimal});
+				}
+				// sort by end times to get last time
+				var last = day.events.sortBy(function(f) { return f.end_decimal; });
+				var lastBusy = day.busyTimes.sortBy(function(f) { return f.end_decimal; });
+				if ((last.length >0 && last[last.length-1].end_decimal < 2400 )||(lastBusy.length > 0 && lastBusy[lastBusy.length-1].end_decimal < 2400)) {
+					if(last.length >0){var evt = last[last.length-1].end_decimal;}else{var evt = 0;}
+					if(lastBusy.length >0){var bsy = lastBusy[lastBusy.length-1].end_decimal;}else{var bsy = 0;}
+					var endDecimal = evt > bsy ? evt : bsy;
+					day.freeTimes.push({start_decimal: endDecimal, end_decimal: 2400, duration: 2400 - endDecimal});
+				}
+			}
+		}
+		// Make sure that free times, busy times, and events are sorted by start times
+		day.freeTimes = (this.enhancedView && this.dayViewShrink != "none") ? day.freeTimes = [] : day.freeTimes.sortBy(function(f) { return f.start_decimal; });
+		day.busyTimes = day.busyTimes.sortBy(function(b) { return b.start_decimal; });
 
 		day.animationTop = 0;
 
@@ -1136,7 +1502,7 @@ var DayAssistant = Class.create({
 			}
 			//now that we have finished rendering the timelines and number 
 			//render am pm
-			if (this.currentTimeFormat == "HH12") {
+			if (this.currentTimeFormat == "HH12" && ((!this.enhancedView) || (this.enhancedView === true && this.dayViewShrink == "none"))) {
 				//now show the am/pm indicators
 				this.calculatePosToDrawAmPm(Math.abs(this.tds[this.THIS_DAY].scroller.mojo.getScrollPosition().top));
 				Mojo.Dom.show (this.controller.get('ampm_indicator'));
@@ -1159,7 +1525,7 @@ var DayAssistant = Class.create({
 		// ** ALL DAY EVENTS
 		// Determine whether there are any all day events
 		if (day.allDayEvents.size() > 0) {
-			var newHeight = 34 * day.allDayEvents.size();
+			var newHeight = (this.enhancedView && this.dayViewShrink != "none") ? 29 * day.allDayEvents.size() : 34 * day.allDayEvents.size();
 			
 			// Set the height of the canvas
 			if (dayDiv.alldayevents_list.offsetHeight != newHeight) {
@@ -1384,16 +1750,27 @@ var DayAssistant = Class.create({
 		var calMgr	= this.calendarsManager
 		,	calendar= calMgr.getCurrentCal();
 
-		if ("all" == calendar) {
+		// update UC groups, calendars changed
+		this.userUberCalGroups = [];
+		this.userUberCalGroups = this.app.getUserUberCalGroups();
+		this.uberGroups = this.app.getUberGroups();
+		this.getUCGroupsProps();
+		
+		if(this.ucGroupIdx !== undefined) {
+			var name = this.userUberCalGroups[this.ucGroupIdx].groupname;
+			this.controller.get ("dv_current_calendar")	.update			(name);
+			this.controller.get ("dv_calendar_source")	.setAttribute	("class", "header-cal-source");
+		} else if ("all" == calendar) {
 			this.controller.get ("dv_current_calendar")	.update			($L("All"));
 			this.controller.get ("dv_calendar_source")	.setAttribute	("class", "header-cal-source");
 
 		} else {
 			if ("Local" == calMgr.getCalSyncSource (calendar)) {
-				// Special case the local calendar to always show Palm since Palm Profile always
+				// Special case the local calendar to always show Palm since HP webOS Account always
 				// gets truncated and looks ugly
 				this.controller.get ("dv_current_calendar").update ($L("Palm"));
 
+
 			} else {
 				this.controller.get ("dv_current_calendar").update (calMgr.getCalAccountName (calendar));
 			}
@@ -1439,9 +1816,18 @@ var DayAssistant = Class.create({
 		,	tzId	: this.app.getTimezoneName()
 		};
 
+		// check for UC groups
+		if(this.uberGroups && this.uberGroups.inUse === true && this.ucGroupIdx !== undefined) {
+			var idx = this.ucGroupIdx;
+			if(idx !== undefined && this.userUberCalGroups && this.userUberCalGroups.length > 0 && this.userUberCalGroups[idx].includes && this.userUberCalGroups[idx].includes.length >0) {
+				var ucIncludes = this.userUberCalGroups[idx].includes;
+				calendarId = 'all';
+			}
+		}
+		
 		if (calendarId == "all") {												// When in "View All" mode
 			calendarId = null;													// disable calendar filtering
-			range.excludeList = this.calendarsManager.getExcludeFromAllList();	// except for excluded calendars
+			range.excludeList = this.app.buildUberExcludes(ucIncludes);	// except for excluded calendars
 		} else {
 			range.calendarId = calendarId;										// otherwise enable calendar filtering.
 		}
@@ -1584,6 +1970,12 @@ var DayAssistant = Class.create({
 			top: yPixel+'px'
 		}).show();
 
+		if(this.enhancedView === true && this.dayViewShrink != "none") {
+			var curtimediv = this.controller.get('current_time');
+			curtimediv.innerHTML ='<img id="uber_current_time_image" src="images/current-time-indicator.png" />';
+			this.controller.get('uber_current_time_image').style.height = this.hourHeight+'px';
+			this.controller.get('uber_current_time_image').style.width = img.width+'px';
+		}
 	},
 	
 	calculatePosWithCompression:function(day,hour)
@@ -1617,8 +2009,22 @@ var DayAssistant = Class.create({
 	
 	
 	scrollToDefault: function(whichDay) {
-		if (!(this.tds[whichDay].scroller && this.tds[whichDay].scroller.mojo)) {
-			return;
+		if(this.enhancedView && this.dayViewShrink != "none") {
+			// disable the auto scrolling and just always follow the bottom of the page
+			var prefs = this.prefsManager.getPrefs();
+				if (prefs) {
+					var startTime = new Date(prefs.startTimeOfDay);
+					var uberDateTime = this.app.getCurrentDateTime();
+					uberDateTime.setHours(startTime.getUTCHours());
+					uberDateTime.setMinutes(startTime.getUTCMinutes());
+				}
+
+			this.tds[whichDay].scroller.mojo.scrollTo(undefined, ((uberDateTime.getHours()* this.hourHeight)+3));
+			this.updateTimer(false);
+		} else {
+			if (!(this.tds[whichDay].scroller && this.tds[whichDay].scroller.mojo)) {
+				return;
+			}
 		}
 
 		//Mojo.Log.info('BEFORE SCROLL TOP', this.tds[whichDay].scroller.mojo.getScrollPosition().top);
@@ -1674,10 +2080,26 @@ var DayAssistant = Class.create({
 		this.dvScratchEventsDiv	= this.controller.get ("dv_scratch_events");
 		this.scratchEventActive	= false;
 		this.scratchEvent		= null;
+		this.copyEvt = null;
 		
+		for(var i=0; i<this.userUberCats.length; i++) {
+			var catName = this.userUberCats[i].name;
+			this.imgIcons[catName] = new Image();
+			this.imgIcons[catName].src = "/media/internal/.scrims/ubercalendar/icon-" + catName + ".png";
+		}
+
+		// setup UC groups
+		this.userUberCalGroups = [];
+		this.userUberCalGroups = this.app.getUserUberCalGroups();
+		this.uberGroups = this.app.getUberGroups();
+		this.getUCGroupsProps();
+
 		// Used to detect Orange key + tap to delete inline events
 		this.orangeKeyDown = false;
 	
+		//Used to detect gesture area hold
+		this.metaKeyDown = false;
+		
 		this.firstActivated = true;
 		
 		this.buildViewHeader();
@@ -1787,6 +2209,11 @@ var DayAssistant = Class.create({
 		this.divs[this.NEXT_DAY].ctxAllDayEvents = this.divs[this.NEXT_DAY].alldayevents_list.getContext('2d');
 		this.divs[this.THIS_DAY].ctxAllDayEvents = this.divs[this.THIS_DAY].alldayevents_list.getContext('2d');
 		
+		if(this.enhancedView && this.dayViewShrink != "none") {
+			this.controller.get('all-day-events-canvas-wrapper_prev').setAttribute('class', 'alldayeventsListshrink');
+			this.controller.get('all-day-events-canvas-wrapper_next').setAttribute('class', 'alldayeventsListshrink');
+			this.controller.get('all-day-events-canvas-wrapper').setAttribute('class', 'alldayeventsListshrink');
+		}
 		this.fastScrollScrim = this.controller.get('dv_scroll_scrim');
 		this.fastScrollAnimateDiv = this.controller.get('dv_scrim_animate');
 		Mojo.Dom.hide (this.fastScrollScrim);
@@ -1934,15 +2361,16 @@ var DayAssistant = Class.create({
 		this.menuModel = {
 			visible:true,
 			items: [
-					{},
+					{label: $L('Event'), icon: 'new-timed', command: 'newtimed'},
 						{label:$L('Views'), 
 						toggleCmd:'day', 
 						items:[
+							{label:$L('Agenda'), icon: 'menu-agenda', command:'agenda'},
 							{label:$L('Day'), icon: 'menu-day', command:'day'}, 
 							{label:$L('Week'), icon: 'menu-week', command:'week'}, 
 							{label:$L('Month'), icon: 'menu-month', command:'month'}
 					 ]},
-					{}
+					{label: $L('All day event'), icon: 'new-allday', command: 'newallday'}
 					]};
 			
 		this.controller.setupWidget(Mojo.Menu.commandMenu, undefined, this.menuModel);
@@ -2075,9 +2503,10 @@ var DayAssistant = Class.create({
 
 ,	showJumpTo: function() {
 		this.maybeCommitScratchEvent (true);
-		this.controller.showDialog ({ template: "shared/jumpto", assistant: new JumptoDialogAssistant (this.controller) });
+		this.controller.showDialog ({ template: "shared/jumpto", assistant: new JumptoDialogAssistant (this.controller, this) });
 	}
 
+
 ,	syncAllCalendars: function() {
 		this.calendarsManager.syncAllCalendars (this.controller);
 	}
@@ -2153,14 +2582,45 @@ var DayAssistant = Class.create({
 				Mojo.Event.stop (event);
 				this.maybeCommitScratchEvent(true);
 				this.syncAllCalendars();
+			} else if (event.command == 'agenda') {
+				Mojo.Event.stop(event);
+				this.maybeCommitScratchEvent(true);
+				this.menuModel.items[1].toggleCmd = 'day';
+				this.controller.modelChanged(this.menuModel, this);
+				var appId = 'com.palm.app.agendaview';
+				if(this.useAgendaZ){
+					appId = 'com.palm.service.calendar.metaview';
+				}
+				this.controller.serviceRequest('palm://com.palm.applicationManager', {
+					method: 'launch',
+					parameters: {
+						id: appId
+					},
+					onSuccess: function(e) {Mojo.Log.error("launched " + appId)},
+					onFailure: function(e) {Mojo.Log.error("error launching " + appId + ":  " + e.errorText)}
+				});
+				
 			}				
 		} else if(event.type == Mojo.Event.commandEnable && event.command == Mojo.Menu.prefsCmd) {
 			// Enable prefs menuitem for this scene.
 			event.stopPropagation();
 		} else if(event.type == Mojo.Event.back){
 			// If there's a scratch event, possibly commit it, and then override default back handling.
-			if (this.maybeCommitScratchEvent(true)) {
-				Mojo.Event.stop (event);
+			if(this.uberBackGesture == 'month' || (this.uberBackGesture == 'last' && this.uberLastView == 'month' )) {
+				event.preventDefault();
+				event.stopPropagation();
+				this.maybeCommitScratchEvent(true);
+				this.handleMonthView();
+			} else if(this.uberBackGesture == 'week' || (this.uberBackGesture == 'last' && this.uberLastView == 'week' )) {
+				event.preventDefault();
+				event.stopPropagation();
+				this.maybeCommitScratchEvent(true);
+				this.handleWeekView();
+			} else if(this.uberBackGesture == 'day' || (this.uberBackGesture == 'last' && this.uberLastView == 'day' )) {
+				if(this.maybeCommitScratchEvent(true)) {
+				Mojo.Event.stop(event);
+				}
+				//back should minimize here
 			}
 		}
 			
@@ -2337,13 +2797,45 @@ var DayAssistant = Class.create({
 		Mojo.Event.stop (event);
 		var listItems = this.calendarsManager.buildCalendarsMenu (true /*includeAll*/, true /*includeReadOnly*/, true /*includeExcludedFromAll*/);
 
+		// UC groups items
+		if(this.userUberCalGroups && this.userUberCalGroups.length > 0) {
+			var viewOptionsItem = listItems.splice(-1,1);
+			var len = this.userUberCalGroups.length;
+			if(this.ucGroupsFirst){
+				var allCals = listItems.splice(0,1);
+				for(var i=len-1; i>-1; i--) {
+					var grp = this.userUberCalGroups[i];
+					if(grp && grp.rId && grp.groupname) {
+						listItems.unshift( {label: grp.groupname, command: "rId:" + grp.rId, secondaryIcon: 'menu_all'} );
+					}
+				}
+				listItems.unshift( {label: $L("UberCalendar Groups")} );
+				listItems.unshift({label: $L("All calendars"),
+									command: 'all',
+									secondaryIcon: 'menu_all'
+								});
+			} else {
+				listItems.push( {label: $L("UberCalendar Groups")} );
+				for(var i=0; i<len; i++) {
+					var grp = this.userUberCalGroups[i];
+					if(grp && grp.rId && grp.groupname) {
+						listItems.push( {label: grp.groupname, command: "rId:" + grp.rId, secondaryIcon: 'menu_all'} );
+					}
+				}
+			}
+			listItems.push({
+				label: $L("Calendar View Options..."),
+				command: "viewOptions"
+			});
+		}
+		
 		this.controller.popupSubmenu(
 		{	items			: listItems
 		,	manualPlacement	: true
 //		,	placeNear		: event.target
 		,	popupClass		: "cal-selector-popup"
 		,	onChoose		: this.calendarChoose.bind(this)
-		,	toggleCmd		: this.calendarsManager.getCurrentCal()
+		,	toggleCmd		: this.app.uberToggleGroupsCmd(this.uberGroups.inUse, "rId:" + this.uberGroups.rId)
 		});
 	},
 
@@ -2355,6 +2847,18 @@ var DayAssistant = Class.create({
 			return;
 		}
 
+		//uc groups setup
+		if(value.indexOf("rId:") !== -1) {
+			var idx = value.indexOf(":") + 1;
+			rID = value.slice(idx);
+			this.app.setUberGroups(rID);
+			this.uberGroups = {inUse: true, rId: rID};
+			value = 'all';
+		} else {
+			this.app.setUberGroups(false);
+			this.uberGroups = {inUse: false, rId: ""};
+		}
+		
 		this.maybeCommitScratchEvent (true);
 		this.calendarsManager.setCurrentCal (value);
 		this.clearCache();
@@ -2399,6 +2903,7 @@ var DayAssistant = Class.create({
 /*HACK*/}
 
 		this.active = true;
+		this.metaKeyDown = false;
 		//this.resetPos(); // TEMP
 
 		if (this.compressed) {
@@ -2414,6 +2919,10 @@ var DayAssistant = Class.create({
 		// - If updateEmptySpacer is called while the dashboard is up, then the scroller
 		// height needs to be updated when the dashboard is brought down.
 
+		// force reset the empty spacer after the reminder has been closed
+		// because the resize event does not fire after coming back from event details
+		this.updateEmptySpacer (this.THIS_DAY, true); 
+		
 		Mojo.Event.listen(this.controller.window, "resize", this.onResize);
 		this.controller.get ("dv_scroll_container").mojo.addMovementListener (this.onHorizontalScroll);
 		this.controller.get (this.tds[this.THIS_DAY].scroller).mojo.addMovementListener (this.onVerticalScroll);
@@ -2428,6 +2937,12 @@ var DayAssistant = Class.create({
 		// Calendar Picker
 		this.calendarTapHandler = this.CalSelectorHandler.bind (this);
 		this.controller.get ("dv_calendar_source").observe (Mojo.Event.tap, this.calendarTapHandler);
+		
+		// setup UC groups
+		this.userUberCalGroups = [];
+		this.userUberCalGroups = this.app.getUserUberCalGroups();
+		this.uberGroups = this.app.getUberGroups();
+		this.getUCGroupsProps();
 
 		// The colors have been updated, so we clear the cache and update everything
 		if (this.pendingCalendarSettingsUpdate === true) {
@@ -2461,14 +2976,29 @@ var DayAssistant = Class.create({
 
 		this.keyDownHandler = this.handleKeyDown.bind(this);
 		this.controller.listen (this.controller.sceneElement, Mojo.Event.keydown, this.keyDownHandler);
+		this.miniHandler = this.handleMini.bindAsEventListener(this);
+		this.controller.listen(this.controller.sceneElement, Mojo.Event.stageActivate, this.miniHandler);
+		this.uberLastView = "day";
+		var cookie = new Mojo.Model.Cookie("BackGesture");
+		try {
+			if(cookie){
+				var lview = cookie.get();
+				if(lview && lview.lastview) {
+					this.uberLastView = lview.lastview;
+				}
+				cookie.put({lastview: "day"});
+			}
+		} catch (e) {}
+		if ((this.uberLastView != "month") && (this.uberLastView != "week")) {
+			this.uberLastView = "day";
+		}
 		this.updateTimer();
 	},
 
 	deactivate: function() {
-
 		this.active = false;
-
 		this.refreshDisplay ({ stop:true });
+		this.metaKeyDown = false;
 		this.tapHandler.deactivate();
 		this.tapHandlerCompressed.deactivate();
 		this.tapHandlerAllDay.deactivate();
@@ -2497,6 +3027,7 @@ var DayAssistant = Class.create({
 /*HACK*/this.lastScrollPosition			= this.scrollContainer.mojo.getScrollPosition();
 /*HACK*/this.lastVerticalScrollPosition	= this.tds [this.THIS_DAY].scroller.mojo.getScrollPosition();
 
+		this.controller.stopListening(this.controller.sceneElement, Mojo.Event.stageActivate, this.miniHandler);
 	},
 
 
@@ -2508,6 +3039,11 @@ var DayAssistant = Class.create({
 			//Mojo.Log.info("handleKeyUp detected ORANGE key");
 			this.orangeKeyDown = false;
 		} 
+		// getsure area up
+		if (event.originalEvent.metaKey || event.originalEvent.keyCode === 231) {
+		//Mojo.Log.info("handleKeyUp detected gesture up key");
+			this.metaKeyDown = false;
+		}		
 	},
 	
 	handleKeyDown: function(event) {
@@ -2516,6 +3052,21 @@ var DayAssistant = Class.create({
 			//Mojo.Log.info("handleKeyDown detected ORANGE key");
 			this.orangeKeyDown = true;
 		} 
+		// getsure area down
+		if (this.active && (event.originalEvent.metaKey || event.originalEvent.keyCode === 231)) {
+    	//Mojo.Log.info("handleKeyUp detected gesture key");
+			this.metaKeyDown = true;
+		}		
+	},
+	
+	handleMini: function() {
+		this.metaKeyDown = false;
+	},
+	
+	editFromTemplate: function(event, editingTemplate) {
+		// going from template to edit new event
+		this.fromEditEventsCallBack = true;
+		this.controller.stageController.pushScene('edit', event._id, new Date(event.dtstart), event.allDay, event.calendarId, event.subject, false, this.updatingEventHandler, editingTemplate);
 	},
 	
 	updateSceneScrollerSize: function(event) {
@@ -2692,6 +3243,14 @@ var DayAssistant = Class.create({
 		}
 	},
 	
+	uberPopMinuteChoose: function(min){
+		if(min !== undefined){
+			min = parseInt(min);
+			this.ucEventTop += Math.floor((min/60)*this.hourHeight);
+			this.preCheckBeforeScratchEvent(this.ucNewHour, min, this.ucEventTop);
+		}
+	},
+	
 	preCheckBeforeScratchEvent:function(newHour, newMinutes, eventTop) {
 		// Only allow creation of inline events if a non readonly calendar is selected or All
 		if (this.readOnlyCalendar === false) {
@@ -2724,7 +3283,6 @@ var DayAssistant = Class.create({
 		}
 
 		Mojo.Event.stop (event);
-
 		var eventStartTime	= new Date (this.scratchEvent.dtstart);
 		var subject			= this.scratchEventField.mojo.getValue();
 
@@ -2990,7 +3548,30 @@ var DayAssistant = Class.create({
 			}
 			*/
 		}
-		
+		if(this.enhancedView && this.dayMinutePopup && !this.scratchEvent){
+			this.ucNewHour = newHour;
+			this.ucEventTop = eventTop;
+			var hr = newHour;
+			if(this.currentTimeFormat == "HH12") {
+				if(hr === 0){
+					hr = 12;
+				} else {
+					hr = hr > 12 ? hr -12 : hr;
+				}
+			}
+			var items =[], itemNum, interval = this.dayMinInterval;
+			itemNum = Math.floor(60/interval);
+			items.push({label: hr+":00", command:0});
+			for(var i=1;i<itemNum;i++){
+				items.push({label: hr+":" + (interval*i), command:(interval*i)});
+			}
+			this.controller.popupSubmenu({
+					onChoose: this.uberPopMinuteChoose,
+					items: items,
+					placeNear: event.target
+					});
+			return;
+		}
 		if (!this.scratchEvent) {
 			this.preCheckBeforeScratchEvent(newHour, newMinute, eventTop);
 		} 
@@ -3007,14 +3588,14 @@ var DayAssistant = Class.create({
 	
 	handleAllDayTap: function(index, event) {
 		this.deletedEventId = undefined;
-		if (this.orangeKeyDown === true) {
+		if (this.metaKeyDown === true ) {
 			// Confirm with the user they want to delete the event
 			this.eventToBeDeleted = event;
 			this.allDayEventToBeDeletedIndex = index;
 			this.deletedEventId = event._id;
-			// Reset the orangeKeyDown to handle the case the user lets go
+			// Reset the metaKeyDown to handle the case the user lets go
 			// of the Orange key when the Delete confirmation dialog is up
-			this.orangeKeyDown = false;
+			this.metaKeyDown = false;
 			//this.db.getEvent(event._id, this.gotEventInlineDelete.bind(this),this.gotEventInlineDeleteFailed.bind(this));
 			this.gotEventInlineDelete(event);
 		} else {
@@ -3090,6 +3671,22 @@ var DayAssistant = Class.create({
 		}
 	},
 	
+	copiedEvent: function(response) {
+		//copied event saved open in edit scene
+		if(response.results[0].id && response.results[0].rev) {
+			this.copyEvt._id = response.results[0].id;
+			this.copyEvt._rev = response.results[0].rev;
+		}
+		if(this.copyEvt) {
+			if(response.results[0].id == this.copyEvt._id || this.copyEvt._id == undefined || this.copyEvt._id.match(response.results[0].id)) {
+	  
+				// NOTE: Event Ids are strings NOT longs
+				if (this.copyEvt._id == undefined)	this.copyEvt._id = response.results[0].id + "";	// Do NOT Localize
+				this.controller.stageController.pushScene('edit', this.copyEvt._id, new Date(this.copyEvt.dtstart), false, this.copyEvt.calendarId, this.copyEvt.subject, false, this.updatingEventHandler);
+			}
+		}
+	},
+	
 	handleEventsTap: function(event, tapEvent) {
 		//Mojo.Log.info("day-assistant: handleEventsTap event_being_held " + Object.toJSON(this.event_being_held));
 		
@@ -3118,23 +3715,45 @@ var DayAssistant = Class.create({
             }
         }
         else {
-            if (this.orangeKeyDown === true) {
+            if (this.metaKeyDown === true || tapEvent.metaKey === true) {
                 // Confirm with the user they want to delete the event
-                //Mojo.Log.info("handleEventsTap: Orange key + tap = Delete event " + Object.toJSON(event));
+                //Mojo.Log.info("handleEventsTap: Meta key + tap = Delete event " + Object.toJSON(event));
                 // Retrieve the event from the calendar service so we can figure
                 // out whether it's recurring or not
                 this.eventToBeDeleted = event;
                 this.deletedEventId = event._id;
-                // Reset the orangeKeyDown to handle the case the user lets go
-                // of the Orange key when the Delete confirmation dialog is up
-                this.orangeKeyDown = false;
+                // Reset the metaKeyDown to handle the case the user lets go
+                // of the Meta key when the Delete confirmation dialog is up
+                this.metaKeyDown = false;
 				this.gotEventInlineDelete(event);
                 //this.db.getEvent(event._id, this.gotEventInlineDelete.bind(this), this.gotEventInlineDeleteFailed.bind(this));
-            }
-            else {
-				var idString = event._id+"-"+event.currentLocalStart+"-"+event.currentLocalEnd;
-                this.controller.stageController.pushScene('edit', idString, new Date(event.dtstart), false, event.calendarId, event.subject, false, this.updatingEventHandler);
-            }
+            } else {
+				if (this.orangeKeyDown == true ) {
+					//create new from old
+					var start = new Date();
+					start.set({	minute: 0, second: 0, millisecond: 0 });
+					var startTS = start.getTime(); //set it up on today's current hour
+					var duration = event.dtend - event.dtstart;
+					var endTS = startTS + duration;
+					this.orangeKeyDown = false;
+					this.copyEvt = Object.clone(event);
+					this.copyEvt.calendarId = event.calendarId;
+					this.copyEvt._id = undefined;
+					this.copyEvt.dtstart = startTS;
+					this.copyEvt.startTimestamp = startTS;
+					this.copyEvt.dtend = startTS + duration;
+					this.copyEvt.endTimestamp = startTS + duration;
+					if(this.copyEvt.parentId) {this.copyEvt.parentId = undefined;}
+					if(!this.copyEvt.tzId){
+						this.copyEvt.tzId = this.app.getTimezoneName();
+					}
+					var newEvent = JSON.parse(JSON.stringify(this.copyEvt))
+					this.db.createEvent(newEvent, this.copiedEvent.bind(this), function(response) {Mojo.Log.error(response.errorText)});
+				} else {
+					var idString = event._id+"-"+event.currentLocalStart+"-"+event.currentLocalEnd;
+					this.controller.stageController.pushScene('edit', idString, new Date(event.dtstart), false, event.calendarId, event.subject, false, this.updatingEventHandler);
+				}
+			}
         }
 	},
 	
@@ -3514,6 +4133,66 @@ var DayAssistant = Class.create({
 		}
 	},
 	
+	saveThisAndFuture: function() {
+		// change end date, add exception, new event
+		if(this.toBeSavedEvent.dtstart === this.toBeSavedEvent.currentLocalStart) {
+			//this is the first event so, this and future is the whole series
+			this.saveEvent(undefined);
+			return;
+		}
+		this.newEvent = JSON.parse(JSON.stringify(this.toBeSavedEvent));
+		this.toBeSavedEvent.rrule.until = (new Date(this.toBeSavedEvent.currentLocalEnd)).addDays(-1).getTime();
+		this.toBeSavedEvent.isRecurringForever = false;
+		if(this.toBeSavedEvent.rrule.count) {this.toBeSavedEvent.rrule.count = undefined;}
+		//this.app.getRecurrenceRule().addException(this.targetEvent, new Date(this.unchangedtargetModified.start));
+		var eventToUpdate = JSON.parse(JSON.stringify(this.toBeSavedEvent));
+		
+		this.db ["updateEvent"]
+				(	eventToUpdate
+				,	this.ThisAndFutureCB.bind(this)
+				,	function(response){Mojo.Log.error("failed this and future" + response.errorText)}
+		);
+	},
+	
+	ThisAndFutureCB: function () {
+		 // Reset the dragging state
+        this.resetEventBeingDragged();
+		var originalStart = this.toBeSavedEvent.currentLocalStart;
+		
+		if(!this.newEvent.tzId){
+			this.newEvent.tzId = this.app.getTimezoneName();
+		}
+		//we also need to assign the start and end time stamp 
+        var startTime = new Date(originalStart);
+        var duration = this.toBeSavedEvent.dtend - this.toBeSavedEvent.dtstart;
+        
+        if (this.newHour === undefined && this.newMinutes === undefined) {
+            // Calculate the new start time using the delta
+            startTime.addMinutes(this.newTimeDeltaInMinutes);
+        }
+        else {
+            // Set the new startTimestamp 
+            startTime.set(
+			{	hour	: this.newHour
+			,	minute	: this.newMinutes
+            });
+        }
+		delete this.newEvent._id;
+		this.newEvent._rev = undefined;
+		this.newEvent.parentId = undefined;
+		this.newEvent.id = undefined;
+		this.newEvent.remoteId = undefined;
+		this.newEvent.dtstart = +startTime;
+		this.newEvent.dtend = +startTime + duration;
+		this.toBeSavedEvent = JSON.parse(JSON.stringify(this.newEvent));
+		var callback = this.updatedEventTime.bind(this);
+		this.db ["createEvent"]
+				(	this.toBeSavedEvent
+				,	callback
+				,	function(response){Mojo.Log.error("failed this and future" + response.errorText)}
+		);
+	},
+	
 	recurrenceCancel:function(){
 		//Mojo.Log.info('inside day- recurrene canceled %o',this.draggedEventTop);
 		this.event_being_held.top = this.event_being_held.origDragTop;
@@ -3576,6 +4255,16 @@ var DayAssistant = Class.create({
 		//Mojo.Log.info("day-assistant handleEventsDragEnd");
 		
 		if (this.event_being_dragged) {
+			var itemLeft = this.event_being_dragged.positionedOffset().left;
+			if (itemLeft > 100) {
+				this.eventToBeDeleted = this.event_being_held;
+				this.deletedeventId = this.event_being_held._id;
+				this.gotEventInlineDelete(event);
+				// Reset the dragging state
+				this.resetEventBeingDragged();
+
+				return Mojo.Gesture.CONSUMED_EVENT;
+			} else {
 			var itemTop = this.event_being_dragged.positionedOffset().top;
 			
 			// Calculate how much "time" the user has moved the event.  When the event is retrieved
@@ -3600,12 +4289,12 @@ var DayAssistant = Class.create({
 	
 				// Retrieve the event from the calendar service so we can set the new start time
 				this.gotEventForUpdateTime(this.event_being_held);	
-			}
-			else{
+			} else {
 				this.resetEventBeingDragged();
 			}
-			
+				
 			return Mojo.Gesture.CONSUMED_EVENT;
+			}
 		}
 	},
 	
@@ -3810,7 +4499,9 @@ var DayAssistant = Class.create({
 				this.animationValue = value;
 				scrollOffset		*= this.compressed ? value : -value;
 				this.renderDay (this.THIS_DAY, day, false);
-				scrollTo (undefined, Math.round (currentTop + scrollOffset));
+				if(!this.enhancedView || (this.enhancedView && this.dayViewShrink == "none")) {
+					scrollTo (undefined, Math.round (currentTop + scrollOffset));
+				}
 
 			}.bind (this, this.tds [this.THIS_DAY].scroller.mojo.scrollTo)
 
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/edit-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/edit-assistant.js
index 7b4c244..ef336af 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/edit-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/edit-assistant.js
@@ -14,16 +14,20 @@ var EditAssistant = Class.create({
 							{label:$L('Event Location'), items: [{label:$L('Show on map'), command:'map', disabled:false},
 																{label:$L('Get Directions'), command:'direction', disabled:false}] 
 							},
+							{label:$L('Edit event as new'), command:'editAsNewEvent', disabled:false},
+							{label:$L('Save as Template'), command:'saveAsTemplate', disabled:false},
 							{label:$L('Delete event'), command:'deleteEvent', disabled:false},
 							{label:$L('Preferences & Accounts'), command:Mojo.Menu.prefsCmd, disabled: true},
+							{label:$L('Sync event'), command:'forceSyncOnEdit', disabled:false},
 							{label:$L('Help'), command:Mojo.Menu.helpCmd, disabled:false}]
 				  },
 	
-	initialize: function(targetId, targetDate, targetAllDay,calendarId,subject,forceCommit,callBackAfterUpdate) {
+	initialize: function(targetId, targetDate, targetAllDay,calendarId,subject,forceCommit,callBackAfterUpdate, editingTemplate) {
 		this.app				= getAppAssistant();
         this.calendarsManager	= this.app.getCalendarsManager();
-		this.eventManager		= new Calendar.EventManager();
+		this.eventManager		= this.app.getEventManager();
 		this.prefsManager		= this.app.getPrefsManager();
+		//this.tzMgr				= new Calendar.TimezoneManager();
 		this.targetId			= {string: targetId, id: 0};
 		this.targetModifiedTime	= {start: 0, end: 0, id: 0};
 
@@ -40,20 +44,49 @@ var EditAssistant = Class.create({
 		this.forceCommit		= forceCommit;
 		this.callBackAfterUpdate= callBackAfterUpdate;
 		this.formatter			= this.app.getFormatterService();
+		this.editingTemplate = editingTemplate;
 
 		this.updateTargetEvent	= this.updateTargetEvent.bind (this);
+		this.uberCategories = [
+				{'name': 'birthday'}, // Do NOT Localize these
+				{'name': 'car'},
+				{'name': 'doctor'},
+				{'name': 'holiday'},
+				{'name': 'kids'},
+				{'name': 'party'},
+				{'name': 'plane'},
+				{'name': 'vacation'},
+			];
+		this.userUberCats = [];
+		this.catCookie = new Mojo.Model.Cookie("userUberCats");
+		if(this.catCookie) {
+			var catcookie = this.catCookie.get();
+			if(catcookie) {
+				if(catcookie.userubercats && catcookie.userubercats.length > 0){
+					this.userUberCats = catcookie.userubercats;
+				} else {
+					this.userUberCats = this.uberCategories;
+				}
+			} else {
+				this.userUberCats = this.uberCategories;
+			}
+		} else {
+				this.userUberCats = this.uberCategories;
+		}
+		this.imgIcons = new Object();
 	},
 
 	databaseChanged: function() {
-		//Mojo.Log.info("\n\n\nedit: databaseChanged\n\n\n");
-		if (!this.targetEvent._id) { return; }
+		//Mojo.Log.error("\n\n\nedit: databaseChanged\n\n\n" + this.targetEvent._id);
+		if (!(this.targetEvent && this.targetEvent._id)) { return; }
 		this.app.db.getEvent (this.targetEvent._id, this.updateTargetEvent, this.updateTargetEvent);
 	},
 
 	updateTargetEvent: function (response) {
-		if (!response.returnValue) { return; }
-		//console.log ("\n\n\nedit.updateTargetEvent: response: "+JSON.stringify (response)+"\n\ntargetEvent: "+JSON.stringify (this.targetEvent)+"\n\n\n");
-		this.targetEvent._rev = response.results[0].rev;
+		if (!response.returnValue || !response.results[0]) { return; }
+		//console.error ("\n\n\nedit.updateTargetEvent: response: "+JSON.stringify (response.results[0])+"\n\ntargetEvent: "+JSON.stringify (this.targetEvent._id)+"\n\n\n");
+		var _rev = response.results[0].rev || response.results[0]._rev;
+		if(!isNaN(_rev)){this.targetEvent._rev = _rev;}
 	},
 	
 	renderEvent: function(response) {
@@ -108,7 +141,20 @@ var EditAssistant = Class.create({
         if (syncSource == "Local") {
             calType = $L('Palm') + "</span>";
         }
-
+		var menuLen = this.appMenuModel.items.length;
+		//console.error("calType = " + (calType === undefined ? "undef" : calType));
+		if(calType === "undefined\<\/span\>"){
+			//console.error("Unknown cal????" + calid + ", event:" + (this.targetEvent && JSON.stringify(this.targetEvent)));
+			if(this.appMenuModel.items[menuLen-1].command !== "clearUndefCal"){
+				this.appMenuModel.items.push({label:$L('Clear Undefined Events'), command:'clearUndefCal', disabled:false});
+				this.controller.modelChanged(this.appMenuModel);
+			}
+		} else {
+			if(this.appMenuModel.items[menuLen-1].command === "clearUndefCal"){
+				this.appMenuModel.items.pop();
+				this.controller.modelChanged(this.appMenuModel);
+			}
+		}
         var button = Mojo.View.render(
 		{	object	: {text: calType}
 		,	template: "edit/popupButton"
@@ -142,6 +188,7 @@ var EditAssistant = Class.create({
 		this.controller.get('edit_repeatrow').stopObserving(Mojo.Event.tap, this.edit_repeatHander);
 		this.controller.get('edit_alarmrow').stopObserving(Mojo.Event.tap, this.edit_alarmHandler);	
 		this.controller.get('edit_calendartypeParent').stopObserving(Mojo.Event.tap,this.event_calendarTypeHandler );
+		this.controller.get('edit-uber-icon-picker').stopObserving(Mojo.Event.tap, this.edit_userUberCats)
 		
 	},
 	
@@ -210,31 +257,31 @@ var EditAssistant = Class.create({
 		//Mojo.Log.info ("\n\n\trenderGetEventAttendees: attendees:\n\n\t%j\n\n\t%j", attendees, this.targetEvent);
 
 		if (!attendees) { return; }
-
-		if (!attendees.organizer) {
-			for (var attendee, i = 0, j = attendees.length; i < j; ++i) {
-				if ((attendee = attendees[i]).organizer) {
-					//Mojo.Log.info ("\n\n\tattendee: %j\n\n", attendee);
-					attendees.organizer = attendee.name || attendee.commonName;
-					break;
-				}
+		
+		for (var attendee = {}, i = 0, j = attendees.length; i < j; ++i) {
+			if (attendees[i].organizer) {
+				//Mojo.Log.info ("\n\n\tattendee: %j\n\n", attendee);
+				attendee.organizer = attendees[i].name || attendees[i].commonName;
+				break;
 			}
 		}
-
+		
 		this.targetEventAttendees = 
 		{	attendees: attendees
-		,	organizer: attendees.organizer
+		,	organizer: attendee.organizer
 		};
 
 		//Mojo.Log.info ("\n\n\trenderGetEventAttendees: organizer: %j", this.targetEventAttendees.organizer);
 
-		if (this.targetEventAttendees.attendees.length < 2){
+		if (this.targetEventAttendees.attendees.length < 1){
 			return;
 		}
 
 		// Show event's participants row:
-		this.controller.get ("edit_participantrow").show();
-
+		if (this.targetEventAttendees.attendees.length > 1 ){
+			this.controller.get ("edit_participantrow").show();
+		}
+		
 		// Populate the event's organizer's name and total number of participants:
 		this.controller.get ("edit_participants").update (Mojo.View.render
 		({	object	:	{ num		: this.targetEventAttendees.attendees.length
@@ -245,7 +292,7 @@ var EditAssistant = Class.create({
 	},
 
 	renderSetEvent: function (response) {
-		//Mojo.Log.info("*********************edit-assistant:renderSetEvent: ");
+		//Mojo.Log.error("*********************edit-assistant:renderSetEvent: " + this.targetEvent._id);
 		//ARGH for whatever reason, merge/put returns 'id', while find/get return '_id'
 		
 		if(this.funkyRequest){
@@ -262,17 +309,18 @@ var EditAssistant = Class.create({
 		var rev;
 		//if we're coming from a batch
 		if (response.responses) {
-			eventId = response.responses[1].results[0].id;
-			rev = response.responses[1].results[0].rev;
+			eventId = response.responses[1].results[0].id || response.responses[1].results[0]._id;
+			rev = response.responses[1].results[0].rev || response.responses[1].results[0]._rev;
 		}
 		else {
-			eventId = response.results[0].id;
-			rev = response.results[0].rev;
+			eventId = response.results[0].id || response.results[0]._id;
+			rev = response.results[0].rev || response.results[0]._rev;
 		}
 		
 		this.targetEvent._rev	= rev;
 		this.targetEvent._id	= eventId;
 		this.targetEvent.pendingSave =false;
+		this.pendingSave =false;
 
 		if (this.targetEvent.pendingPop) {
 			this.targetEvent.pendingPop = false;
@@ -284,6 +332,7 @@ var EditAssistant = Class.create({
 				//I haven't been able to find what triggers pendingPop being set to true to get here.
 				//It's a little weird, since this is the callback for saving an event, and we're immediately saving
 				//again and calling this same function.
+				//Mojo.Log.error(" pending pop:   " + JSON.stringify(this.targetEvent));
 				this.funkyRequest = this.db.updateEvent (this.targetEvent, this.setEventCallback, this.setEventCallback);
 			}
 			if (this.callBackAfterUpdate !== undefined) {
@@ -300,7 +349,7 @@ var EditAssistant = Class.create({
 	deletedEvent: function(response) {
 		//Mojo.Log.info("edit-assistant:deletedEvent");
 		
-		if (response.returnValue === false) {
+		if (response && response.returnValue === false) {
 			Mojo.Log.error("Failed to delete event: %j", response);
 			this.controller.stageController.popScene();
 			return;
@@ -312,6 +361,18 @@ var EditAssistant = Class.create({
 		
 	},
 	
+	handleClearUndefCal: function(response){
+		Mojo.Log.error("edit-assistant:clearUndefCal response: " + JSON.stringify(response));
+		
+		if (response && response.returnValue === false) {
+			Mojo.Log.error("Failed to delete event: %j", JSON.stringify(response));
+			this.controller.stageController.popScene();
+			return;
+		}
+		this.eventManager.getEvents();
+		this.controller.stageController.popScene();
+	},
+	
 	renderEventInfo: function(response) {
 		
 		this.updateEventInfo(response);
@@ -361,6 +422,67 @@ var EditAssistant = Class.create({
 		this.updateRepeatButton(this.repeatOptions[this.repeatFreqChoice-1],this.repeatFreqChoice);
 	},
 	
+	getUberCatValue: function(note) {
+		var wholeNote = note !== "\n" ? note : "";
+		var last = this.userUberCats.length;
+		if(wholeNote && wholeNote !== "\n" && wholeNote.length > 0) {
+			var result = this.app.getNotesIconParts(wholeNote);
+			if(result && result[1]) {
+				this.uberNotePrefix = result[0];
+				this.uberNoteSuffix = result[2];
+				this.uberNoteCat = result[1];
+				if(this.uberNoteCat) {
+					this.uberHasCat = true;
+					for(var i=0; i < this.userUberCats.length; i++) {
+						if(this.userUberCats[i].name === this.uberNoteCat) {
+							this.uberCatChoice = i;
+							this.updateUberIconPicker(this.uberNoteCat);
+						}
+					}
+				} else {
+					this.uberHasCat = false;
+					this.uberNotePrefix = "";
+					this.uberNoteSuffix = wholeNote;
+					this.uberCatChoice = last;
+				}
+			} else {
+				// no icon= statement, but has note
+				this.uberHasCat = false;
+				this.uberNotePrefix = "";
+				this.uberNoteSuffix = wholeNote;
+				this.uberCatChoice = last;
+			}
+		} else if(wholeNote == "") {
+			// no note
+			this.uberHasCat = false;
+			this.uberNotePrefix = "";
+			this.uberNoteSuffix = wholeNote;
+			this.uberCatChoice = last;
+		}
+	},
+	
+	setUberCatValue: function(value) {
+		if(this.noteModel && this.noteModel.disabled===true) {
+			//read only, do nothing
+			return;
+		}
+		// take a category & add it to the start of the note.
+		if(this.uberHasCat && value) {
+			if(this.uberNotePrefix !== undefined && this.uberNoteSuffix !== undefined) {
+				this.editnotediv.mojo.value = this.uberNotePrefix + "ICON=" + value + ";" + this.uberNoteSuffix;
+				this.targetEvent.note = this.editnotediv.mojo.value;
+				this.targetEvent.dirty =true;
+			}
+		} else if(this.uberHasCat === false && value) {
+			// assigning new cat
+			this.editnotediv.mojo.value = this.uberNotePrefix + "ICON=" + value + ";" + this.uberNoteSuffix;
+			this.targetEvent.note = this.editnotediv.mojo.value;
+			this.targetEvent.dirty =true;
+			this.uberHasCat = true;
+		}
+		this.updateUberIconPicker(value);
+	},
+	
 	renderAlarmStrings: function(response) {
 
 		this.alarmOptions = response;
@@ -371,6 +493,11 @@ var EditAssistant = Class.create({
 	
 	},
 	
+	renderUberCat: function() {
+		if (!this.isReadOnlyEvent)
+			this.controller.get('edit-uber-icon-picker').observe(Mojo.Event.tap, this.edit_userUberCats);	
+	},
+	
 	updateEventInfo: function(info) {
 		Mojo.Log.info("updateEventInfo");
 		var stylingClass = "all-day-single";
@@ -401,6 +528,11 @@ var EditAssistant = Class.create({
 		this.controller.get('edit_alarm').update(button);
 	},
 	
+	updateUberIconPicker: function(option) {
+		var iconImage = 'url(/media/internal/.scrims/ubercalendar/icon-' + option + '.png) center no-repeat';
+		this.controller.get('edit-uber-icon-picker').style.background = iconImage;
+	},
+	
 	repeats:['never','daily','weekday','weekly','custom'], //do not localize
 	
 	
@@ -419,12 +551,18 @@ var EditAssistant = Class.create({
 		
 		// Delete event menu item.  Users can delete new and existing events
 		if (!this.isReadOnlyEvent) {
+			this.appMenuModel.items[3].disabled = false;   
+		} else {
+			this.appMenuModel.items[3].disabled = true; 
+		}
+		// Edit as new event menu item. Users cannot edit new items as a new item
+		if(this.targetEvent._id !== 0) {
 			this.appMenuModel.items[2].disabled = false;
 		}
 		else {
 			this.appMenuModel.items[2].disabled = true;
 		} 
-	
+		
 		// Map location menu item
 		if (!this.targetEvent.location || this.targetEvent.location == "") {
 			this.appMenuModel.items[1].items[0].disabled = true;
@@ -476,6 +614,7 @@ var EditAssistant = Class.create({
 			this.editnotediv.mojo.value = '';
 		}
 		
+		this.getUberCatValue(this.editnotediv.mojo.value);
 		this.controller.modelChanged (this.locationModel);
 		this.controller.modelChanged (this.subjectModel);
 		this.controller.modelChanged (this.noteModel);
@@ -484,6 +623,20 @@ var EditAssistant = Class.create({
 			this.alarm = [new CalendarAlarm()];
 		}
 		
+		if(this.displayCatField){
+			var txt;
+			if(this.targetEvent.categories && this.targetEvent.categories !== ""){
+				txt = this.targetEvent.categories;
+				//this.ucCatModel.disabled = false;
+			} else {
+				txt = "";
+				//this.ucCatModel.disabled = true;
+			}
+			//button = Mojo.View.render({object: {text: txt}, template: "edit/infoButton"});
+			this.ucCatModel.category = txt;
+			this.controller.modelChanged (this.ucCatModel);
+			//this.controller.get('edit_uccat').update(button);
+		}
 		this.updateCalendarTypeInfo(this.targetEvent.calendarId);
 	},
 	
@@ -543,8 +696,13 @@ var EditAssistant = Class.create({
 
 		this.renderAlarmStrings(this.formatter.getAlarmStrings(this.alarms.list));
 			
+		this.renderUberCat();
 		this.updateContentCalendarType(this.targetEvent.calendarId);
-
+		//var uberYear = new Date(this.targetModifiedTime.start).getFullYear();
+		//var timezones = this.tzMgr.timezones;
+		//if(timezones && timezones[uberYear]) {
+		//	this.uberTzIds = timezones[uberYear];
+		//}
 	},
 	
 	updateCalendarTypeInfo:function(calendarId){
@@ -559,7 +717,7 @@ var EditAssistant = Class.create({
 	
 	
 	blurStageBound:function(){
-		//Mojo.Log.info("&&&&&&&&&&&&&&&&&&&&&&&&entered here into blur stage");
+		//Mojo.Log.error("&&&&&&&&&&&&&&&&&&&&&&&&entered here into blur stage" + this.targetEvent._id);
 		//this will send a Mojo.propertychanged on fields
 		//which have changed
 		this.controller.commitChanges();
@@ -567,7 +725,9 @@ var EditAssistant = Class.create({
 		// update selections in the recurrence field
 		//into our recurence model
 		this.updateRecurrenceModel();
-		
+		if(!this.targetEvent._id && this.pendingSave){
+			return;
+		}
 		if (this.checkTargetEventDirty()){
 				Mojo.Log.info("saving the current event");
 				this.saveEvent(undefined, true);	
@@ -575,6 +735,59 @@ var EditAssistant = Class.create({
 	},		
 	
 	setup: function() {
+		// uberC icon picker setup
+		for(var i=0; i<this.userUberCats.length; i++) {
+			var catName = this.userUberCats[i].name;
+			this.imgIcons[catName] = new Image();
+			this.imgIcons[catName].src = "/media/internal/.scrims/ubercalendar/icon-" + catName + ".png";
+		}
+		this.bridgeCallDialer = false;
+		this.displayCatField = false;
+		this.snoozeCookie = new Mojo.Model.Cookie("snoozeCookie");
+		if (this.snoozeCookie) {
+			var snzcookie = this.snoozeCookie.get();
+			if (snzcookie) {
+				if (snzcookie.bridgecalldialer !== undefined) {
+					this.bridgeCallDialer = snzcookie.bridgecalldialer;
+				} else {
+					this.bridgeCallDialer = false;
+				}
+				if (snzcookie.displaycatfield !== undefined) {
+					this.displayCatField = snzcookie.displaycatfield;
+				} else {
+					this.displayCatField = false;
+				}
+			}
+		}
+		if(this.displayCatField){
+			var catDiv = document.createElement('div');
+			catDiv.setAttribute('class', "palm-row");
+			//catDiv.setAttribute('x-mojo-tap-highlight',"momentary");
+			catDiv.setAttribute('id', "edit_ubercategoriesrow");
+			catDiv.innerHTML = '<div class="palm-row-wrapper textfield-group" x-mojo-focus-highlight="true"><div class="title"><div id="edit_uccat" name="edit_uccat" x-mojo-element="TextField"></div></div></div>';
+			//var button = Mojo.View.render({object: {text: ("")}, template: "edit/infoButton"});
+			var partRow = this.controller.get('edit_participantrow');
+			partRow.parentNode.insertBefore(catDiv, partRow);
+			var tfAttrs3 =
+			{	acceptBack		: true
+			,	hintText		: $L("Category:")
+			,	modelProperty	: "category"
+			,	multiline		: false
+			,	textFieldName	: "edit_uccat"
+			,	runTextLinker	: false
+			};
+			this.ucCatModel = { "category" : "" };
+			this.controller.setupWidget ("edit_uccat", tfAttrs3, this.ucCatModel);
+			//this.controller.get('edit_uccat').insert(button);
+		}
+		var editAlarmDiv = this.controller.get("edit_alarmrow");
+		editAlarmDiv.removeChild(editAlarmDiv.firstChild);
+		editAlarmDiv.innerHTML = '<div class="palm-row-wrapper">' +
+				'<table width="100%"><tr>' +
+					'<td width="90%"><div id="alarm-bell-icon" class="icon left reminder"></div><div id="edit_alarm" class="title"></div></td>' +
+					'<td width=10%" height="40px"><div id="edit-uber-icon-picker" x-mojo-tap-highlight="momentary"></div></td>' +
+				'</tr></table></div>';
+		
 		var subjecthinttext=$L('Event name');
         this.alarmType = {
             alarmsTimed: {
@@ -583,18 +796,71 @@ var EditAssistant = Class.create({
 						'-PT5M', // Do Not Localize
 						'-PT10M', //Do not localize
 						'-PT15M', // Do NOT Localize
+						'-PT20M', // Do NOT Localize
+						'-PT25M', // Do NOT Localize
 						'-PT30M', // Do NOT Localize
+						'-PT35M', // Do NOT Localize
+						'-PT45M', // Do NOT Localize
 						'-PT1H', // Do NOT Localize
-						'-P1D' // Do NOT Localize
+						'-PT90M', // Do NOT Localize
+						'-PT2H', // Do NOT Localize
+						'-PT150M', // Do NOT Localize
+						'-PT3H', // Do NOT Localize
+						'-PT220M', // Do NOT Localize
+						'-PT4H', // Do NOT Localize
+						'-PT5H', // Do NOT Localize
+						'-PT6H', // Do NOT Localize
+						'-PT7H', // Do NOT Localize
+						'-PT8H', // Do NOT Localize
+						'-PT10H', // Do NOT Localize
+						'-PT12H', // Do NOT Localize	
+						'-PT18H', // Do NOT Localize
+						'-PT23H', // Do NOT Localize
+						'-P1D', // Do NOT Localize
+						'-PT36H', // Do NOT Localize
+	 					'-P2D', // Do NOT Localize
+						'-PT60H', // Do NOT Localize	
+	 					'-P3D', // Do NOT Localize
+						'-PT84H', // Do NOT Localize
+						'-P4D', // Do NOT Localize
+						'-P5D', // Do NOT Localize
+						'-P6D', // Do NOT Localize			
+	 					'-P1W', // Do NOT Localize
+						'-P2W', // Do NOT Localize
+						'-P3W', // Do NOT Localize
+						'-P4W', // Do NOT Localize
+						'-P8W', // Do NOT Localize
+						'-P12W', // Do NOT Localize
+						'-P16W', // Do NOT Localize
+						'-P20W', // Do NOT Localize
+						'-P24W', // Do NOT Localize
+						'-P52W' // Do NOT Localize
 				]
             },
             alarmsAllday: {
                 list: [ 'none', // Do NOT Localize
 						'-PT0M',// DO NOT Localize
+						'-PT12H',// DO NOT Localize
+						'-PT18H',// DO NOT Localize
 						'-P1D', // Do NOT Localize
+						'-PT36H', // Do NOT Localize
 						'-P2D', // Do NOT Localize
+						'-PT60H', // Do NOT Localize
 						'-P3D', // Do NOT Localize
-						'-P1W'  // Do NOT Localize
+						'-PT84H', // Do NOT Localize
+						'-P4D', // Do NOT Localize
+						'-P5D', // Do NOT Localize
+						'-P6D', // Do NOT Localize			
+						'-P1W',  // Do NOT Localize
+						'-P2W', // Do NOT Localize
+						'-P3W', // Do NOT Localize
+						'-P4W', // Do NOT Localize
+						'-P8W', // Do NOT Localize
+						'-P12W', // Do NOT Localize
+						'-P16W', // Do NOT Localize
+						'-P20W', // Do NOT Localize
+						'-P24W', // Do NOT Localize
+						'-P52W' // Do NOT Localize
 				]
             }
         };
@@ -605,6 +871,14 @@ var EditAssistant = Class.create({
 		//we hide this div initially since we do not know if the participants list
 		//is populated already
 		this.controller.get('edit_participantrow').hide();
+		
+		if(this.bridgeCallDialer){
+			if(this.appMenuModel.items[5].command != 'bridgeCallDialer'){
+				this.appMenuModel.items.splice(5,0,{label:$L('Bridge Call Dialer'), command:'bridgeCallDialer', disabled:false});
+			}
+		} else if(this.appMenuModel.items[5].command == 'bridgeCallDialer'){
+			this.appMenuModel.items.splice(5,1);
+		}
 	
 		this.controller.setupWidget(Mojo.Menu.appMenu, {omitDefaultItems:true}, this.appMenuModel);
 		
@@ -631,6 +905,7 @@ var EditAssistant = Class.create({
 		
 		this.edit_repeatHander = this.handleEditRepeat.bind (this);
 		this.edit_alarmHandler = this.handleEditAlarm.bind (this);
+		this.edit_userUberCats = this.handleUberCatIcon.bind(this);
 
 		var subject = this.eventSubject || '';
 
@@ -655,6 +930,9 @@ var EditAssistant = Class.create({
 		,	multiline		: true
 		};
 		this.locationModel = { "location" : ''};
+		var grpDiv = this.controller.get("edit_location_field").parentNode;
+		grpDiv.setAttribute("id", "uber_edit_location");
+		this.uberLocationIcon = this.controller.get("uber_edit_location");
 		this.controller.setupWidget ("edit_location_field", tfAttrs2, this.locationModel);
 
 		// For notes:
@@ -681,7 +959,7 @@ var EditAssistant = Class.create({
 				start = new Date(this.targetDate);
 				
 				// Clear the minutes, seconds, and ms's.
-				start.set({	minute: 0, second: 0, millisecond: 0 });
+				start.set({second: 0, millisecond: 0 });
 			} else {
 				// Use the current date and time maintained by the calendar... Users will
 				// most likely want to create events on the day they are currently looking
@@ -776,7 +1054,27 @@ var EditAssistant = Class.create({
 		if (this.eventCalendarId) {
 			this.updateContentCalendarType (this.eventCalendarId.sub ("id", ''));
 		}
-	 },
+		if (!this.isReadOnlyEvent) {
+			var Items = [];
+			if(this.bridgeCallDialer){
+				Items = [{items:[{icon: "make-vip", command: 'toggle_participantrow'},{icon:"new-contact", command:'uber_add_participant'}]},
+						{icon: "conversation", command: 'bridgeCallDialer'},
+						{icon: "delete", command:'deleteEvent'}];
+			} else {
+				Items = [{items:[{icon: "make-vip", command: 'toggle_participantrow'},{icon:"new-contact", command:'uber_add_participant'}]},
+						{icon: "delete", command:'deleteEvent'}];
+			}
+			this.controller.setupWidget(Mojo.Menu.commandMenu,
+				this.attrCommand = {
+					menuClass: 'fade'
+				},
+				this.modelCommand = {
+					visible: true,
+					items: Items
+				}
+			);
+		}
+	},
 
 	 setUpWidgetListeners: function(){ 
 		this.controller.get('edit_datetimerow').observe(Mojo.Event.tap,this.edit_infoHandler );
@@ -787,11 +1085,19 @@ var EditAssistant = Class.create({
 		
 		this.controller.get('edit_subject_field').observe(Mojo.Event.propertyChange, this.subjectChanged.bind(this));
 		
+		this.displayCatField && this.controller.get('edit_uccat').observe(Mojo.Event.propertyChange, this.categoryChanged.bind(this));
+		
 		this.controller.get('edit_location_field').observe(Mojo.Event.propertyChange, this.locationChanged.bind(this));
 		
 		this.controller.get('edit_note').observe(Mojo.Event.propertyChange, this.noteChanged.bind(this));
 	
 	 },
+		 
+	 saveAsTemplateCallback: function(response) {
+		// done popscene
+		this.controller.stageController.popScene('edit');
+	 },
+	 
 	 handleCommand: function(event) {
 		if(event.type == Mojo.Event.command) {
 			if(event.command == 'deleteEvent') {
@@ -801,6 +1107,62 @@ var EditAssistant = Class.create({
 			} else if (event.command == Mojo.Menu.prefsCmd) {
 				Event.stop(event);
 				this.controller.stageController.pushScene('prefs');
+			}else if(event.command =='editAsNewEvent'){
+				try {	Event.stop(event);
+					this.targetEvent = Object.clone(this.targetEvent);
+					this.targetId.id = 0;
+					delete this.targetEvent._id;
+					this.targetEvent.parentId = 0;
+					this.renderEvent(this.targetEvent);
+					this.edit_infoHandler();
+				} catch (e) {}
+			} else if(event.command =='clearUndefCal'){
+				Event.stop(event);
+				if(this.targetEvent && this.targetEvent.calendarId){
+					Mojo.Log.error("Clearing undefined calendar subject: " + this.targetEvent.subject + ", calId:" + this.targetEvent.calendarId);
+					this.app.db.clearEventsFromDeletedCalendar(this.targetEvent.calendarId, this.handleClearUndefCal.bind(this));
+				}
+			} else if(event.command =='forceSyncOnEdit'){
+				Event.stop(event);
+				Mojo.Log.error("forcing sync on edit subject: " + this.targetEvent.subject + ", old rev:" + this.targetEvent._rev);
+				this.controller.commitChanges();
+				this.updateRecurrenceModel();
+				this.saveEvent(undefined);
+			} else if(event.command =='saveAsTemplate'){
+				Event.stop(event);
+				var targetEvent = Object.clone(this.targetEvent);
+				targetEvent.parentId = undefined;
+				if(this.editingTemplate !== true) {
+					targetEvent._id = undefined;
+					targetEvent._rev = undefined;
+				}
+				var startTS = Date.UTC(2030,0,1,0,0,0,0);
+				var refTS = new Date(targetEvent.dtstart).clearTime().getTime();
+				var templateStartTS = targetEvent.dtstart;
+				var templateEndTS = targetEvent.dtend;
+				var allDay = targetEvent.allDay;
+				targetEvent.tzId = "Atlantic/Reykjavik";
+				targetEvent.rrule = undefined;
+				targetEvent.exdates = undefined;
+				targetEvent.remoteId = undefined;
+				if(allDay === true) {
+					startTS = new Date(2030,0,1,0,0,0,0).getTime();
+					targetEvent.start = startTS;
+					targetEvent.dtstart = startTS;
+					targetEvent.end = startTS + 23*60*60*1000 + 59*60*1000 + 59*1000;
+					targetEvent.dtend = startTS + 23*60*60*1000 + 59*60*1000 + 59*1000;
+				} else {
+					targetEvent.start = startTS + (templateStartTS - refTS);
+					targetEvent.dtstart = startTS + (templateStartTS - refTS);
+					targetEvent.end = startTS + (templateEndTS - refTS);
+					targetEvent.dtend = startTS + (templateEndTS - refTS);
+				}
+				var eventToUpdate = JSON.parse(JSON.stringify(targetEvent));
+				this.db [this.editingTemplate ? "updateEvent" : "createEvent"]
+				(	eventToUpdate
+				,	this.saveAsTemplateCallback.bind(this)
+				,	this.saveAsTemplateCallback.bind(this)
+				);
 			}else if(event.command =='copy'){
 				//@todo
 			}else if(event.command == Mojo.Menu.helpCmd){
@@ -809,6 +1171,64 @@ var EditAssistant = Class.create({
 				this.app.getAppManagerService().launchMaps (this.controller, this.targetEvent.location, false);
 			}else if(event.command == "direction"){
 				this.app.getAppManagerService().launchMaps (this.controller, this.targetEvent.location, true);
+			}else if(event.command == 'toggle_participantrow'){
+				if(this.targetEventAttendees && this.targetEventAttendees.attendees && this.targetEventAttendees.attendees.length){
+					this.controller.get('edit_participantrow').toggle();
+				} else if(!this.targetEventAttendees){
+					return;
+				}
+			}else if(event.command == 'uber_add_participant'){
+				this.uberAddAttendee = false;
+				if(!this.targetEventAttendees && !this.isReadOnlyEvent && !this.targetEvent.attendees){
+					var organizer = this.calendarsManager.getRawUsername(this.targetEvent.calendarId);
+					Mojo.Log.info("Username: " + organizer);
+					if(organizer){
+						if(this.targetEvent._kind === "com.palm.calendarevent.google:1") {
+							this.targetEvent.attendees = [{commonName: organizer, organizer:true, email: organizer, participationStatus:"NEEDS-ACTION"}];
+						} else {
+							this.targetEvent.attendees = [{commonName: organizer, organizer:true, email: organizer}];
+						}
+						this.renderGetEventAttendees();
+						this.controller.get ("edit_participantrow").show();
+						this.targetEvent.dirty =true;
+						
+					}
+				} else if(this.targetEventAttendees && !this.isReadOnlyEvent && this.targetEventAttendees.attendees && this.targetEventAttendees.attendees.length && this.targetEventAttendees.organizer){
+					var organizer = this.calendarsManager.getRawUsername(this.targetEvent.calendarId);
+					Mojo.Log.info("Username: " + organizer);
+					var attendees = this.targetEvent.attendees, len = attendees.length, eventOrganizer;
+					for(var i=0; i<len;i++){
+						if(attendees[i].organizer){
+							eventOrganizer = attendees[i].email;
+						}
+					}
+					if(organizer === eventOrganizer){
+						if(this.targetEvent._kind === "com.palm.calendarevent.google:1"){
+							for(var i =0; i<len;i++){
+								if(attendees[i].organizer){
+									attendees[i].participationStatus = "NEEDS-ACTION";
+								}
+							}
+						}
+						this.uberAddAttendee = true;
+						this.controller.stageController.pushScene(
+							{ appId :'com.palm.app.contacts', name: 'list' },
+							{ mode: 'picker', message: $L("Pick a contact")}
+							);
+					}
+				}
+			} else if(event.command == 'bridgeCallDialer') {
+				this.controller.serviceRequest("palm://com.palm.applicationManager", {
+					method: 'launch',
+					parameters: {
+						id: "com.ahub.bridgecalldialer",
+						params: {
+							subject: this.targetEvent.subject,
+							location: this.targetEvent.location,
+							note: this.targetEvent.note
+						}
+					}
+				});
 			}
 		}
 		else if(event.type == Mojo.Event.commandEnable && event.command == Mojo.Menu.prefsCmd) {
@@ -835,9 +1255,14 @@ var EditAssistant = Class.create({
 		
 		if (e.value !== null) {
 			this.targetEvent.note = e.value;
-		}
-		else {
+			if(e.value == "\n") {
+				this.getUberCatValue("");
+			} else {
+				this.getUberCatValue(e.value);
+			}
+		} else {
 			this.targetEvent.note = "";
+			this.getUberCatValue("");
 		}		
 	},
 	
@@ -857,11 +1282,34 @@ var EditAssistant = Class.create({
 		}		
 	},
 	
+	categoryChanged: function(e){
+		if(this.targetEvent.categories != e.value){
+			this.targetEvent.dirty = true;
+		}
+		
+		if(e.value !== null){
+			var temp, Arr = [], txt, cats=[];
+			txt = e.value;
+			Arr = txt.split(",");
+			for(var i=0;i<Arr.length;i++){
+				temp = Arr[i];
+				temp = temp.replace(/^\s*/,"");
+				temp = temp.replace(/\s*$/,"");
+				if(temp && temp !== ""){
+					cats.push(temp);
+				}
+			}
+			this.targetEvent.categories = cats
+		} else {
+			this.targetEvent.categories = [];
+		}
+	},
+	
 	locationChanged: function(e) {
 		this.targetEvent.dirty =true;
 		Mojo.Log.info("edit-assistant:locationChanged");
 		
-		 if (e.value !== null && e.value!="") {
+		 if (e.value !== null && e.value!="" && e.value !="\r" && e.value != "\n" && e.value != "\n\r") {
 			this.targetEvent.location = e.value;
 			this.appMenuModel.items[1].items[0].disabled = false;
 			this.appMenuModel.items[1].items[1].disabled = false;
@@ -876,9 +1324,41 @@ var EditAssistant = Class.create({
 		 
 			
 	},
-  
+	
+	saveThisAndFuture: function() {
+		//reset oldEvent change end date, add exception, new event
+		if(this.targetEvent.dtstart === this.targetModifiedTime.start) {
+			//this is the first event so, this and future is the whole series
+			this.saveEvent(undefined);
+			return;
+		}
+		this.oldEvent.rrule.until = (new Date(this.targetModifiedTime.end)).addDays(-1).getTime();
+		this.oldEvent.isRecurringForever = false;
+		if(this.oldEvent.rrule.count) {this.oldEvent.rrule.count = undefined;}
+		//this.app.getRecurrenceRule().addException(this.oldEvent, new Date(this.targetModifiedTime.start));
+		var eventToUpdate = JSON.parse(JSON.stringify(this.oldEvent));
+		delete this.targetEvent._id;
+		this.targetId.id = 0;
+		this.db ["updateEvent"]
+				(	eventToUpdate
+				,	this.ThisAndFutureCB.bind(this)
+				,	function(response){Mojo.Log.error("failed this and future" + response.errorText)}
+		);
+	},
+	
+	ThisAndFutureCB: function () {
+		this.targetEvent._rev = undefined;
+		this.targetEvent.parentId = undefined;
+		this.targetEvent.remoteId = undefined;
+		this.targetEvent.dtstart = this.targetModifiedTime.start;
+		this.targetEvent.dtend = this.targetModifiedTime.end;
+		this.setupEvent();
+		this.oldEvent = null;
+		this.saveEvent(undefined);
+	},
+	
 	saveEvent: function(parentId,inCardMode){
-		//Mojo.Log.info("edit-assistant:saveEvent");
+		//Mojo.Log.error("edit-assistant:saveEvent");
 		if(this.targetEvent.subject=="" || this.targetEvent.subject === null) {
 			if (this.targetEvent._id) {
 				this.targetEvent.subject = $L("Event name");
@@ -932,6 +1412,7 @@ var EditAssistant = Class.create({
 				);	
 			}
 	        else{
+				//Mojo.Log.error(" saveEvent :   " + (this.targetEvent._id ? "updateEvent " : "createEvent ") + JSON.stringify(this.targetEvent));
 				this.db [this.targetEvent._id ? "updateEvent" : "createEvent"]
 				(	this.targetEvent
 				,	this.setEventCallback
@@ -964,20 +1445,29 @@ var EditAssistant = Class.create({
 			this.controller.get('edit_repeatrow').stopObserving(Mojo.Event.tap, this.edit_repeatHander);
 			this.controller.get('edit_alarmrow').stopObserving(Mojo.Event.tap, this.edit_alarmHandler);
 			this.controller.get('edit_calendartypeParent').stopObserving(Mojo.Event.tap, this.event_calendarTypeHandler);
+			this.controller.get('edit-uber-icon-picker').stopObserving(Mojo.Event.tap, this.edit_userUberCats)
 		}
 	
 		this.controller.get('edit_participantrow').stopObserving(Mojo.Event.tap,this.edit_participantHandler);
 
 		this.controller.get('edit_subject_field').stopObserving(Mojo.Event.propertyChange, this.subjectChanged);
+		this.displayCatField && this.controller.get('edit_uccat').stopObserving(Mojo.Event.propertyChange, this.categoryChanged);
 		this.controller.get('edit_location_field').stopObserving(Mojo.Event.propertyChange, this.locationChanged);
 		this.controller.get('edit_note').stopObserving(Mojo.Event.propertyChange, this.noteChanged);
 	},
   
-	activate: function() {
+	activate: function(peoplePicResp) {
 		this.controller.listen(this.controller.document, Mojo.Event.stageDeactivate, this.blurStage);
 		if (this.targetEvent !== undefined) {
 			this.setupEvent();
 		}
+		this.uberLocationHandler = this.handleUberLocation.bind(this);
+		this.uberLocationHoldHandler = this.handleHoldUberLocation.bind(this);
+		this.controller.listen(this.uberLocationIcon, Mojo.Event.tap, this.uberLocationHandler);
+		this.controller.listen(this.uberLocationIcon, Mojo.Event.hold, this.uberLocationHoldHandler);
+		if(peoplePicResp !== undefined) {
+			this.handleUberPicker(peoplePicResp);
+		}
 	},
 
 	deactivate: function() {
@@ -985,6 +1475,8 @@ var EditAssistant = Class.create({
 			this.blurStage();	
 		}		
 		this.controller.stopListening(this.controller.document, Mojo.Event.stageDeactivate, this.blurStage);
+		this.controller.stopListening(this.uberLocationIcon, Mojo.Event.tap, this.uberLocationHandler);
+		this.controller.stopListening(this.uberLocationIcon, Mojo.Event.hold, this.uberLocationHoldHandler);
 	},
 	/*
 	//Not relevant anymore - cleanup
@@ -1012,6 +1504,7 @@ var EditAssistant = Class.create({
 				this.targetEvent.rrule = 
 				{	freq: "DAILY"						// Do NOT Localize
 				,	interval: 1
+				,	rules: []
 				};				
 				break;
 				
@@ -1168,6 +1661,7 @@ var EditAssistant = Class.create({
 	handleEditInfo: function(e){	
 		//this.updateEventModel();
 		this.updateRecurrenceModel();
+		if(!this.targetEvent._id){this.pendingSave = true;}
 		this.controller.stageController.pushScene(
 			'datetime', 
 			this.targetEvent,
@@ -1182,6 +1676,354 @@ var EditAssistant = Class.create({
 		
 	},	
 	
+	handleUberLocation: function(e) {
+		//tap on map icon
+		
+		if(e.srcElement.className === "icon left room"){
+			//Mojo.Log.error(" location icon");
+			if(this.targetEvent.location != undefined && this.targetEvent.location !== "") {
+				var items=[
+					{label: $L("Map"), command: 0},
+					{label: $L("Directions"), command: 1},
+					{label: $L("Insert address"), command: 2},
+					{label: $L("Clear location"), command: 3},
+					{label: $L("Advanced copy"), command: 4}
+					];
+					
+				this.controller.popupSubmenu({
+					onChoose: this.uberLocationChoose,
+					items: items,
+					placeNear: this.controller.get('edit_location_field')
+					});
+				
+			} else if(this.targetEvent.location === undefined || this.targetEvent.location === "") {
+				var items=[
+					{label: $L("Map"), command: 0},
+					{label: $L("Insert address"), command: 2},
+					{label: $L("Advanced copy"), command: 4}
+					];
+				
+				this.controller.popupSubmenu({
+					onChoose: this.uberLocationChoose,
+					items: items,
+					placeNear: this.controller.get('edit_location_field')
+					});
+			}
+		}
+	},
+	
+	uberAdvCopyDone: function (array){
+		if(this.noteModel && this.noteModel.disabled===true) {
+			//read only, do nothing
+			return;
+		}
+		var options = [], len, obj, txt, field, old;
+		options = array;
+		len = options && options.length;
+		if(len && len > 0){
+			for(var i =0; i< len;i++){
+				obj = {};
+				replace = false;
+				txt = "";
+				field = "";
+				old = "";
+				obj = options[i];
+				replace = !!obj.replace;
+				txt = obj.data || "";
+				field = obj.field || "";
+				switch(field){
+					case "note":
+						if(replace && txt){
+							this.editnotediv.mojo.value = txt;
+							this.targetEvent.note = this.editnotediv.mojo.value;
+							this.targetEvent.dirty =true;
+							this.controller.modelChanged (this.noteModel);
+							this.getUberCatValue(this.editnotediv.mojo.value);
+						} else if(txt){
+							old = this.editnotediv.mojo.value;
+							this.editnotediv.mojo.value = old + " " + txt;
+							this.targetEvent.note = this.editnotediv.mojo.value;
+							this.targetEvent.dirty =true;
+							this.controller.modelChanged (this.noteModel);
+							this.getUberCatValue(this.editnotediv.mojo.value);
+						}
+						break;
+						
+					case "loc":
+						if(replace && txt){
+							this.locationModel.location = txt;
+							this.targetEvent.location = txt;
+							this.targetEvent.dirty =true;
+							this.controller.modelChanged(this.locationModel);
+						} else if(txt){
+							old = this.locationModel.location !== "" ? this.locationModel.location: "";
+							this.targetEvent.location =(old + " " + txt);
+							this.locationModel.location = old + " " + txt
+							this.targetEvent.dirty =true;
+							this.controller.modelChanged(this.locationModel);
+						}
+						break;
+					
+					case "subject":
+						if(replace && txt){
+							this.targetEvent.subject = txt;
+							this.subjectModel.subject = this.targetEvent.subject;
+							this.targetEvent.dirty =true;
+							this.controller.modelChanged (this.subjectModel);
+						} else if(txt){
+							old = this.targetEvent.subject;
+							this.targetEvent.subject = old + " " + txt;
+							this.subjectModel.subject = this.targetEvent.subject;
+							this.targetEvent.dirty =true;
+							this.controller.modelChanged (this.subjectModel);
+						}
+						break;
+					default:
+					break;
+				}
+			}
+		}
+	},
+	
+	uberLocationChoose: function(val) {
+		var value = parseInt(val);
+		this.advancedCopy = false;
+		this.uberEditLoc = false;
+		if(val !== undefined) {
+			switch (value) {
+				case 0: //map
+					this.app.getAppManagerService().launchMaps(this.controller,this.targetEvent.location,false);
+					break;
+					
+				case 1: //directions
+					this.app.getAppManagerService().launchMaps(this.controller,this.targetEvent.location,true);
+					break;
+				
+				case 4:
+					this.advancedCopy = true;
+				case 2: //insert address
+					this.uberEditLoc = true;
+					this.controller.stageController.pushScene(
+					{ appId :'com.palm.app.contacts', name: 'list' },
+					{ mode: 'picker', message: $L("Pick a contact")}
+					);
+					break;
+					
+				case 3: //clear
+					this.locationModel.location = "";
+					this.targetEvent.location = "";
+					this.controller.modelChanged(this.locationModel);
+					this.targetEvent.dirty =true;
+					break;
+					
+				default: //cancel
+					break;
+			}
+		}
+	},
+	
+	handleHoldUberLocation: function(e) {
+		Event.stop(e);
+		if(e.srcElement.className === "icon left room"){
+			//Mojo.Log.error("hold location icon");
+			if(this.targetEvent.location != undefined && this.targetEvent.location !== "") {
+				this.app.getAppManagerService().launchMaps(this.controller,this.targetEvent.location,false);
+			} else if(this.targetEvent.location === undefined || this.targetEvent.location === "") {
+				this.controller.stageController.pushScene(
+					{ appId :'com.palm.app.contacts', name: 'list' },
+					{ mode: 'picker', message: $L("Pick a contact")}
+				);
+			}
+		}
+	},
+	
+	handleUberPicker: function(pers) {
+		//Mojo.Log.error(" people pick:   " + JSON.stringify(pers));
+		if(pers && !this.uberAddAttendee && this.advancedCopy){
+			this.controller.showDialog({
+            template: 'shared/uber-timezone',
+            assistant: new UberAdvancedCopy(this.controller, this, pers),
+			});
+			return;
+		} else if(pers && pers && pers.name && pers.addresses && !this.uberAddAttendee) {
+			var adds = pers.addresses;
+			var lname = pers.name.familyName || "";
+			var fname = pers.name.givenName || "";
+			this.uberAdds = [];
+			var prevLoc = this.locationModel.location !== "" ? this.locationModel.location + " ": "";
+			if(adds && adds.length && adds.length > 0) {
+				if(adds.length === 1) {
+					if(adds[0].streetAddress || adds[0].locality || adds[0].country || adds[0].region || adds[0].postalCode) {
+						var txt = adds[0].streetAddress !== "" ? adds[0].streetAddress: "";
+						txt += adds[0].locality ? (txt !== "" ? ", " : "") + adds[0].locality : "";
+						txt += adds[0].region ? (txt !== "" ? ", " : "") + adds[0].region : "";
+						txt += adds[0].postalCode ? (txt !== "" ? ", " : "")+adds[0].postalCode : "";
+						txt += adds[0].country ? (txt !== "" ? ", " : "") + adds[0].country  : "";
+						
+						this.locationModel.location = this.uberEditLoc === true ? prevLoc + txt : txt;
+						this.targetEvent.location = this.uberEditLoc === true ? prevLoc + txt : txt;
+						this.targetEvent.dirty =true;
+						this.controller.modelChanged(this.locationModel);
+						return;
+					}
+				} else {// have more than one address, setup choices
+					for(var i=0; i < adds.length; i++) {
+						if(adds[i].type != undefined ) { 
+							if(adds[i].streetAddress || adds[i].locality || adds[i].country || adds[i].region || adds[i].postalCode) {
+								var txt = adds[i].streetAddress ? adds[i].streetAddress : "";
+								txt += adds[i].locality ? (txt !== "" ? ", " : "") + adds[i].locality : "";
+								txt += adds[i].region ? (txt !== "" ? ", " : "") + adds[i].region : "";
+								txt += adds[i].postalCode ? (txt !== "" ? ", " : "") + adds[i].postalCode : "";
+								txt += adds[i].country ? (txt !== "" ? ", " : "") + adds[i].country  : "";
+							}
+							
+							this.uberAdds.push({
+								label: adds[i].type,
+								address: txt
+							});
+						}
+					}
+				}
+				// double check more than one address, choose
+				var len = this.uberAdds.length;
+				if(len === 1) {
+					var txt = this.uberEditLoc === true ? prevLoc + this.uberAdds[0].address : this.uberAdds[0].address;
+					this.locationModel.location = txt;
+					this.targetEvent.location = txt;
+					this.targetEvent.dirty =true;
+					this.controller.modelChanged(this.locationModel);
+					return;
+				} else if(len > 1) {
+					var addChoices = [];
+					for(var i=0; i < len; i++) {
+						var loc;
+						switch(this.uberAdds[i].label){
+							case "type_home":
+							loc = $L("HOME");
+							break;
+							
+							case "type_work":
+							loc = $L("WORK");
+							break;
+							
+							case "type_other":
+							default:
+							loc = $L("OTHER");
+							break;
+						}
+						
+						addChoices.push( {
+							label: loc + ":  " + this.uberAdds[i].address.substring(0, 20),
+							value: i
+						});
+					}
+					//add a cancel
+					addChoices.push( {label: $L("Cancel"), value: -1, type: 'dismiss'} );
+					
+					this.controller.showAlertDialog({
+							title: fname + lname !== "" ? fname + " " + lname : $L("Multiple Addresses"),
+							message: $L("Choose an address"),
+							choices: addChoices,
+							onChoose: function(value) {
+								if(value !== undefined && value !== "" && value != -1) {
+									var txt = this.uberEditLoc === true ? prevLoc + this.uberAdds[value].address : this.uberAdds[value].address;
+									this.locationModel.location = txt;
+									this.targetEvent.location = txt;
+									this.targetEvent.dirty =true;
+									this.controller.modelChanged(this.locationModel);
+								} else{return;}
+								return;
+							}.bind(this)
+						});
+				}
+			}
+			//if we got this far the addresses were empty or cancelled
+			return;
+		} else if(pers && pers && pers.name && pers.emails && this.uberAddAttendee) {
+			var emails = pers.emails;
+			var lname = pers.name.familyName || "";
+			var fname = pers.name.givenName || "";
+			if(fname && lname) {
+				var commonName = fname + " " + lname;
+			} else if(!fname && lname) {
+				var commonName = lname;
+			} else if(fname && !lname) {
+				var commonName = fname;
+			} else if(!fname && !lname) {
+				var commonName = ""
+			}
+			this.uberEmails = [];
+			if(emails && emails.length && emails.length > 0) {
+				if(emails.length === 1) {
+					commonName = commonName ? commonName : emails[0].value;
+					this.targetEvent.attendees.push({commonName: commonName, email: emails[0].value, organizer: false});
+					this.renderGetEventAttendees();
+					this.targetEvent.dirty =true;
+				} else if(emails.length > 1) {
+					for(var i=0; i < emails.length; i++){
+						if(emails[i].type != undefined){
+							this.uberEmails.push({
+								label: emails[i].type,
+								email: emails[i].value
+							});
+						}
+					}
+					var len = this.uberEmails.length;
+					if(len === 1) {
+						commonName = commonName ? commonName : this.uberEmails[0].email;
+						this.targetEvent.attendees.push({commonName: commonName, email: this.uberEmails[0].email, organizer: false});
+						this.renderGetEventAttendees();
+						this.targetEvent.dirty =true;
+					} else if(len > 1){
+						var addChoices = [];
+						for(var i=0; i < len; i++) {
+							var loc;
+							switch(this.uberEmails[i].label){
+								case "type_home":
+								loc = $L("HOME");
+								break;
+								
+								case "type_work":
+								loc = $L("WORK");
+								break;
+								
+								case "type_other":
+								default:
+								loc = $L("OTHER");
+								break;
+							}
+							
+							addChoices.push( {
+								label: loc + ":  " + this.uberEmails[i].email,
+								value: i
+							});
+						}
+						//add a cancel
+						addChoices.push( {label: $L("Cancel"), value: -1, type: 'dismiss'} );
+						
+						this.controller.showAlertDialog({
+								title: fname + lname !== "" ? fname + " " + lname : $L("Multiple Email Addresses"),
+								message: $L("Choose an email"),
+								choices: addChoices,
+								onChoose: function(value) {
+									if(value !== undefined && value !== "" && value != -1) {
+										var eMail = this.uberEmails[value].email;
+										commonName = commonName ? commonName : eMail;
+										this.targetEvent.attendees.push({commonName: commonName, email: eMail, organizer: false});
+										this.renderGetEventAttendees();
+										this.targetEvent.dirty =true;
+									} else {return;}
+									return;
+								}.bind(this)
+						});
+					}
+				}
+			}
+			//if we got this far the addresses were empty or cancelled
+			return;
+		}
+	},	
+	
 	handleEditRepeat: function(e){
 		Mojo.Log.info("edit-assistant:handleEditRepeat");
 		//create popup menu
@@ -1259,6 +2101,7 @@ var EditAssistant = Class.create({
 			//this.updateEventModel();
 			this.updateRecurrenceModel();
 			//Mojo.Log.info('pushing the repeat scene');
+			if(!this.targetEvent._id){this.pendingSave = true;}
 			this.controller.stageController.pushScene(
 				'repeat', 
 				this.targetEvent, 
@@ -1272,6 +2115,56 @@ var EditAssistant = Class.create({
 		}
 	},
 
+	handleUberCatIcon: function(e) {
+		Event.stop(e);
+		// taps on icon picker
+		var items = [];
+		for (var i=0;i<this.userUberCats.length; i++) {
+			var catName = this.userUberCats[i].name;
+			var template = new Template("#{val}");
+			var templateModel = {};
+			templateModel.val = $L(catName);
+			var catlabel = template.evaluate(templateModel);
+			items.push( {
+				iconPath:'/media/internal/.scrims/ubercalendar/icon-' + catName + '.png',
+				label: catlabel,
+				command: i
+			});
+		}
+		var last = this.userUberCats.length;
+		items.push( {label: $L("No category"), command: last});
+		
+		this.controller.popupSubmenu({
+				onChoose: this.uberCatChoose,
+				toggleCmd:this.uberCatChoice,
+				items: items,
+				placeNear: this.controller.get('edit-uber-icon-picker')
+			});
+	},
+	
+	uberCatChoose: function(val) {
+		// picked a cat
+		var value = parseInt(val, 10);
+		var last = this.userUberCats.length;
+		this.uberCatChoice = value;
+		if(val !== undefined && value !== last) {
+			if(!this.uberNoteCat || (this.uberNoteCat && this.uberNoteCat !== this.userUberCats[this.uberCatChoice].name)) {
+				this.uberNoteCat = this.userUberCats[this.uberCatChoice].name;
+				this.setUberCatValue(this.userUberCats[this.uberCatChoice].name);
+			}
+		} else if(val !== undefined && value === last) {
+			if(!this.uberNoteCat && !this.uberHasCat) { // no previous icon chose no icon
+				return;
+			} else if(this.uberHasCat && this.uberNoteCat !== undefined) { // had icon=, match or not
+				this.editnotediv.mojo.value = this.uberNotePrefix + this.uberNoteSuffix;
+				this.targetEvent.note = this.editnotediv.mojo.value;
+				this.targetEvent.dirty =true;
+				var iconImage = 'url(/usr/palm/applications/com.palm.app.calendar/images/day-event-info.png) center no-repeat';
+				this.controller.get('edit-uber-icon-picker').style.background = iconImage;
+			}
+		}
+	},
+	
 	handleEditAlarm: function(e){
 		Mojo.Log.info("edit-assistant:handleEditAlarm");
 		var items=[];
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/month-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/month-assistant.js
index f20a9ad..bcc627b 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/month-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/month-assistant.js
@@ -15,9 +15,12 @@ var MonthAssistant = Class.create({
 					label:$L('Calendar'), 
 					items: [
 						Mojo.Menu.editItem,
+						{label:$L('New'), items: [{label:$L('Event'), shortcut:'n', command:'newtimed', disabled:false},
+	                								{label:$L('All day event'), shortcut:'d', command:'newallday', disabled:false}] 
+						},
 						{label:$L('Sync Now'), command:'sync', id: 0},
 						{label:$L('Show today'), command:'today', id: 1},
-						{label:$L('Jump to...'), command:'jumpto', id: 2},
+						{label:$L('Jump to...')+ '/' + $L("Templates"), command:'jumpto', id: 2},
 						{label:$L('Missed reminders...'), command:'reminders', id: 3},
 						{label:$L('Preferences & Accounts'), command:Mojo.Menu.prefsCmd, checkEnabled: true},
 						{label:$L('Help'), command:Mojo.Menu.helpCmd, disabled:false}
@@ -27,7 +30,9 @@ var MonthAssistant = Class.create({
 		this.app				= getAppAssistant();
 		this.calendarsManager	= this.app.getCalendarsManager();
 		this.prefsManager		= this.app.getPrefsManager();
-		this.eventManager		= new Calendar.EventManager();
+		this.eventManager		= this.app.getEventManager();
+		this.layoutManager		= new LayoutManager();
+		this.busyFreeManager	= new BusyFreeManager();
 
 		// Setup callbacks. Bind "this" references only once, at initialization:
 		this.databaseChanged		=
@@ -35,9 +40,124 @@ var MonthAssistant = Class.create({
 		this.loadBusyTimesBatch		= this.loadBusyTimesBatch	.bind (this);
 		this.renderBusyTimes		= this.renderBusyTimes		.bind (this);
 
+		// uber vars
+		this.enhancedView = false;
+		this.monthAllDayColors = false;
+		this.weekNumberTitle = true;
+		this.updateFromScroll = false;
+		this.weekNumOffset = 0;
+		this.weekModulusNum = 1;
+		this.useISOweekNum = false;
+		this.prefStartDoW = 0;
+		this.monthViewIcons = true;
+		this.monthVerticalIcons = false;
+		this.monthUseBusy = true;
+		this.uberBackGesture = 'last';
+		this.ucGroupsFirst = false;
+		this.useAgendaZ = false;
+		this.monthCookie = new Mojo.Model.Cookie('MonthViewEnhanced');
+		if (this.monthCookie) {
+			var monthcookie = this.monthCookie.get();
+			if(monthcookie) {
+				if(monthcookie.monthalldaycolors !== undefined) {
+					this.monthAllDayColors = monthcookie.monthalldaycolors;
+				} else {
+					this.monthAllDayColors = false;
+				}
+				if(monthcookie.monthviewenhanced !== undefined) {
+					this.enhancedView = monthcookie.monthviewenhanced;
+				} else {
+					this.enhancedView = false;
+				}
+				if(monthcookie.weeknumoffset !== undefined) {
+						this.weekNumOffset = parseInt(monthcookie.weeknumoffset, 10);
+				} else {
+						this.weekNumOffset = 0;
+				}
+				if(monthcookie.weekmodulusnum !== undefined) {
+						this.weekModulusNum = parseInt(monthcookie.weekmodulusnum, 10);
+				} else {
+						this.weekModulusNum = 1;
+				}
+				if(monthcookie.weeknumbertitle !== undefined) {
+						this.weekNumberTitle = monthcookie.weeknumbertitle;
+				} else {
+						this.weekNumberTitle = true;
+				}
+				if(monthcookie.monthviewicons !== undefined) {
+						this.monthViewIcons = monthcookie.monthviewicons;
+				} else {
+						this.monthViewIcons = true;
+				}
+				if(monthcookie.monthverticalicons !== undefined) {
+						this.monthVerticalIcons = monthcookie.monthverticalicons;
+				} else {
+						this.monthVerticalIcons = false;
+				}
+				if(monthcookie.uberbackgesture !== undefined) {
+						this.uberBackGesture = monthcookie.uberbackgesture;
+				} else {
+						this.uberBackGesture = 'last';
+				}
+				if (monthcookie.useisoweeknum !== undefined) {
+					this.useISOweekNum = monthcookie.useisoweeknum;
+				} else {
+					this.useISOweekNum = false;
+				}
+				if (monthcookie.prefsstartofweek !== undefined) {
+					this.prefStartDoW = parseInt(monthcookie.prefsstartofweek, 10) -1;
+				} else {
+					this.prefStartDoW = 0;
+				}
+				if (monthcookie.monthusebusy !== undefined) {
+					this.monthUseBusy = monthcookie.monthusebusy;
+				} else {
+					this.monthUseBusy = true;
+				}
+				if (monthcookie.ucgroupsfirst !== undefined) {
+					this.ucGroupsFirst = monthcookie.ucgroupsfirst;
+				} else {
+					this.ucGroupsFirst = false;
+				}
+				if (monthcookie.useagendaz !== undefined) {
+					this.useAgendaZ = monthcookie.useagendaz;
+				} else {
+					this.useAgendaZ = false;
+				}
+			}
+		}
+		
 ///*DEBUG:*/	this.timing = { launch: 0, mgr: 0 };
 	},
 
+	colors: {"cal-color-blue": "rgba(145,211,234,0.4)",
+		"cal-color-green": "rgba(140,240,140,0.4)",
+		"cal-color-yellow": "rgba(232,227,124,0.4)",
+		"cal-color-gray": "rgba(194,194,194,0.4)",
+		"cal-color-orange": "rgba(251,180,116,0.4)",
+		"cal-color-pink": "rgba(245,156,188,0.4)",
+		"cal-color-red": "rgba(255,151,151,0.4)",
+		"cal-color-purple": "rgba(217,183,255,0.4)",
+		"cal-color-teal": "rgba(114,223,210,0.4)"},
+
+	placements: {"0": "top left",
+		"1": "top center",
+		"2": "top right",
+		"3": "center left",
+		"4": "center right",
+		"5": "bottom left",
+		"6": "bottom center",
+		"7": "bottom right"},
+	
+	verticalplacements: {"0": "top left",
+		"1": "center left",
+		"2": "bottom left",
+		"3": "top center",
+		"4": "bottom center",
+		"5": "top right",
+		"6": "center right",
+		"7": "bottom right"},
+	
 	loadBusyTimes: function (delay) {
 ///*DEBUG:*/	this.timing.mgr = -new Date();
 
@@ -51,15 +171,24 @@ var MonthAssistant = Class.create({
 		,	end		= new Date (this.lastDay);
 
 		end.set ({ hour: 23, minute: 59, second: 59, millisecond: 0 });
+		
+		var calendarId = this.calendarsManager.getCurrentCal();
+		// check for UC groups
+		if(this.uberGroups && this.uberGroups.inUse === true && this.ucGroupIdx !== undefined) {
+			var idx = this.ucGroupIdx;
+			if(idx !== undefined && this.userUberCalGroups && this.userUberCalGroups.length > 0 && this.userUberCalGroups[idx].includes && this.userUberCalGroups[idx].includes.length >0) {
+				var ucIncludes = this.userUberCalGroups[idx].includes;
+				calendarId = 'all';
+			}
+		}
 
 		var range =
 		{	start		: start	.addWeeks(6)	// Limit range to between the first
 		,	end			: end	.addWeeks(-6)	// and last weeks displayed instead of full 18-weeks. 
 		,	tzId		: this.app.getTimezoneName()
-		,	excludeList	: this.calendarsManager.getExcludeFromAllList()		
+		,	excludeList	: this.app.buildUberExcludes(ucIncludes)		
 		};
 
-		var calendarId = this.calendarsManager.getCurrentCal();
 		if (calendarId != "all") {
 			range.calendarId = calendarId;
 		}
@@ -94,7 +223,7 @@ var MonthAssistant = Class.create({
 		}
 
 		
-		range.end = this.loadBusyTimesBatch.start.addWeeks(3).addDays(1).getTime();	// Set range end 3 weeks after start.
+		range.end = this.loadBusyTimesBatch.start.addWeeks(6).addDays(1).getTime();	// Set range end 3 weeks after start.
 																					// Add one extra day because monthview renders one day less than the range requested
 																					//i.e., string length of 35 = render 34 days of info
 
@@ -102,9 +231,48 @@ var MonthAssistant = Class.create({
 			range.end = this.loadBusyTimesBatch.end;						// reset to range's end.
 		}
 
+		this.eventManager.getEventsInRange (range, this.getEventsCallback.bind (this, range.excludeList));
+		
 		var callback = this.onLoadBusyTimesBatch.bind (this, range);
 		this.eventManager.getBusyDays (range, callback);					// Request next batch of busy times.
 	},
+	
+	getUCGroupsProps: function() {
+		// check for UC groups
+		if(this.uberGroups && this.uberGroups.inUse === true && this.userUberCalGroups && this.userUberCalGroups.length > 0 && this.userUberCalGroups[0].rId !== undefined) {
+			var rID = this.uberGroups.rId;
+			if(rID) {
+				var len = this.userUberCalGroups.length;
+				var idx;
+				for(var i=0; i < len; i++){
+					if(rID === this.userUberCalGroups[i].rId) {
+						var idx = i;
+						break;
+					}
+				}
+				if(idx !== undefined && this.userUberCalGroups[idx].includes && this.userUberCalGroups[idx].includes.length >0) {
+					this.ucGroupIdx = idx;
+				}
+			}
+		} else {
+			this.ucGroupIdx = undefined;
+		}
+	},
+	
+	getEventsCallback: function (excludedCalendars, response) {
+		if (!response.days) { return null; }
+		var	layout	= this.layoutManager
+		,	mgr		= this.busyFreeManager;
+
+		response.days.forEach (function (day){
+			layout.positionEvents (day.events);
+			layout.positionEvents (day.hiddenEvents, true);
+			day.busyTimes = mgr.getBusyTimes (day.events.concat (day.hiddenEvents), excludedCalendars);
+			day.freeTimes = mgr.getFreeTimes (day.busyTimes);
+		});
+		
+		this.fullEvts = response.days;
+	},
 
 	onLoadBusyTimesBatch: function (range, busyTimeInfo) {											//console.log ("\n\n\nonLoadBusyTimesBatch:\n\targs: "+JSON.stringify(arguments)+"\n\n\n");
 		//	Possible Improvements:
@@ -128,13 +296,44 @@ var MonthAssistant = Class.create({
 	
 	buildMonthTitle: function() 
 	{
+		var wn = new Date(this.monthDate);
+		wn.setDate(1);
+		var year = wn.getFullYear();
+		var month = wn.getMonth();
+		var maxwkn = this.useISOweekNum === true ? new Date((month != 0 ? year : year -1), 11, 28).getISO8601Week() : new Date((month != 0 ? year : year -1), 11, 28).getWeekOfYear(this.prefStartDoW);
+		var firstWeek = this.useISOweekNum === true ? wn.getISO8601Week() : wn.getWeekOfYear(this.prefStartDoW);
+		maxwkn = maxwkn == 0 ? 53 : maxwkn;
+		firstWeek = firstWeek == 0 ? maxwkn : firstWeek;
+		if(this.weekNumOffset !== undefined && this.weekNumOffset !=0) {
+			var wkNum = parseInt(firstWeek,10) + this.weekNumOffset;
+			firstWeek = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			firstWeek = firstWeek < 10 ? '0' + firstWeek : firstWeek;
+		}
+		wn.setMonth(wn.getMonth()+1);
+		wn.setDate(wn.getDate()-1);
+		var year = wn.getFullYear();
+		var month = wn.getMonth();
+		var maxwkn = new Date((month != 0 ? year : year -1), 11, 28).getISO8601Week();
+		var lastWeek = this.useISOweekNum === true ? wn.getISO8601Week() : wn.getWeekOfYear(this.prefStartDoW);
+		maxwkn = maxwkn == 0 ? 53 : maxwkn;
+		lastWeek = lastWeek == 0 ? maxwkn : lastWeek;
+		if(this.weekNumOffset !== undefined && this.weekNumOffset !=0) {
+			var wkNum = parseInt(lastWeek,10) + this.weekNumOffset;
+			lastWeek = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			lastWeek = lastWeek < 10 ? '0' + lastWeek : lastWeek;
+		}
 		var formatObj = {};
         // formatString = "MMM yyyy";
         formatObj.date = "medium";
         formatObj.dateComponents = "my";
 
 		//this.mvTitle.innerText = Mojo.Format.formatDate(this.monthDate, $L("MMM yyyy")); // Localize this date format string
-		this.mvTitle.innerText = Mojo.Format.formatDate(this.monthDate, formatObj); // Localize this date format string
+		if(this.weekNumberTitle) { 
+			this.mvTitle.innerText = Mojo.Format.formatDate(this.monthDate, formatObj) + ", " + $L("Week") + " " + firstWeek + "-" + lastWeek; // Localize this date format string
+		} else {
+			this.mvTitle.innerText = Mojo.Format.formatDate(this.monthDate, formatObj);
+		}
+		//this.mvTitle.innerText = Mojo.Format.formatDate(this.monthDate, formatObj); // Localize this date format string
 	},
 
 	buildDayHeader: function() {
@@ -280,6 +479,14 @@ var MonthAssistant = Class.create({
 				child = child.nextSibling;
 				ochild = ochild.nextSibling;
 			}
+			if (this.updateFromScroll && this.enhancedView && this.monthAllDayColors) {
+					if (!oday.style || (oday.style.length == 0)) {
+						day.style.backgroundColor = "";
+					} else if (oday.style.length > 0) {
+						var bgcolor = oday.style.backgroundColor;
+						day.style.backgroundColor = bgcolor;
+					}
+			}
 			child.innerText = thisday;
 			
 			var cls = 'day ' + (thisday <= 7 ? this._days[thisday - 1] : '');
@@ -290,6 +497,21 @@ var MonthAssistant = Class.create({
 					cls += ' weekend';
 				}
 			}
+			if (this.updateFromScroll && this.enhancedView && this.monthViewIcons) {
+				if (!oday.style || (oday.style.length == 0)) {
+					day.setStyle({backgroundImage: "", backgroundPosition: "", backgroundRepeat: ""});
+				} else if (oday.style.length > 0) {
+					day.setStyle({backgroundImage: oday.getStyle("backgroundImage")});
+					var urlstrArray = [] , bgplacement = "";
+					urlstrArray = oday.getStyle("backgroundImage").split(",");
+					for(var i =0; i<urlstrArray.length; i++) {
+						if (bgplacement != "") { bgplacement += ", "; }
+						bgplacement += this.monthVerticalIcons === false ? this.placements[i] : this.verticalplacements[i];
+					}
+					day.setStyle({backgroundPosition: bgplacement});
+					day.setStyle({backgroundRepeat: oday.getStyle("backgroundRepeat")});
+				}
+			}
 			if (day.className != cls) 
 			{
 				day.className = cls;
@@ -347,6 +569,14 @@ var MonthAssistant = Class.create({
 				child = child.nextSibling;
 				ochild = ochild.nextSibling;
 			}
+			if (this.updateFromScroll && this.enhancedView && this.monthAllDayColors) {
+				if (!oday.style || (oday.style.length == 0)) {
+					day.style.backgroundColor = "";
+				} else if (oday.style.length > 0) {
+					var bgcolor = oday.style.backgroundColor;
+					day.style.backgroundColor = bgcolor;
+				}
+			}
 			child.innerText = thisday;
 			
 			var cls = 'day ' + (thisday <= 7 ? this._days[thisday - 1] : '');
@@ -357,6 +587,21 @@ var MonthAssistant = Class.create({
 					cls += ' weekend';
 				}
 			}
+			if (this.updateFromScroll && this.enhancedView && this.monthViewIcons) {
+				if (!oday.style || (oday.style.length == 0)) {
+					day.setStyle({backgroundImage: "", backgroundPosition: "", backgroundRepeat: ""});
+				} else if (oday.style.length > 0) {
+					day.setStyle({backgroundImage: oday.getStyle("backgroundImage")});
+					var urlstrArray = [] , bgplacement = "";
+					urlstrArray = oday.getStyle("backgroundImage").split(",");
+					for(var i =0; i<urlstrArray.length; i++) {
+						if (bgplacement != "") { bgplacement += ", "; }
+						bgplacement += this.monthVerticalIcons === false ? this.placements[i] : this.verticalplacements[i];
+					}
+					day.setStyle({backgroundPosition: bgplacement});
+					day.setStyle({backgroundRepeat: oday.getStyle("backgroundRepeat")});
+				}
+			}
 			if (day.className != cls) 
 			{
 				day.className = cls;
@@ -418,6 +663,7 @@ var MonthAssistant = Class.create({
 			mday = { day: date.getDate(), limit: 0, month: date.getMonth() };
 			mday.limit = this._monthDays[mday.month];
 			mday.dayOfWeek = date.getDay();
+			this.updateFromScroll = true;
 		
 			for (r = 0; r < 18 - wdiff; r++) 
 			{
@@ -434,6 +680,7 @@ var MonthAssistant = Class.create({
 			mday = { day: date.getDate(), limit: 0, month: date.getMonth() };
 			mday.limit = this._monthDays[mday.month];
 			mday.dayOfWeek = date.getDay();
+			this.updateFromScroll = true;
 		
 			for (r = 17; r > -wdiff; r--)
 			{
@@ -450,6 +697,7 @@ var MonthAssistant = Class.create({
 			mday = { day: date.getDate(), limit: 0, month: date.getMonth() };
 			mday.limit = this._monthDays[mday.month];
 			mday.dayOfWeek = date.getDay();
+			this.updateFromScroll = false;
 		
 			for (r = 0; r < 18; r++) 
 			{
@@ -512,20 +760,40 @@ var MonthAssistant = Class.create({
 		for (var child, day, d=0; dayCell && (d < daylen); d++)
 		{
 			day		= this._token2state (days.charCodeAt (d));
+			var bgcolor = "";
+			if (this.enhancedView && this.monthAllDayColors) {
+				var bgcolor = "";
+				for (var k=0; k<this.fullEvts[d].allDayEvents.length; k++)
+				{
+					if(!this.fullEvts[d].allDayEvents[k].calendarColor) {
+						this.fullEvts[d].allDayEvents[k].calendarColor = this.calendarsManager.getCalColorStyle (this.fullEvts[d].allDayEvents[k].calendarId);
+					}
+					if (bgcolor == "")
+					{
+						bgcolor = this.colors[this.fullEvts[d].allDayEvents[k].calendarColor];
+					}
+					else if (bgcolor != this.colors[this.fullEvts[d].allDayEvents[k].calendarColor])
+					{
+						bgcolor = "rgba(169,169,169,0.4)";
+						break;
+					}
+				}
+			}
+			if(this.monthAllDayColors) {dayCell.style.backgroundColor = bgcolor; }
 			child	= dayCell.firstChild;
 
 			for (var cls, i = 1; i < 8; i <<= 1)
 			{
 				//check bits 4-6 for an event on the displayed calendar
 				//this assumes that if the higher bits are 1, so is the corresponding lower bit
-				if (day & (i << 3)) 
+				if (day & (i << 3) && ((this.enhancedView && this.monthUseBusy) || !this.enhancedView)) 
 				{
-					cls = "monthview-busy-time " + calStyle;
+										cls = ((child.offsetHeight > 12) ? "monthview-partly-busy-time " : "monthview-partly-busy-time-pixi ") + calStyle;
 				}
 				//check bits 1-3 for an event
-				else if (day & i) 
+				else if (day & i && ((this.enhancedView && this.monthUseBusy) || !this.enhancedView)) 
 				{
-					cls = "monthview-busy-time";
+					cls = (child.offsetHeight > 12) ? "monthview-partly-busy-time" : "monthview-partly-busy-time-pixi";
 				}
 				else 
 				{
@@ -538,6 +806,10 @@ var MonthAssistant = Class.create({
 				child = child.nextSibling;
 			}
 			
+			if(this.enhancedView && this.monthViewIcons) {
+				this.renderIcons(this.fullEvts[d].events, dayCell); 
+			}
+			
 			// Advance the dayCell
 			if (d % 7 == 6) 
 			{
@@ -553,6 +825,38 @@ var MonthAssistant = Class.create({
 ///*DEBUG:*/	console.log ("\n\n\nmonth-view.renderBusyMonthInfo: timing: "+JSON.stringify (this.timing)+"\n\n\n");
 	},
 	
+	renderIcons: function(events, dayCell) {
+		var bgimage = "";
+		var bgrepeat = "";
+		var bgplacement = "";
+		var imgIdx = 0;
+		for (var k=0; k<events.length; k++) {
+			if (events[k].note !== undefined) {
+				try {
+					var start =[];
+					start = this.app.getNotesIconParts(events[k].note);
+					if (start && start[1]) {
+						var icon = start[1];
+						if (bgimage != "") { bgimage += ", "; }
+						bgimage += "url(/media/internal/.scrims/ubercalendar/icon-" + icon + ".png)";
+						if (bgrepeat != "") { bgrepeat += ", "; }
+						bgrepeat += "no-repeat";
+						if (bgplacement != "") { bgplacement += ", "; }
+						bgplacement += this.monthVerticalIcons === false ? this.placements[imgIdx] : this.verticalplacements[imgIdx];
+						imgIdx++;
+						if (imgIdx >= this.placements.length) {
+							break;
+						}
+					}
+				} catch(e) {Mojo.Log.error(bgimage);
+							Mojo.Log.error(bgrepeat);
+						Mojo.Log.error(bgplacement);
+				}
+			}
+		}
+		dayCell.setStyle({backgroundImage: bgimage, backgroundRepeat: bgrepeat, backgroundPosition: bgplacement});
+	},
+	
 	positionDays: function() 
 	{
 		//Mojo.Log.info("month-assistant: positionDays");
@@ -618,7 +922,7 @@ var MonthAssistant = Class.create({
 		this.render();
 		this.showToday();
 		this.resetScrolling (this._months);
-		this.loadBusyTimes (1000);
+		this.loadBusyTimes (15.625);
 	},
 	
 	resetScrolling: function (monthsElement) {
@@ -664,7 +968,18 @@ var MonthAssistant = Class.create({
 		var calMgr	= this.calendarsManager
 		,	calendar= calMgr.getCurrentCal();
 
-		if ("all" == calendar) {
+		// update UC groups, calendars changed
+		this.userUberCalGroups = [];
+		this.userUberCalGroups = this.app.getUserUberCalGroups();
+		this.uberGroups = this.app.getUberGroups();
+		this.getUCGroupsProps();
+		
+		if(this.ucGroupIdx !== undefined) {
+			var name = this.userUberCalGroups[this.ucGroupIdx].groupname;
+			this.controller.get ("mv_current_calendar")	.update			(name);
+			this.controller.get ("mv_calendar_source")	.setAttribute	("class", "header-cal-source");
+			return;
+		} else if ("all" == calendar) {
 			this.controller.get ("mv_current_calendar")	.update			($L("All"));
 			this.controller.get ("mv_calendar_source")	.setAttribute	("class", "header-cal-source");
 			return;
@@ -744,6 +1059,40 @@ var MonthAssistant = Class.create({
 
 		var prefs		= this.prefsManager.getPrefs();
 		this.savedPrefs	= prefs ? Foundations.ObjectUtils.clone (prefs) : undefined;
+		if(this.enhancedView){
+			var headDiv = this.controller.get("mv_header_container1");
+			var scrimDiv = document.createElement('div');
+			scrimDiv.setAttribute('id', "uber-month-panel-scrim");
+			scrimDiv.setAttribute('class', "palm-scrim menu-panel");
+			scrimDiv.setAttribute('x-mojo-menupanel-scrim', "");
+			
+			var panDiv = document.createElement('div');
+			panDiv.setAttribute('id', "uber-month-mp-cont");
+			panDiv.innerHTML = '<div id="uber-month-menu-panel" class="palm-menu-panel" x-mojo-menupanel="">' +
+				'<div class="palm-menu-panel-wrapper" x-mojo-element="Scroller"><div class="palm-list">' +
+		        	'<div class="palm-row first" id="uber-month-panel-event"></div>' +
+					'<div class="palm-row last" ><div class="palm-row-wrapper"><div ><table width="100%" ><tr>' +
+								'<td width="25%" style="padding:0px;margin:0px;"><div id="uber-month-mp-back" class="palm-button" x-mojo-tap-highlight="momentary" style="overflow:hidden;padding:0px;margin:0px;" x-mojo-loc=""><-</div></td>' +
+								'<td width="25%" style="padding:0px;margin:0px;"><div id="uber-month-mp-map" class="palm-button secondary disabled" x-mojo-tap-highlight="momentary" style="overflow:hidden;padding:0px;margin:0px;" x-mojo-loc="">'+$L("Map")+'</div></td>' +
+								'<td width="25%" style="padding:0px;margin:0px;"><div id="uber-month-mp-delete" class="palm-button negative" x-mojo-tap-highlight="momentary" style="overflow:hidden;padding:0px;margin:0px;" x-mojo-loc="">'+$L("Delete")+'</div></td>' +
+								'<td width="25%" style="padding:0px;margin:0px;"><div id="uber-month-mp-next" class="palm-button" x-mojo-tap-highlight="momentary" style="overflow:hidden;padding:0px;margin:0px;" x-mojo-loc="">-></div></td>' +
+					'</tr></table></div></div>' +
+				'</div></div></div>';
+			
+			this.controller.get("month_view").insertBefore(scrimDiv, headDiv);
+			var scrollDiv = this.controller.get("wv_scroll_container");
+			this.controller.get("month_view").insertBefore(panDiv, scrollDiv);
+			this.uberMenuPanel = this.controller.get("uber-month-menu-panel");
+			this.uberScrim = this.controller.get("uber-month-panel-scrim");
+			this.uberMenuPanel.hide();
+			this.uberScrim.hide();
+			this.prevListener = this.handleHeldPrev.bind(this);
+			this.nextListener = this.handleHeldNext.bind(this);
+			this.mapListener = this.handleHeldMap.bind(this);
+			this.heldEvtListener = this.handleHeldEvent.bind(this);
+			this.handleEventsHold = this.handleEventsHold.bind(this);
+			this.deleteListener = this.handleHeldDelete.bind(this);
+		}
 		this._months	= this.month_days.appendChild (this._createEmptyMonthTable());
 
 		this.setupScrolling (this._months);
@@ -758,11 +1107,15 @@ var MonthAssistant = Class.create({
 		this.menuModel = 
 		{	visible	:	true
 		,	items	:
-			[	{}
+			[	{label: $L('Event'), icon: 'new-timed', command: 'newtimed'}
 			,	{	label		: $L('Views')
 				,	toggleCmd	: 'month'
 				,	items		:
-					[	{	command	: 'day'
+					[	{	label:$L('Agenda'),
+							icon: 'menu-agenda',
+							command:'agenda'
+						}
+					,	{	command	: 'day'
 						,	icon	: 'menu-day'
 						,	label	: $L('Day')
 						}
@@ -776,7 +1129,7 @@ var MonthAssistant = Class.create({
 						}
 					]
 				}
-			,	{}
+			,	{label: $L('All day event'), icon: 'new-allday', command: 'newallday'}
 			]
 		};
 
@@ -881,7 +1234,7 @@ var MonthAssistant = Class.create({
 	},//END: function setupScrolling (monthsElement)
 
 	showJumpTo: function() {
-		this.controller.showDialog ({ template: 'shared/jumpto', assistant: new JumptoDialogAssistant (this.controller) });
+		this.controller.showDialog ({ template: 'shared/jumpto', assistant: new JumptoDialogAssistant (this.controller, this) });
 	},
 
 	syncAllCalendars: function() {
@@ -911,6 +1264,12 @@ var MonthAssistant = Class.create({
 			} else if (event.command == Mojo.Menu.prefsCmd) {
 				Mojo.Event.stop (event);
 				this.controller.stageController.pushScene('prefs');
+			} else if(event.command =="newtimed"){
+				Mojo.Event.stop(event);
+				this.controller.stageController.pushScene('edit', 0, 0, false, this.getCalId()/*calendarId*/,0/*subject*/);
+			} else if(event.command=="newallday"){
+				Mojo.Event.stop(event);
+				this.controller.stageController.pushScene('edit', 0, 0, true, this.getCalId(),0/*subject*/);
 			}else if(event.command == Mojo.Menu.helpCmd){
 				this.app.getAppManagerService().launchHelp (this.controller);
 			} else if (event.command == 'sync') {
@@ -925,11 +1284,48 @@ var MonthAssistant = Class.create({
 			} else if (event.command == 'reminders') {
 				Mojo.Event.stop (event);
 				this.controller.stageController.pushScene('reminder-list');
-			}				
+			} else if (event.command == 'agenda') {
+				Mojo.Event.stop(event);
+				var appId = 'com.palm.app.agendaview';
+				if(this.useAgendaZ){
+					appId = 'com.palm.service.calendar.metaview';
+				}
+				this.controller.serviceRequest('palm://com.palm.applicationManager', {
+					method: 'launch',
+					parameters: {
+						id: appId
+					}
+				});
+				this.menuModel.items[1].toggleCmd = 'month';
+				this.controller.modelChanged(this.menuModel, this);
+			}
 		}
 		else if(event.type == Mojo.Event.commandEnable && event.command == Mojo.Menu.prefsCmd) {
 			// Enable prefs menuitem for this scene.
 			event.stopPropagation();
+		}else if (event.type == Mojo.Event.back) {
+			if(this.uberHolding){
+				if(this.uberHoldTimeout){
+					this.controller.window.clearTimeout(this.uberHoldTimeout);
+					this.uberHoldTimeout = 0;
+				}
+				this.uberMenuPanel.hide();
+				this.uberHolding = false;
+				event.preventDefault();
+				event.stopPropagation();
+				return;
+			}
+			if(this.uberBackGesture == 'week' || (this.uberBackGesture == 'last' && this.uberLastView == 'week' )) {
+				event.preventDefault();
+				event.stopPropagation();
+				this.handleWeekView();
+			} else if(this.uberBackGesture == 'day' || (this.uberBackGesture == 'last' && this.uberLastView == 'day' )) {
+				event.preventDefault();
+				event.stopPropagation();
+				this.handleDayView();
+			} else if(this.uberBackGesture == 'month' || (this.uberBackGesture == 'last' && this.uberLastView == 'month' )) {
+				// default back gesture
+			}
 		}
 	},
 
@@ -949,7 +1345,20 @@ var MonthAssistant = Class.create({
 ///*DEBUG:*/	this.timing.activate = -new Date();
 
 		//Mojo.Log.info ("\n\nmonth-assistant.activate\n\n");
-
+		this.uberLastView = "month";
+		var cookie = new Mojo.Model.Cookie("BackGesture");
+		try {
+			if(cookie) {
+				var lview = cookie.get();
+				if(lview && lview.lastview) {
+					this.uberLastView = lview.lastview;
+				}
+				cookie.put({lastview: "month"});
+			}
+		} catch (e) {}
+		if ((this.uberLastView != "week") && (this.uberLastView != "day")) {
+			this.uberLastView = "month";
+		}
 		// Tap JumpTo:
 		this.controller.get ('mv_view_header').observe (Mojo.Event.tap, this.showJumpTo);
 
@@ -958,10 +1367,24 @@ var MonthAssistant = Class.create({
 
 		// Tap Any Day:
 		this.month_days.observe (Mojo.Event.tap, this.onDayTapped);
+		if(this.enhancedView){
+			this.month_days.observe (Mojo.Event.hold, this.handleEventsHold);
+			this.controller.get ('uber-month-mp-back').observe(Mojo.Event.tap, this.prevListener);
+			this.controller.get ('uber-month-mp-next').observe(Mojo.Event.tap, this.nextListener);
+			this.controller.get ('uber-month-mp-map').observe(Mojo.Event.tap, this.mapListener);
+			this.controller.get ('uber-month-panel-event').observe(Mojo.Event.tap, this.heldEvtListener);
+			this.controller.get ('uber-month-mp-delete').observe(Mojo.Event.tap, this.deleteListener);
+		}
 
 		// Tap Current Day:
 		this.dvCurrentDay.observe (Mojo.Event.tap, this.onTodayTapped);
 
+		// setup UC groups
+		this.userUberCalGroups = [];
+		this.userUberCalGroups = this.app.getUserUberCalGroups();
+		this.uberGroups = this.app.getUberGroups();
+		this.getUCGroupsProps();
+		
 		this.handleScrolling();
 		this.buildMonth();
 ///*DEBUG:*/	this.timing.launch += +new Date();
@@ -977,6 +1400,7 @@ var MonthAssistant = Class.create({
 			DayAssistant.dayCache = new Hash();
 			DayAssistant.cacheSubscribed = new Hash();
 			this.pendingCalendarSettingsUpdate = false;
+			this.fullEvts = new Hash();
 		}
 
 ///*DEBUG:*/	this.timing.activate += +new Date();
@@ -993,7 +1417,20 @@ var MonthAssistant = Class.create({
 
 		this.month_days		.stopObserving (Mojo.Event.tap	, this.onDayTapped);
 		this.dvCurrentDay	.stopObserving (Mojo.Event.tap	, this.onTodayTapped);
-
+		if(this.enhancedView){
+			this.month_days.stopObserving (Mojo.Event.hold, this.handleEventsHold);
+			this.controller.get ('uber-month-mp-back').stopObserving(Mojo.Event.tap, this.prevListener);
+			this.controller.get ('uber-month-mp-next').stopObserving(Mojo.Event.tap, this.nextListener);
+			this.controller.get ('uber-month-mp-map').stopObserving(Mojo.Event.tap, this.mapListener);
+			this.controller.get ('uber-month-panel-event').stopObserving(Mojo.Event.tap, this.heldEvtListener)
+			this.controller.get ('uber-month-mp-delete').stopObserving(Mojo.Event.tap, this.deleteListener);
+			if(this.uberHoldTimeout){
+				this.controller.window.clearTimeout(this.uberHoldTimeout);
+				this.uberHoldTimeout = 0;
+			}
+			this.uberMenuPanel.hide();
+			this.uberHolding = false;
+		}
 		this.controller.get ('mv_view_header')		.stopObserving (Mojo.Event.tap, this.showJumpTo);
 		this.controller.get ('mv_calendar_source')	.stopObserving (Mojo.Event.tap, this.showCalendarPicker);
 	},
@@ -1002,7 +1439,17 @@ var MonthAssistant = Class.create({
 
 	onDayTapped: function (event) {
 		if (this.isScrolling) { return; }
-
+		if(this.uberHolding){
+			if(this.uberHoldTimeout){
+				this.controller.window.clearTimeout(this.uberHoldTimeout);
+				this.uberHoldTimeout = 0;
+			}
+			this.uberMenuPanel.hide();
+			this.uberHolding = false;
+			event.preventDefault();
+			event.stopPropagation();
+			return;
+		}
 		//Mojo.Log.info ('month-assistant: onDayTapped');
 
 		var targetDay = this.controller.get (event.target);
@@ -1033,14 +1480,46 @@ var MonthAssistant = Class.create({
 		Mojo.Event.stop (event);
 
 		var listItems = this.calendarsManager.buildCalendarsMenu (true /*includeAll*/, true /*includeReadOnly*/, true /*includeExcludedFromAll*/);
-
+		
+		// UC groups items
+		if(this.userUberCalGroups && this.userUberCalGroups.length > 0) {
+			var viewOptionsItem = listItems.splice(-1,1);
+			var len = this.userUberCalGroups.length;
+			if(this.ucGroupsFirst){
+				var allCals = listItems.splice(0,1);
+				for(var i=len-1; i>-1; i--) {
+					var grp = this.userUberCalGroups[i];
+					if(grp && grp.rId && grp.groupname) {
+						listItems.unshift( {label: grp.groupname, command: "rId:" + grp.rId, secondaryIcon: 'menu_all'} );
+					}
+				}
+				listItems.unshift( {label: $L("UberCalendar Groups")} );
+				listItems.unshift({label: $L("All calendars"),
+									command: 'all',
+									secondaryIcon: 'menu_all'
+								});
+			} else {
+				listItems.push( {label: $L("UberCalendar Groups")} );
+				for(var i=0; i<len; i++) {
+					var grp = this.userUberCalGroups[i];
+					if(grp && grp.rId && grp.groupname) {
+						listItems.push( {label: grp.groupname, command: "rId:" + grp.rId, secondaryIcon: 'menu_all'} );
+					}
+				}
+			}
+			listItems.push({
+				label: $L("Calendar View Options..."),
+				command: "viewOptions"
+			});
+		}
+		
 		this.controller.popupSubmenu (
 		{	items			: listItems
 		,	manualPlacement	: true
 		,   onChoose		: this.onCalendarPicked
 //		,	placeNear		: event.target
 		,	popupClass		: "cal-selector-popup"
-		,	toggleCmd		: this.calendarsManager.getCurrentCal()
+		,	toggleCmd		: this.app.uberToggleGroupsCmd(this.uberGroups.inUse, "rId:" + this.uberGroups.rId)
 		});
 	},
 
@@ -1052,6 +1531,18 @@ var MonthAssistant = Class.create({
 			return;
 		}
 
+		//uc groups setup
+		if(value.indexOf("rId:") !== -1) {
+			var idx = value.indexOf(":") + 1;
+			rID = value.slice(idx);
+			this.app.setUberGroups(rID);
+			this.uberGroups = {inUse: true, rId: rID};
+			value = 'all';
+		} else {
+			this.app.setUberGroups(false);
+			this.uberGroups = {inUse: false, rId: ""};
+		}
+		
 		this.calendarsManager.setCurrentCal (value);
 		this.buildMonth();
 
@@ -1062,8 +1553,33 @@ var MonthAssistant = Class.create({
 		DayAssistant.cacheSize			= 0;
 		DayAssistant.dayCache			= new Hash();
 		DayAssistant.cacheSubscribed	= new Hash();
+		this.fullEvts = new Hash();
 	},
 
+	getCalId :function(){
+		var currentCal	= this.calendarsManager.getCurrentCal();
+		var defaultCalId= currentCal;
+
+		if (currentCal === "all") {
+			// Create an event in the calendar specified by the defaultCalId preference
+			defaultCalId= this.prefsManager.getDefaultCalendar();
+			var manager	= this.calendarsManager;
+
+			if (defaultCalId === 0) {
+				defaultCalId = manager.getLocalCalendarId();
+			}
+
+			// Check to see if the calendarId is a valid one
+			if (manager.getCalName(defaultCalId) === undefined) {
+				// The default calendar doesn't exist anymore so let's just create it
+				// in Local
+				defaultCalId = manager.getLocalCalendarId();
+			}
+		}
+
+		return defaultCalId;
+	},
+	
 	// ** MENU **
 	handleDayView: function (e) {
 		//var today = new Date();
@@ -1093,7 +1609,358 @@ var MonthAssistant = Class.create({
 		sController.popScene();
 		sController.pushScene({name: "week", transition: Mojo.Transition.crossFade, disableSceneScroller: true});
 	},
+	
+	handleEventsHold: function(holdEvent, whichDay, eIdx, Evt) {
+		//Mojo.Event.stop(tapEvent);
+		//Mojo.Log.error("Holding Event!!!!!!!" + (event && event.subject) + " , day: " + whichDay + " , idx: " + eIdx);
+		var daycount,event;
+		if(holdEvent && holdEvent.target){
+			holdEvent.stopPropagation();
+			holdEvent.preventDefault();
+			//Mojo.Log.error("holdEvent keys: " + Object.keys(holdEvent.target));
+			var targetDay = this.controller.get (holdEvent.target);
+
+			if (targetDay.hasClassName ('monthview-day-numeral')) {
+				targetDay = targetDay.parentNode;
+			}
+
+			//Mojo.Log.error ("onDayTapped: %s" , Object.keys(targetDay));
+			if (targetDay.hasClassName ('day')) {
+				daycount= targetDay.parentNode.rowIndex * 7 + targetDay.cellIndex -42;
+				//Mojo.Log.error("target daycount: " + daycount);
+			}
+		}
+		daycount = (daycount !== undefined && daycount <= 41 && daycount > -1) ? daycount : 41;
+		if(Evt){
+			event = Evt;
+			this.uberHeldDay = whichDay;
+			this.uberHeldIdx = eIdx;
+		} else {
+			if(this.fullEvts[daycount] && this.fullEvts[daycount].allDayEvents && this.fullEvts[daycount].allDayEvents.length){
+				event = this.fullEvts[daycount].allDayEvents[0];
+				this.uberHeldIdx =0;
+				this.uberHeldDay = daycount;
+			} else if(this.fullEvts[daycount] && this.fullEvts[daycount].events && this.fullEvts[daycount].events.length){
+				event = this.fullEvts[daycount].events[0];
+				this.uberHeldIdx = 0;
+				this.uberHeldDay = daycount;
+			}
+		}
+		if(!event){
+			Mojo.Log.error("No events on daycount: " + daycount + ", date: " + (this.fullEvts[daycount] && this.fullEvts[daycount].date));
+			return;
+		}	
+		this.uberMenuPanel.show();
+		this.uberHolding = true;
+		this.uberHeldEvent = false;
+		if(event){
+			var tEvt = {}, item, rtdate;
+			item = event;
+			this.uberHeldEvent = event;
+			if(item._id) {
+				tEvt._id = item._id;
+			}
+			if(item.currentLocalStart || item.dtstart) {
+				var formatObj = {};
+				rtdate = new Date(item.currentLocalStart || item.dtstart);
+				// formatString = "EEE MMM d";
+				formatObj.date = "medium";
+				formatObj.weekday = "medium";
+				formatObj.dateComponents = "md"
+				var templateModel = {};
+				var template = new Template($L("#{dateStr}"));
+				//var todayStr= Mojo.Format.formatRelativeDate(rtdate.clearTime(), {date: "short"}).capitalize();
+				//templateModel.todayStr = todayStr;
+				templateModel.dateStr = Mojo.Format.formatDate(rtdate, formatObj);
+				var dateTxt = template.evaluate(templateModel);
+				if(!item.allDay) {
+					
+					var h = rtdate.getHours();
+					var m = rtdate.getMinutes();
+					tEvt.startT = (h<10 ? '0'+h: h) + ':' + (m<10 ? '0'+m : m);
+				} else if (item.allDay === true) {
+					tEvt.startT = $L("all ");
+				}
+			}
+			if(item.subject) {
+				tEvt.subject = dateTxt + " - " + item.subject;
+			}
+			if(item.location && item.location !== "") {
+				tEvt.location = item.location;
+				this.controller.get("uber-month-mp-map").removeClassName("disabled");
+			} else {
+				this.controller.get("uber-month-mp-map").addClassName("disabled");
+			}
+			if(item.calendarId) {
+				var calColor = this.calendarsManager.getCalColorStyle(item.calendarId);
+				tEvt.bgcolor = this.colors[calColor];
+			}
+			if(item.currentLocalEnd || item.dtend) {
+				if(!item.allDay) {
+					rtdate = new Date(item.currentLocalEnd || item.dtend);
+					var h = rtdate.getHours();
+					var m = rtdate.getMinutes();
+					tEvt.endT = (h<10 ? '0'+h: h) + ':' + (m<10 ? '0'+m : m);
+				} else if (item.allDay === true) {
+					tEvt.endT = $L("day ");
+				}
+			}
+			if(item.note) {
+				var wholeNote = item.note !== "\n" ? item.note : "";
+				var patt = /((.|\n|\r)*?)ICON=([a-z0-9_-]{1,20});((.|\n|\r)*)/;
+				if(wholeNote && wholeNote !== "\n" && wholeNote.length > 0) {
+					var result = wholeNote.match(patt);
+					if(result && result[3]) {
+						tEvt.cat = result[3];
+						if(tEvt.cat){
+							tEvt.catFormatted = 'url(/media/internal/.scrims/ubercalendar/icon-' + tEvt.cat + '.png) no-repeat center right;'
+						}
+						tEvt.note = result[1] + result[4];
+					} else {
+						tEvt.note = wholeNote;
+					}
+				}
+			}
+			var tEvtHtml = Mojo.View.render({object: tEvt, template: 'shared/ubertemplateitem'});
+			this.controller.get('uber-month-panel-event').update(tEvtHtml);
+		}
+		if(!this.uberHoldTimeout){
+			this.uberHoldTimeout = this.controller.window.setTimeout(function(){this.uberHeldEvent = false;this.uberHolding=false;this.uberMenuPanel.hide();}.bind(this), 5000);
+		} else {
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = this.controller.window.setTimeout(function(){this.uberHeldEvent = false;this.uberHolding=false;this.uberMenuPanel.hide();}.bind(this), 5000);
+		}
+	},
+	
+	findUberNextEvent: function(want){
+		if(this.uberHeldEvent && this.uberHeldDay !== undefined && this.uberHeldIdx !== undefined && want !== undefined){
+			var ended, data, day, aLen, eLen, maxD, nDay, nIdx;
+			var event;
+			//beginWeekNoTime = this.getFirstDayOfWeek(this.app.getCurrentDateTime()).set({hour: 0, minute: 0, second: 0, millisecond: 0});
+			data = this.fullEvts;
+			nDay = this.uberHeldDay;
+			day = data[nDay];
+			aLen = day.allDayEvents.length;
+			eLen = day.events.length;
+			maxD = 41;
+			var needNewDay = (aLen + eLen) < 2;//true = only 1 event that day
+			if(!needNewDay) {
+				if(this.uberHeldEvent.allDay){
+					if(want === "prev"){
+						if(this.uberHeldIdx -1 <0){
+							needNewDay = true;
+						} else {
+							nIdx = this.uberHeldIdx -1;
+							event = day.allDayEvents[nIdx];
+						}
+					} else {// want next
+						if(aLen > this.uberHeldIdx+1){
+							nIdx = this.uberHeldIdx+1;
+							event = day.allDayEvents[nIdx];
+						} else { //check events
+							if(eLen > 0){
+								nIdx = 0;
+								event = day.events[nIdx];
+							} else {
+								needNewDay = true;
+							}
+						}
+					}
+					if(event){
+						var params = {event: event, whichDay: nDay, eIdx: nIdx};
+						return params;
+					}
+				} else {//events
+					if(want === "prev"){
+						if(this.uberHeldIdx -1 <0){//check all days
+							if(aLen === 0){
+								needNewDay = true;
+							} else {
+								nIdx = aLen -1;
+								event = day.allDayEvents[nIdx];
+							}
+						} else {
+							nIdx = this.uberHeldIdx -1;
+							event = day.events[nIdx];
+						}
+					} else {// want next
+						if(eLen > this.uberHeldIdx+1){
+							nIdx = this.uberHeldIdx+1;
+							event = day.events[nIdx];
+						} else {
+							needNewDay = true;
+						}
+					}
+					if(event){
+						var params = {event: event, whichDay: nDay, eIdx: nIdx};
+						return params;
+					}
+				}
+			}
+			
+			if(needNewDay){ //next or prev day
+				do {
+					if(want === "next"){//next should go to next all day event
+						nDay += 1;
+						if(nDay >= maxD){//no next this week
+							ended = true;
+							break;
+						}
+					} else {
+						nDay -= 1;
+						if(nDay < 0){//no prev this week
+							ended = true;
+							break;
+						}
+					}
+					day = data[nDay];
+					aLen = day.allDayEvents.length;
+					eLen = day.events.length;
+				} while(aLen + eLen <1);
+				if(!ended){
+					if(want === "next"){
+						if(aLen > 0){
+							event = day.allDayEvents[0];
+						} else {
+							event = day.events[0];
+						}
+						nIdx = 0;
+					} else {
+						if(eLen < 1){
+							nIdx = aLen-1;
+							event = day.allDayEvents[nIdx];
+						} else {
+							nIdx = eLen-1;
+							event = day.events[nIdx];
+						}
+					}
+					var params = {event: event, whichDay: nDay, eIdx: nIdx};
+					return params;
+				} else {// no event to be found
+					Mojo.Log.error("No next or previous event found");
+					return false;
+				}
+			}
+		}
+	},
+	
+	handleHeldPrev: function(){
+		if(this.uberHoldTimeout){
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = 0;
+		}
+		var args = this.findUberNextEvent("prev");
+		if(args){
+			this.handleEventsHold(null, args.whichDay, args.eIdx, args.event);
+		}
+	},
+	
+	handleHeldNext: function(){
+		if(this.uberHoldTimeout){
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = 0;
+		}
+		var args = this.findUberNextEvent("next");
+		if(args){
+			this.handleEventsHold(null, args.whichDay, args.eIdx, args.event);
+		}
+	},
+	
+	handleHeldEvent: function(){
+		if(this.uberHoldTimeout){
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = 0;
+		}
+		this.uberMenuPanel.hide();
+		//Mojo.Log.error("held event - launch edit");
+		this.uberHolding = false;
+		if(this.uberHeldEvent){
+			if(this.uberHeldEvent._id){
+				var event = this.uberHeldEvent;
+				var idString = event._id+"-"+event.currentLocalStart+"-"+event.currentLocalEnd;
+				this.controller.stageController.pushScene('edit', idString, new Date(event.dtstart), false, event.calendarId, event.subject);
+			}
+			//this.handleEventsTap(this.uberHeldEvent, false);
+		}
+	},
+	
+	handleHeldMap: function(){
+		if(this.uberHoldTimeout){
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = 0;
+		}
+		this.uberMenuPanel.hide();
+		//Mojo.Log.error("held map - launch map");
+		this.uberHolding = false;
+		if(this.uberHeldEvent && this.uberHeldEvent.location && this.uberHeldEvent.location !==""){
+			this.app.getAppManagerService().launchMaps (this.controller, this.uberHeldEvent.location, false);
+		}
+		return;
+	},
+	
+	handleHeldDelete: function(){
+		if(this.uberHoldTimeout){
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = 0;
+		}
+		this.uberMenuPanel.hide();
+		//Mojo.Log.error("held delete ");
+		this.uberHolding = false;
+		if(this.uberHeldEvent){
+			this.fromDefaultTap = false;
+			this.eventToBeDeleted = this.uberHeldEvent;
+			this.deletedeventId = this.uberHeldEvent._id;
+			this.gotEventInlineDelete(this.uberHeldEvent);
+		}
+	},
 
+	gotEventInlineDelete: function(event) {
+		//Mojo.Log.info("gotEventInlineDelete");
+		var targetEvent = event;
+		// If the user is trying to delete a new event (cancelling the new event) 
+		// [new event's parentId is undefined]
+		// or
+		// if the event is NOT a recurring event, show the standard delete warning
+		if ((!targetEvent.rrule || !targetEvent.rrule.freq) && !targetEvent.parentId){
+			this.controller.showDialog({
+				template: 'shared/confirm-deleteevent',
+				assistant: new DeleteEventConfirmDialogAssistant(this, targetEvent, targetEvent.dtstart),
+				preventCancel: true
+			});
+		} 
+		else {
+			// If the event is a recurring event, show the warning allowing users to
+			// delete the series, the single event, or cancel
+			this.controller.showDialog({
+				template: 'shared/confirm-deleterecurringevent',
+				assistant: new DeleteEventConfirmDialogAssistant(this, targetEvent, targetEvent.currentLocalStart),
+				preventCancel: true
+			});
+		}
+		
+		// Re-render the event (un-tapped)
+		this.eventToBeDeleted = null;
+		//this.editEventsCallBack();
+	},
+	
+	gotEventInlineDeleteFailed: function(response) {
+		this.eventToBeDeleted = null;
+		this.deletedEventId = undefined;
+		//this.editEventsCallBack();
+	},
+	
+	deletedEvent: function(response) {
+		if (response.returnValue === false) {
+			Mojo.Log.error("Failed to delete event: %j", response);
+			return;
+		}
+				
+		// Remove the reminder for this event
+		if (this.deletedEventId !== undefined) {
+			this.app.getReminderManager().closeRemindersByEventId([this.deletedEventId]);
+		}
+	},
+	
 	showToday: function() {
 		var style = this.dvCurrentDay.style;
 
@@ -1112,7 +1979,23 @@ var MonthAssistant = Class.create({
 		style.display	= "block";									// then display it.
 	},
 
+	editFromTemplate: function(event, editingTemplate) {
+		// going from template to edit new event
+		this.controller.stageController.pushScene('edit', event._id, new Date(event.dtstart), event.allDay, event.calendarId, event.subject, false, undefined, editingTemplate);
+	},
+	
 	onTodayTapped: function (event) {
+		if(this.uberHolding){
+			if(this.uberHoldTimeout){
+				this.controller.window.clearTimeout(this.uberHoldTimeout);
+				this.uberHoldTimeout = 0;
+			}
+			this.uberMenuPanel.hide();
+			this.uberHolding = false;
+			event.preventDefault();
+			event.stopPropagation();
+			return;
+		}
 		this.gotoDayView (new Date());
 	},
 
@@ -1120,12 +2003,12 @@ var MonthAssistant = Class.create({
 		// TODO: Extract this and all other views' reminder handling to common component:
 		// i.e. reminder-assistant*.js, new app.menu.js
 		if (this.reminders.getNumReminders() === 0) {
-			if (this.reminderMenuItemId == this.appMenuModel.items[4].id) {
-				this.appMenuModel.items.splice (4, 1);
+			if (this.reminderMenuItemId == this.appMenuModel.items[5].id) {
+				this.appMenuModel.items.splice (5, 1);
 				this.controller.modelChanged (this.appMenuModel);
 			}
-		} else if (this.reminderMenuItemId != this.appMenuModel.items[4].id) {
-			this.appMenuModel.items.splice (4, 0,
+		} else if (this.reminderMenuItemId != this.appMenuModel.items[5].id) {
+			this.appMenuModel.items.splice (5, 0,
 			{	command	: 'reminders'
 			,	id		: this.reminderMenuItemId
 			,	label	: $L('Missed reminders...')
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/participants-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/participants-assistant.js
index 862dbd8..95fc1a0 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/participants-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/participants-assistant.js
@@ -79,8 +79,12 @@ var ParticipantsAssistant = Class.create({
 			entry.name = attendee.name || attendee.commonName || attendee.email;
 		}
 
-		if (this.targetEvent.accountDomain != "eas") {
-			entry.status = attendee.status;
+		if (!entry.status) {
+			if(!attendee.participationStatus || (attendee.participationStatus && attendee.participationStatus.toLowerCase() == 'other')){
+				entry.status = 'unknown';
+			} else{
+				entry.status = attendee.participationStatus && attendee.participationStatus.toLowerCase();
+			}
 		}
 
 		//set the picture for the contact
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-assistant.js
index bb28b12..22621f2 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-assistant.js
@@ -1,14 +1,13 @@
 /* Copyright 2010 Palm, Inc.  All rights reserved. */

-/*jslint laxbreak: true, white: false, devel: true */
-/*global Class
-	, $L, Mojo, Template, getAppAssistant, DatabaseManager, Event, MojoLoader, AccountsUI, _
+
+/*global Class, $L, Mojo, Template, getAppAssistant, DatabaseManager, Event, MojoLoader, AccountsUI, _
 */

 var THIRTY_MINUTES	= $L("30 minutes");
 var ONE_HOUR		= $L("1 hour");
 var TWO_HOURS		= $L("2 hours");
-var numTimedAlarm	= 7;
+var numTimedAlarm	= 42;
 
 var PrefsAssistant	= Class.create({
 
@@ -60,8 +59,18 @@ var PrefsAssistant	= Class.create({
 			ned.duration = THIRTY_MINUTES;
 		} else if (this.prefs.defaultEventDuration == 60) {
 			ned.duration = ONE_HOUR;
-		} else {
+		} else if (this.prefs.defaultEventDuration <= 75) {
+			ned.duration = "75 minutes";
+		} else if (this.prefs.defaultEventDuration <= 90) {
+			ned.duration = "90 minutes";
+		} else if (this.prefs.defaultEventDuration <= 120) {
 			ned.duration = TWO_HOURS;
+		} else if (this.prefs.defaultEventDuration <= 180) {
+			ned.duration = "3 hours";
+		} else if (this.prefs.defaultEventDuration <= 240) {
+			ned.duration = "4 hours";
+		} else {
+			ned.duration = "8 hours";
 		}
 		
 		this.controller.get('pv_new_event_duration').update(ned.duration);
@@ -156,7 +165,7 @@ var PrefsAssistant	= Class.create({
 		var index = 0;
 		var currentTimedAlarmStr = "";
 		var currentAllDayAlarmStr = "";
-		
+		numTimedAlarm = this.alarms.size();		
 		var alarmStr;
 		for (index = 0; index < this.alarms.size() + this.allDayAlarms.size() - 1; index++) {
 			alarmStr = response[index];
@@ -197,6 +206,7 @@ var PrefsAssistant	= Class.create({
 	
 	buildAlarmsMenu: function() {
 		//Mojo.Log.info('prefs-assistant: buildAlarmsMenu');
+		/*
 		var params =[this.alarms[0].command, 
 					 this.alarms[1].command, 
 					 this.alarms[2].command,
@@ -210,6 +220,14 @@ var PrefsAssistant	= Class.create({
 					 this.allDayAlarms[2].command,
 					 this.allDayAlarms[3].command,
 					 this.allDayAlarms[4].command];
+		*/
+		var i, params = [];
+		for (i=0; i<this.alarms.size(); i++) {
+			params.push(this.alarms[i].command);
+		}
+		for (i=1; i<this.allDayAlarms.size(); i++) {
+			params.push(this.allDayAlarms[i].command);
+		}
 		
 		this.formatAlarmStringsCallback (this.app.getFormatterService().getAlarmStrings(params));
 		
@@ -230,7 +248,8 @@ var PrefsAssistant	= Class.create({
 	calendarSettingsUpdated: function() {
 		this.renderDefaultCalendar();
 	},
-		
+
+
 	chooseNotificationRingtone: function() {
 		var params = {
 			actionType: "attach",
@@ -286,6 +305,1273 @@ var PrefsAssistant	= Class.create({
 		// Retrieve the prefs from the service
 		this.prefs		= this.prefsManager.getPrefs();
 		this.db			= new DatabaseManager();
+		this.reminders = getAppAssistant().getReminderManager();
+				//get default snooze duration from cookie
+		this.showSnoozedForBanner = true;
+		this.showReminderDashboard = true;
+		this.useISOweekNum = false;
+		this.stopAutoClose = false;
+		this.sendSonyWatch = false;
+		this.uberOpenInView = 'last';
+		this.uberBackGesture = 'last';
+		this.dayViewCompressed = false;
+		this.dayViewIcons = true;
+		this.dayViewEnhanced = false;
+		this.weekNumOffset = 0;
+		this.weekModulusNum = 1;
+		this.weekNumberTitle = true;
+		this.ucGroupsFirst = false;
+		this.dayMinutePopup = false;
+		this.dayMinInterval = 15;
+		this.dayViewShrink = "none";
+		this.useAgendaZ = false;
+		this.userUberCats = [];
+		this.catCookie = new Mojo.Model.Cookie("userUberCats");
+		if(this.catCookie) {
+			var catcookie = this.catCookie.get();
+			if(catcookie) {
+				if(catcookie.userubercats && catcookie.userubercats.length > 0){
+					this.userUberCats = catcookie.userubercats;
+				} else {
+					this.userUberCats = this.uberCategories;
+				}
+			}else {
+				this.userUberCats = this.uberCategories;
+			}
+		}else {
+			this.userUberCats = this.uberCategories;
+		}
+		this.dayCookie = new Mojo.Model.Cookie("DayEnhanced");
+		if (this.dayCookie) {
+			var daycookie = this.dayCookie.get();
+			if (daycookie) {
+				if(daycookie.dayviewcompressed !== undefined) {
+						this.dayViewCompressed = daycookie.dayviewcompressed;
+				} else {
+						this.dayViewCompressed = false;
+				}
+				if(daycookie.dayviewenhanced !== undefined) {
+						this.dayViewEnhanced = daycookie.dayviewenhanced;
+				} else {
+						this.dayViewEnhanced = false;
+				}
+				if(daycookie.dayminutepopup !== undefined) {
+						this.dayMinutePopup = daycookie.dayminutepopup;
+				} else {
+						this.dayMinutePopup = false;
+				}
+				if(daycookie.daymininterval !== undefined) {
+						this.dayMinInterval = parseInt(daycookie.daymininterval, 10);
+				} else {
+						this.dayMinInterval = 15;
+				}
+				if(daycookie.dayviewshrink !== undefined) {
+						this.dayViewShrink = daycookie.dayviewshrink;
+				} else {
+						this.dayViewShrink = "none";
+				}
+				if(daycookie.dayviewicons !== undefined) {
+						this.dayViewIcons = daycookie.dayviewicons;
+				} else {
+						this.dayViewIcons = true;
+				}
+				if (daycookie.uberbackgesture !== undefined) {
+					this.uberBackGesture = daycookie.uberbackgesture;
+				} else {
+					this.uberBackGesture = 'last';
+				}
+				if (daycookie.useagendaz !== undefined) {
+					this.useAgendaZ = daycookie.useagendaz;
+				} else {
+					this.useAgendaZ = false;
+				}
+			}
+		}
+		this.monthViewEnhanced = false;
+		this.monthAllDayColors = false;
+		this.monthViewIcons = true;
+		this.monthVerticalIcons = false;
+		this.monthUseBusy = true;
+		this.monthCookie = new Mojo.Model.Cookie("MonthViewEnhanced");
+		if (this.monthCookie) {
+			var monthcookie = this.monthCookie.get();
+			if (monthcookie) {
+				if(monthcookie.monthalldaycolors !== undefined) {
+						this.monthAllDayColors = monthcookie.monthalldaycolors;
+				} else {
+						this.monthAllDayColors = false;
+				}
+				if(monthcookie.monthviewenhanced !== undefined) {
+						this.monthViewEnhanced = monthcookie.monthviewenhanced;
+				} else {
+						this.monthViewEnhanced = false;
+				}
+				if(monthcookie.monthviewicons !== undefined) {
+						this.monthViewIcons = monthcookie.monthviewicons;
+				} else {
+						this.monthViewIcons = true;
+				}
+				if(monthcookie.monthverticalicons !== undefined) {
+						this.monthVerticalIcons = monthcookie.monthverticalicons;
+				} else {
+						this.monthVerticalIcons = false;
+				}
+				if (monthcookie.monthusebusy !== undefined) {
+					this.monthUseBusy = monthcookie.monthusebusy;
+				} else {
+					this.monthUseBusy = true;
+				}
+				if (monthcookie.ucgroupsfirst !== undefined) {
+					this.ucGroupsFirst = monthcookie.ucgroupsfirst;
+				} else {
+					this.ucGroupsFirst = false;
+				}
+			}
+		}
+		this.weekViewEnhanced = false;
+		this.weekShowSubject = true;
+		this.weekViewIcons = true;
+		this.weekViewShrink = "none";
+		this.uberMinuteInterval = 5;
+		this.workWeekOnly = false;
+		this.duraBtnOnTop = false;
+		this.weekTimeDay = 0;
+		this.gotoEditFromTemplate = true;
+		this.weekCookie = new Mojo.Model.Cookie("WeekViewEnhanced");
+		if (this.weekCookie) {
+			var weekcookie = this.weekCookie.get();
+			if (weekcookie) {
+				if(weekcookie.weekviewenhanced !== undefined) {
+						this.weekViewEnhanced = weekcookie.weekviewenhanced;
+				} else {
+						this.weekViewEnhanced = false;
+				}
+				if(weekcookie.weeknumoffset !== undefined) {
+						this.weekNumOffset = weekcookie.weeknumoffset;
+				} else {
+						this.weekNumOffset = 0;
+				}
+				if(weekcookie.weekmodulusnum !== undefined) {
+						this.weekModulusNum = weekcookie.weekmodulusnum;
+				} else {
+						this.weekModulusNum = 1;
+				}
+				if(weekcookie.weeknumbertitle !== undefined) {
+						this.weekNumberTitle = weekcookie.weeknumbertitle;
+				} else {
+						this.weekNumberTitle = true;
+				}
+				if(weekcookie.weekshowsubject !== undefined) {
+						this.weekShowSubject = weekcookie.weekshowsubject;
+				} else {
+						this.weekShowSubject = true;
+				}
+				if(weekcookie.weekviewicons !== undefined) {
+						this.weekViewIcons = weekcookie.weekviewicons;
+				} else {
+						this.weekViewIcons = true;
+				}
+				if(weekcookie.weekviewshrink !== undefined) {
+						this.weekViewShrink = weekcookie.weekviewshrink;
+				} else {
+						this.weekViewShrink = "none";
+				}
+				if(weekcookie.weektimeday !== undefined) {
+						this.weekTimeDay = weekcookie.weektimeday;
+				} else {
+						this.weekTimeDay = 0;
+				}
+				if (weekcookie.useisoweeknum !== undefined) {
+					this.useISOweekNum = weekcookie.useisoweeknum;
+				} else {
+					this.useISOweekNum = false;
+				}
+				if (weekcookie.uberminuteinterval !== undefined) {
+					this.uberMinuteInterval = parseInt(weekcookie.uberminuteinterval, 10);
+				} else {
+					this.uberMinuteInterval = 5;
+				}
+				if (weekcookie.gotoeditfromtemplate !== undefined) {
+					this.gotoEditFromTemplate = weekcookie.gotoeditfromtemplate;
+				} else {
+					this.gotoEditFromTemplate = true;
+				}
+				if (weekcookie.workweekonly !== undefined) {
+					this.workWeekOnly = weekcookie.workweekonly;
+				} else {
+					this.workWeekOnly = false;
+				}
+				if (weekcookie.durabtnontop !== undefined) {
+					this.duraBtnOnTop = weekcookie.durabtnontop;
+				} else {
+					this.duraBtnOnTop = false;
+				}
+			}
+		}
+		this.uberAlarmDura = this.prefs.uberAlarmDura;
+		this.snoozeThrob = this.prefs.blinkNotification;
+		this.bridgeCallDialer = false;
+		this.displayCatField = false;
+		this.perCalAlarms = false;
+		this.alarmsFollowGroups = false;
+		this.snoozeCookie = new Mojo.Model.Cookie("snoozeCookie");
+		if (this.snoozeCookie) {
+			var snzcookie = this.snoozeCookie.get();
+			if (snzcookie) {			
+				if (snzcookie.defaultSnoozeDuration !== undefined) {
+					this.prefs.defaultSnoozeDuration = snzcookie.defaultSnoozeDuration;
+				}
+				if(snzcookie.showSnoozedForBanner !== undefined) {
+						this.showSnoozedForBanner = snzcookie.showSnoozedForBanner;
+				} else {
+						this.showSnoozedForBanner = true;
+				}
+				if(snzcookie.showReminderDashboard !== undefined) {
+					this.showReminderDashboard = snzcookie.showReminderDashboard;
+				} else {
+					this.showReminderDashboard = true;
+				}
+				if (snzcookie.stopAutoClose !== undefined) {
+					this.stopAutoClose = snzcookie.stopAutoClose;
+				} else {
+					//set default value to true
+					this.stopAutoClose = false;
+				}
+				if (snzcookie.sendsonywatch !== undefined) {
+					this.sendSonyWatch = snzcookie.sendsonywatch;
+				} else {
+					this.sendSonyWatch = false;
+				}
+				if (snzcookie.uberopeninview !== undefined) {
+					this.uberOpenInView = snzcookie.uberopeninview;
+				} else {
+					this.uberOpenInView = 'last';
+				}
+				if (snzcookie.bridgecalldialer !== undefined) {
+					this.bridgeCallDialer = snzcookie.bridgecalldialer;
+				} else {
+					this.bridgeCallDialer = false;
+				}
+				if (snzcookie.displaycatfield !== undefined) {
+					this.displayCatField = snzcookie.displaycatfield;
+				} else {
+					this.displayCatField = false;
+				}
+				if(snzcookie.perCalAlarms !== undefined)	{
+					this.perCalAlarms = snzcookie.perCalAlarms;
+				} else {
+					this.perCalAlarms = false;
+				}
+				if(snzcookie.alarmsFollowGroups !== undefined)	{
+					this.alarmsFollowGroups = snzcookie.alarmsFollowGroups;
+				} else {
+					this.alarmsFollowGroups = false;
+				}
+			}
+		}
+
+		//get notification repeat interval and max repeat values from cookie
+		this.notificationCookie = new Mojo.Model.Cookie("notifCookie");
+		if (this.notificationCookie) {
+			var notificationCookie = this.notificationCookie.get();
+			if (notificationCookie) {
+				if(notificationCookie.notificationRepeatInterval !== undefined) {
+					this.prefs.notificationRepeatInterval = notificationCookie.notificationRepeatInterval;
+				} else {
+					//set default value to 2 minutes
+					this.prefs.notificationRepeatInterval = '2';
+				}
+				
+				if (notificationCookie.notificationMaxRepeat !== undefined) {
+					this.prefs.notificationMaxRepeat = notificationCookie.notificationMaxRepeat;
+				} else {
+					//set default value to unlimited
+					this.prefs.notificationMaxRepeat = '99999';
+				}
+			}
+		}
+
+		// prepare some additional widgets (on the fly to prevent editing of translated resources)
+		var newGroup1 = document.createElement('div');
+		var newGroup2 = document.createElement('div');
+		newGroup1.setAttribute('class', 'palm-group');
+		newGroup1.setAttribute('id', 'pv_ubercalendar_div');
+		newGroup2.setAttribute('class', 'palm-group-title');
+		newGroup2.setAttribute('x-mojo-loc', '""');
+		newGroup2.innerHTML = $L('Enhanced Features');
+		newGroup1.appendChild(newGroup2);
+		
+		var newList1 = document.createElement('div');
+		var dList = document.createElement('div');
+		dList.setAttribute('class', "palm-list");
+		newList1.setAttribute('class', "palm-list");
+		var newDiv01 = document.createElement('div');
+		var newDiv02 = document.createElement('div');
+		var newDiv03 = document.createElement('div');
+		newDiv01.setAttribute('class', 'palm-row single');
+		newDiv01.setAttribute('id', 'uberCprefsbutton');
+		newDiv01.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv02.setAttribute('class', 'palm-row-wrapper');
+		newDiv03.setAttribute('style', 'float:left; border-width: 24px 20px; max-width:80%; padding-top:15px; padding-left:20px; margin:0; font-size:18px;');
+		newDiv03.innerHTML=$L('UberCalendar Prefs');
+		newDiv02.appendChild(newDiv03);
+		newDiv01.appendChild(newDiv02);	// create button row
+		newList1.appendChild(newDiv01);	// add button to first list  
+		var newDrawer1 = document.createElement('div');
+		newDrawer1.setAttribute('class', 'drawer');
+		newDrawer1.setAttribute('id', 'uberCaldrawer');
+		newDrawer1.setAttribute('x-mojo-element', 'Drawer');
+		
+		var newDiv12 = document.createElement('div');
+		var newDiv13 = document.createElement('div');
+		var newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_default_snooze_duration");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add snooze dur to drawer list
+
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_notification_repeat_interval");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add repeat to drawer list
+
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_notification_max_repeat");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add max repeat to drawer list
+		
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_uber_alarm_dura");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add alarm dura to drawer list
+		
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_uber_open_in_view");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add open in view to drawer list
+
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_uber_back_gesture");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add back gesture to drawer list
+
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_uber_minute_interval");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add minute interval to drawer list
+
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_uber_weeknumber_offset");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add weeknumber offset to drawer list
+
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_uber_weeknumber_modulus");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		dList.appendChild(newDiv12); // add weeknumber modulus to drawer list
+		
+		var newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-weeknumbertitle-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Show week number');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add week number to drawer list
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-useisoweeknum-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Use ISO week number');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add iso week number to drawer list
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-useagendaz-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Use AgendaZ');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add agendaZ to drawer list
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-showsnoozedforbanner-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Snoozed for Banner');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add snooze banner to drawer list
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-showreminderdashboard-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Reminder Dashboard');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add reminder dash to drawer list
+
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-stopautoclose-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Stop auto close');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add stop auto to drawer list
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-sendsonywatch-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Send alert to ST-Watch');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add stop auto to drawer list
+		
+		var d2List = document.createElement('div');  // list for 2nd level day drawer
+		d2List.setAttribute('class', "palm-list");
+		newDiv01 = document.createElement('div');
+		newDiv01.setAttribute('class', 'palm-row');
+		newDiv01.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv01.setAttribute('id', 'dayuberCprefsbutton'); // button for 2nd level day drawer
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-dayviewenhanced-toggle"); //toggle
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Day views enhanced');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14); //toggle
+		newDiv01.appendChild(newDiv12); // toggle in btn
+		dList.appendChild(newDiv01); // toggle+day Drawer2 btn to drawer1 list
+		var newDrawer2 = document.createElement('div');
+		newDrawer2.setAttribute('class', 'drawer');
+		newDrawer2.setAttribute('id', 'dayuberCaldrawer');
+		newDrawer2.setAttribute('x-mojo-element', 'Drawer');
+		dList.appendChild(newDrawer2); // add day drawer2 to drawer1 list
+		newDrawer2.appendChild(d2List); // add second list to day drawer2
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-dayviewcompressed-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Day: Compress all free');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		d2List.appendChild(newDiv11); // add day view compression to second drawer list
+
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv11.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.setAttribute('id', "pv_uber_dayviewshrink");
+		newDiv12.appendChild(newDiv13);
+		newDiv11.appendChild(newDiv12);
+		d2List.appendChild(newDiv11); // add day view shrink to second drawer list
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-dayviewicons-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Day: view icons');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		d2List.appendChild(newDiv11); // add day view icons to second drawer list
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-dayminutepopup-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Minute popup');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		d2List.appendChild(newDiv11); // add day minute popup to second drawer list
+		
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv13.setAttribute('class', "palm-row-wrapper");
+		newDiv14.setAttribute('id', "pv_uber_day_minute_interval");
+		newDiv14.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.appendChild(newDiv14);
+		newDiv12.appendChild(newDiv13);
+		d2List.appendChild(newDiv12); // add day minute interval to second drawer list
+		
+		var d3List = document.createElement('div');  // list for 3rd level drawer
+		d3List.setAttribute('class', "palm-list");
+		newDiv01 = document.createElement('div');
+		newDiv01.setAttribute('class', 'palm-row');
+		newDiv01.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv01.setAttribute('id', 'monthuberCprefsbutton'); // button for 3rd level drawer
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-monthviewenhanced-toggle"); //toggle
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Month view enhanced');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14); //toggle
+		newDiv01.appendChild(newDiv12); // toggle in btn
+		dList.appendChild(newDiv01); // toggle+Drawer3 btn to drawer1 list
+		var newDrawer3 = document.createElement('div');
+		newDrawer3.setAttribute('class', 'drawer');
+		newDrawer3.setAttribute('id', 'monthuberCaldrawer');
+		newDrawer3.setAttribute('x-mojo-element', 'Drawer');
+		dList.appendChild(newDrawer3); // add drawer3 to drawer1 list
+		newDrawer3.appendChild(d3List); // add 3 list to 3 drawer
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-monthalldaycolors-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Show all-day color');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		d3List.appendChild(newDiv11); // add all day color to month drawer3 list
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-monthviewicons-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Month: show icons');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		d3List.appendChild(newDiv11); // add show icons to month drawer3 list
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-monthusebusy-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Show event markers');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		d3List.appendChild(newDiv11); // add show icons to month drawer3 list
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-monthverticalicons-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Vertical Icon Order');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		d3List.appendChild(newDiv11); // add vertical icons to month drawer3 list
+
+		var d4List = document.createElement('div');  // list for week level drawer
+		d4List.setAttribute('class', "palm-list");
+		newDiv01 = document.createElement('div');
+		newDiv01.setAttribute('class', 'palm-row');
+		newDiv01.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv01.setAttribute('id', 'weekuberCprefsbutton'); // button for week level 
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-weekviewenhanced-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Week view enhanced');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv01.appendChild(newDiv12); // toggle in btn
+		dList.appendChild(newDiv01); // toggle+week Drawer btn to drawer1 list
+		var newDrawer4 = document.createElement('div');
+		newDrawer4.setAttribute('class', 'drawer');
+		newDrawer4.setAttribute('id', 'weekuberCaldrawer');
+		newDrawer4.setAttribute('x-mojo-element', 'Drawer');
+		dList.appendChild(newDrawer4); // add week drawer4 to drawer1 list
+		newDrawer4.appendChild(d4List); // add week list to week drawer
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-weekshowsubject-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Show event subject');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		d4List.appendChild(newDiv11); // add show event subject to week drawer4 list
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-workweekonly-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Work week only');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		d4List.appendChild(newDiv11); // add work week to drawer list
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-weekviewicons-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Week: show icons');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		d4List.appendChild(newDiv11); // add show icons to week drawer4 list
+	
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.setAttribute('id', "pv_uber_weekviewshrink");
+		newDiv12.appendChild(newDiv13);
+		newDiv11.appendChild(newDiv12);
+		d4List.appendChild(newDiv11); // add week view shrink to week drawer4 list
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ListSelector");
+		newDiv13.setAttribute('id', "pv_uber_weektimeday");
+		newDiv12.appendChild(newDiv13);
+		newDiv11.appendChild(newDiv12);
+		d4List.appendChild(newDiv11); // add week time day to week drawer4 list
+		
+		var d5List = document.createElement('div');  // container for cat level drawer
+		d5List.setAttribute('id', "uber-cat-list-container");
+		d5List.innerHTML = '<div id="uberCatList" x-mojo-element="IndexedList" class="palm-list" > </div>';
+		newDiv01 = document.createElement('div');
+		newDiv01.setAttribute('class', 'palm-row');
+		newDiv01.setAttribute('x-mojo-tap-highlight', "momentary");
+		newDiv01.setAttribute('id', 'catuberCprefsbutton'); // button for week level 
+		newDiv14 = document.createElement('div');
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Categories');
+		newDiv01.appendChild(newDiv14); // title in btn
+		dList.appendChild(newDiv01); // cat Drawer btn to drawer1 list
+		var newDrawer5 = document.createElement('div');
+		newDrawer5.setAttribute('class', 'drawer');
+		newDrawer5.setAttribute('id', 'catuberCaldrawer');
+		newDrawer5.setAttribute('x-mojo-element', 'Drawer');
+		dList.appendChild(newDrawer5); // add cat drawer5 to drawer1 list
+		newDrawer5.appendChild(d5List); // add cat list container to cat drawer
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-gotoeditfromtemplate-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Goto edit from Template');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add Goto edit from Template drawer list
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-durabtnontop-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Duration Btn on Top');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add duration btn on top drawer list
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-snoozethrob-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Blink for Alert');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add blink to drawer list
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-ucgroupsfirst-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('UC Groups First');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add ucgroupsfirst to drawer list
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-percalalarms-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Per Cal Alarms');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add Per Cal Alarms to drawer list
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-alarmsfollowgroups-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Alarms Follow Groups');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add alarmsFollowGroups to drawer list
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-bridgecalldialer-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Bridge Call Dialer');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add bridge call dialer to drawer list
+		
+		newDiv11 = document.createElement('div');
+		newDiv12 = document.createElement('div');
+		newDiv13 = document.createElement('div');
+		newDiv14 = document.createElement('div');
+		newDiv11.setAttribute('class', "palm-row last");
+		newDiv12.setAttribute('class', "palm-row-wrapper");
+		newDiv13.setAttribute('x-mojo-element', "ToggleButton");
+		newDiv13.setAttribute('id', "prefs-displaycatfield-toggle");
+		newDiv14.setAttribute('class', "title");
+		newDiv14.setAttribute('x-mojo-loc', '""');
+		newDiv14.innerHTML = $L('Display Categories');
+		newDiv12.appendChild(newDiv13);
+		newDiv12.appendChild(newDiv14);
+		newDiv11.appendChild(newDiv12);
+		dList.appendChild(newDiv11); // add display cat field to drawer list
+		
+		newDrawer1.appendChild(dList); // add 1st drawer list to drawer1
+		newList1.appendChild(newDrawer1);  // add drawer1 to first list
+		newGroup1.appendChild(newList1);
+		
+		this.controller.get('pv_alarmsound_div').parentNode.insertBefore(newGroup1, this.controller.get('pv_accounts_div')); //add first list to prefs
+
+		this.uberCalendarPrefs = {
+			showsnoozedforbanner: { id: "ShowSnoozedForBanner", value: this.showSnoozedForBanner },
+			showreminderdashboard: { id: "ShowReminderDashboard", value: this.showReminderDashboard },
+			stopautoclose: {id: "StopAutoClose", value: this.stopAutoClose},
+			sendsonywatch: {id: "SendSonyWatch", value: this.sendSonyWatch},
+			dayviewcompressed: {id: "DayViewCompressed", value: this.dayViewCompressed},
+			dayviewicons: {id: "DayViewIcons", value: this.dayViewIcons},
+			dayminutepopup: {id: "DayMinutePopup", value: this.dayMinutePopup},
+			weekviewenhanced: {id: "WeekViewEnhanced", value: this.weekViewEnhanced},
+			dayviewenhanced: {id: "DayViewEnhanced", value: this.dayViewEnhanced},
+			monthviewenhanced: {id: "MonthViewEnhanced", value: this.monthViewEnhanced},
+			monthalldaycolors: {id: "MonthAllDayColors", value: this.monthAllDayColors},
+			monthviewicons: {id: "MonthViewIcons", value: this.monthViewIcons},
+			monthusebusy: {id: "MonthUseBusy", value: this.monthUseBusy},
+			monthverticalicons: {id: "MonthVerticalIcons", value: this.monthVerticalIcons},
+			weeknumbertitle: {id: "WeekNumberTitle", value: this.weekNumberTitle},
+			useisoweeknum: {id: "UseISOweekNum", value: this.useISOweekNum},
+			useagendaz: {id: "UseAgendaZ", value: this.useAgendaZ},
+			ucgroupsfirst: {id: "UcGroupsFirst", value: this.ucGroupsFirst},
+			weekshowsubject: {id: "WeekShowSubject", value: this.weekShowSubject},
+			weekviewicons: {id: "WeekViewIcons", value: this.weekViewIcons},
+			snoozethrob: {id: "SnoozeThrob", value: this.snoozeThrob},
+			bridgecalldialer: {id: "BridgeCallDialer", value: this.bridgeCallDialer},
+			displaycatfield: {id: "DisplayCatField", value: this.displayCatField},
+			percalalarms: {id: "PerCalAlarms", value: this.perCalAlarms},
+			alarmsfollowgroups: {id: "AlarmsFollowGroups", value: this.alarmsFollowGroups},
+			gotoeditfromtemplate: {id: "GotoEditFromTemplate", value: this.gotoEditFromTemplate},
+			workweekonly: {id: "WorkWeekOnly", value: this.workWeekOnly},
+			durabtnontop: {id: "DuraBtnOnTop", value: this.duraBtnOnTop}
+		};
+
+		var uberCalendarAttributes = {
+			modelProperty: "value",
+			trueValue: true,
+			falseValue: false
+		};
+		
+		this.controller.setupWidget('prefs-showsnoozedforbanner-toggle', uberCalendarAttributes, this.uberCalendarPrefs.showsnoozedforbanner);
+		this.controller.setupWidget('prefs-showreminderdashboard-toggle', uberCalendarAttributes, this.uberCalendarPrefs.showreminderdashboard);
+		this.controller.setupWidget('prefs-stopautoclose-toggle', uberCalendarAttributes, this.uberCalendarPrefs.stopautoclose);
+		this.controller.setupWidget('prefs-sendsonywatch-toggle', uberCalendarAttributes, this.uberCalendarPrefs.sendsonywatch);
+		this.controller.setupWidget('prefs-snoozethrob-toggle', uberCalendarAttributes, this.uberCalendarPrefs.snoozethrob);
+		this.controller.setupWidget('prefs-bridgecalldialer-toggle', uberCalendarAttributes, this.uberCalendarPrefs.bridgecalldialer);
+		this.controller.setupWidget('prefs-displaycatfield-toggle', uberCalendarAttributes, this.uberCalendarPrefs.displaycatfield);
+		this.controller.setupWidget('prefs-percalalarms-toggle', uberCalendarAttributes, this.uberCalendarPrefs.percalalarms);
+		this.controller.setupWidget('prefs-alarmsfollowgroups-toggle', uberCalendarAttributes, this.uberCalendarPrefs.alarmsfollowgroups);
+		this.controller.setupWidget('prefs-dayviewcompressed-toggle', uberCalendarAttributes, this.uberCalendarPrefs.dayviewcompressed);
+		this.controller.setupWidget('prefs-dayviewicons-toggle', uberCalendarAttributes, this.uberCalendarPrefs.dayviewicons);
+		this.controller.setupWidget('prefs-dayminutepopup-toggle', uberCalendarAttributes, this.uberCalendarPrefs.dayminutepopup);
+		this.controller.setupWidget('prefs-weekviewenhanced-toggle', uberCalendarAttributes, this.uberCalendarPrefs.weekviewenhanced);
+		this.controller.setupWidget('prefs-dayviewenhanced-toggle', uberCalendarAttributes, this.uberCalendarPrefs.dayviewenhanced);
+		this.controller.setupWidget('prefs-monthviewenhanced-toggle', uberCalendarAttributes, this.uberCalendarPrefs.monthviewenhanced);
+		this.controller.setupWidget('prefs-monthalldaycolors-toggle', uberCalendarAttributes, this.uberCalendarPrefs.monthalldaycolors);
+		this.controller.setupWidget('prefs-monthviewicons-toggle', uberCalendarAttributes, this.uberCalendarPrefs.monthviewicons);
+		this.controller.setupWidget('prefs-monthusebusy-toggle', uberCalendarAttributes, this.uberCalendarPrefs.monthusebusy);
+		this.controller.setupWidget('prefs-monthverticalicons-toggle', uberCalendarAttributes, this.uberCalendarPrefs.monthverticalicons);
+		this.controller.setupWidget('prefs-weeknumbertitle-toggle', uberCalendarAttributes, this.uberCalendarPrefs.weeknumbertitle);
+		this.controller.setupWidget('prefs-useisoweeknum-toggle', uberCalendarAttributes, this.uberCalendarPrefs.useisoweeknum);
+		this.controller.setupWidget('prefs-useagendaz-toggle', uberCalendarAttributes, this.uberCalendarPrefs.useagendaz);
+		this.controller.setupWidget('prefs-ucgroupsfirst-toggle', uberCalendarAttributes, this.uberCalendarPrefs.ucgroupsfirst);
+		this.controller.setupWidget('prefs-weekshowsubject-toggle', uberCalendarAttributes, this.uberCalendarPrefs.weekshowsubject);
+		this.controller.setupWidget('prefs-weekviewicons-toggle', uberCalendarAttributes, this.uberCalendarPrefs.weekviewicons);
+		this.controller.setupWidget('prefs-gotoeditfromtemplate-toggle', uberCalendarAttributes, this.uberCalendarPrefs.gotoeditfromtemplate);
+		this.controller.setupWidget('prefs-workweekonly-toggle', uberCalendarAttributes, this.uberCalendarPrefs.workweekonly);
+		this.controller.setupWidget('prefs-durabtnontop-toggle', uberCalendarAttributes, this.uberCalendarPrefs.durabtnontop);
+
+		this.controller.setupWidget('pv_default_snooze_duration',
+									this.snoozeAttrs = {
+										modelProperty: 'command',
+										label: $L("Snooze"),
+								      	choices: this.snoozeDurations
+									},
+									this.snoozeModel = {
+										command: this.prefs.defaultSnoozeDuration
+									}
+		);
+		this.controller.setupWidget('pv_notification_repeat_interval',
+									this.repeatIntervalAttrs = {
+										modelProperty: 'value',
+										label: $L("Repeat Interval"),
+								      	choices: this.notificationRepeatIntervals
+									},
+									this.repeatIntervalModel = {
+										value: this.prefs.notificationRepeatInterval
+									}
+		);
+		this.controller.setupWidget('pv_notification_max_repeat',
+									this.maxRepeatAttrs = {
+										modelProperty: 'value',
+										label: $L("Max. Repeat"),
+								      	choices: this.notificationMaxRepeats
+									},
+									this.maxRepeatModel = {
+										value: this.prefs.notificationMaxRepeat
+									}
+		);
+		this.controller.setupWidget('pv_uber_alarm_dura',
+									this.alarmDuraAttrs = {
+										modelProperty: 'value',
+										label: $L("Vibration Duration"),
+								      	choices: this.uberAlarmDuration
+									},
+									this.alarmDuraModel = {
+										value: this.prefs.uberAlarmDura
+									}
+		);
+		this.controller.setupWidget('pv_uber_open_in_view',
+									this.uberOpenInViewAttrs = {
+										modelProperty: 'value',
+										label: $L("Open In View"),
+								      	choices: this.uberOpenInViewOptions
+									},
+									this.uberOpenInViewModel = {
+										value: this.uberOpenInView
+									}
+		);
+		this.controller.setupWidget('pv_uber_back_gesture',
+									this.uberBackGestureAttrs = {
+										modelProperty: 'value',
+										label: $L("Back Gesture"),
+								      	choices: this.uberBackGestureOptions
+									},
+									this.uberBackGestureModel = {
+										value: this.uberBackGesture
+									}
+		);
+		this.controller.setupWidget('pv_uber_dayviewshrink',
+									this.uberShrinkDayViewAttrs = {
+										modelProperty: 'value',
+										label: $L("Shrink Day View"),
+								      	choices: this.uberShrinkDayOptions
+									},
+									this.uberShrinkDayModel = {
+										value: this.dayViewShrink
+									}
+		);
+		this.controller.setupWidget("pv_uber_minute_interval",
+										this.minuteIntervalAttrs = {
+										modelProperty: 'value',
+										label: $L("Event Minute Interval"),
+										choices: this.uberMinuteIntervals
+									},
+									this.minuteIntervalModel = {
+										value: this.uberMinuteInterval
+									}
+		);
+		this.controller.setupWidget("pv_uber_day_minute_interval",
+										this.dayMinIntervalAttrs = {
+										modelProperty: 'value',
+										label: $L("Day Popup Interval"),
+										choices: this.uberDayMinIntervals
+									},
+									this.dayMinIntervalModel = {
+										value: this.dayMinInterval
+									}
+		);
+		this.controller.setupWidget("pv_uber_weeknumber_offset",
+										this.weekNumOffsetAttrs = {
+										modelProperty: 'value',
+										label: $L("Wk-No Shift"),
+										choices: this.uberWeekNumberOffset
+									},
+									this.weekNumOffsetModel = {
+										value: this.weekNumOffset
+									}
+		);
+		this.controller.setupWidget("pv_uber_weeknumber_modulus",
+										this.weekModulusAttrs = {
+										modelProperty: 'value',
+										label: $L("Wk-No Modulo"),
+										choices: this.uberWeekNumberModulo
+									},
+									this.weekModulusModel = {
+										value: this.weekModulusNum
+									}
+		);
+		this.controller.setupWidget('pv_uber_weekviewshrink',
+									this.uberShrinkWeekViewAttrs = {
+										modelProperty: 'value',
+										label: $L("Shrink Week View"),
+								      	choices: this.uberShrinkWeekOptions
+									},
+									this.uberShrinkWeekModel = {
+										value: this.weekViewShrink
+									}
+		);
+		this.controller.setupWidget('pv_uber_weektimeday',
+									this.uberWeekTimeDayAttrs = {
+										modelProperty: 'value',
+										label: $L("Time Mark Day"),
+								      	choices: this.uberWeekTimeDayOptions
+									},
+									this.uberWeekTimeDayModel = {
+										value: this.weekTimeDay
+									}
+		);
+		this.controller.setupWidget("uberCaldrawer",
+									this.uberCalAttrs = {
+										modelProperty: 'open',
+										unstyled: false,
+										drawerOpenerOffset: 0
+									},
+									this.uberCalDrawerModel = {open: false}
+		);
+		this.controller.setupWidget("dayuberCaldrawer",
+									this.uberCalAttrs = {
+										modelProperty: 'open',
+										unstyled: false,
+										drawerBottomOffset: 850
+									},
+									this.uberCalDrawerModel = {open: false}
+		);
+		this.controller.setupWidget("monthuberCaldrawer",
+									this.uberCalAttrs = {
+										modelProperty: 'open',
+										unstyled: false,
+										drawerBottomOffset: 880
+									},
+									this.uberCalDrawerModel = {open: false}
+		);
+		this.controller.setupWidget("weekuberCaldrawer",
+									this.uberCalAttrs = {
+										modelProperty: 'open',
+										unstyled: false,
+										drawerBottomOffset: 950
+									},
+									this.uberCalDrawerModel = {open: false}
+		);
+		this.controller.setupWidget("catuberCaldrawer",
+									this.uberCalAttrs = {
+										modelProperty: 'open',
+										unstyled: false,
+										drawerBottomOffset: 1050
+									},
+									this.uberCalDrawerModel = {open: false}
+		);
+		this.controller.setupWidget("uberCprefsbutton",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		this.controller.setupWidget("dayuberCprefsbutton",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		this.controller.setupWidget("monthuberCprefsbutton",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		this.controller.setupWidget("weekuberCprefsbutton",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		this.controller.setupWidget("catuberCprefsbutton",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		this.uberCatAttrs = {
+			itemTemplate:'shared/ubercat-item', 
+			listTemplate:'shared/ubercat-list-container',
+			formatters: {
+					name: function(value, model) { 
+						return '/media/internal/.scrims/ubercalendar/icon-' + value + '.png';
+					}
+				},
+			addItemLabel:$L("Add Category"), 
+			swipeToDelete:true, 
+			reorderable:true, 
+			emptyTemplate:'shared/ubercat-emptylist'
+		};
+		this.uberCatModel = {listTitle: "categories", items:this.userUberCats};
+		this.uberCatList = this.controller.get('uberCatList');
+		this.uberCatListChangeHandler = this.handleUberCatListChange.bind(this);
+		this.uberCatListAddHandler = this.handleUberCatListAdd.bind(this);
+		this.uberCatListDeleteHandler = this.handleUberCatListDelete.bind(this);
+		this.uberCatListReorderHandler = this.handleUberCatListReorder.bind(this);
+		this.controller.setupWidget('uberCatList', this.uberCatAttrs, this.uberCatModel);
 		this.requests	= [];
 		this.syncSources= [];
 		this.dirty		= false;
@@ -392,6 +1678,7 @@ var PrefsAssistant	= Class.create({
 	},
 	
 	activate: function() {
+		this.orangeKeyDown = false;
 		//Mojo.Log.info('prefs-assistant: activate');
 		this.prefsManager.validateDefaultCalPref();
 		
@@ -423,17 +1710,195 @@ var PrefsAssistant	= Class.create({
 		
 		this.chooseNotificationRingtone = this.chooseNotificationRingtone.bindAsEventListener(this);
 		this.controller.listen('currentringtonerow',Mojo.Event.tap, this.chooseNotificationRingtone);		
+	
+		this.snoozeDurationSelectionHandler = this.handleSnoozeDurationSelection.bindAsEventListener(this);
+		this.controller.get('pv_default_snooze_duration').observe(Mojo.Event.propertyChange, this.snoozeDurationSelectionHandler);
+		this.repeatIntervalSelectionHandler = this.handleRepeatIntervalSelection.bindAsEventListener(this);
+		this.controller.get('pv_notification_repeat_interval').observe(Mojo.Event.propertyChange, this.repeatIntervalSelectionHandler);
+		this.alarmDuraSelectionHandler = this.handleAlarmDuraSelection.bindAsEventListener(this);
+		this.controller.get('pv_uber_alarm_dura').observe(Mojo.Event.propertyChange, this.alarmDuraSelectionHandler);
+		this.maxRepeatSelectionHandler = this.handleMaxRepeatSelection.bindAsEventListener(this);
+		this.controller.get('pv_notification_max_repeat').observe(Mojo.Event.propertyChange, this.maxRepeatSelectionHandler);
+		this.uberOpenInViewSelectionHandler = this.handleUberOpenInViewSelection.bindAsEventListener(this);
+		this.controller.get('pv_uber_open_in_view').observe(Mojo.Event.propertyChange, this.uberOpenInViewSelectionHandler);
+		this.uberShrinkDaySelectionHandler = this.handleUberShrinkDaySelection.bindAsEventListener(this);
+		this.uberBackGestureSelectionHandler = this.handleUberBackGestureSelection.bindAsEventListener(this);
+		this.controller.get('pv_uber_back_gesture').observe(Mojo.Event.propertyChange, this.uberBackGestureSelectionHandler);
+		this.controller.get('pv_uber_dayviewshrink').observe(Mojo.Event.propertyChange, this.uberShrinkDaySelectionHandler);
+		this.uberMinuteIntervalHandler = this.handleUberMinuteInterval.bindAsEventListener(this);
+		this.controller.get('pv_uber_minute_interval').observe(Mojo.Event.propertyChange, this.uberMinuteIntervalHandler);
+		this.uberDayMinIntervalHandler = this.handleUberDayMinInterval.bindAsEventListener(this);
+		this.controller.get('pv_uber_day_minute_interval').observe(Mojo.Event.propertyChange, this.uberDayMinIntervalHandler);
+		this.uberWkNumOffsetHandler = this.handleUberWkNumOffset.bindAsEventListener(this);
+		this.controller.get('pv_uber_weeknumber_offset').observe(Mojo.Event.propertyChange, this.uberWkNumOffsetHandler);
+		this.uberWkModulusNumHandler = this.handleUberWkModulusNum.bindAsEventListener(this);
+		this.controller.get('pv_uber_weeknumber_modulus').observe(Mojo.Event.propertyChange, this.uberWkModulusNumHandler);
+		this.uberShrinkWeekSelectionHandler = this.handleUberShrinkWeekSelection.bindAsEventListener(this);
+		this.controller.get('pv_uber_weekviewshrink').observe(Mojo.Event.propertyChange, this.uberShrinkWeekSelectionHandler);
+		this.uberWeekTimeDaySelectionHandler = this.handleUberWeekTimeDaySelection.bindAsEventListener(this);
+		this.controller.get('pv_uber_weektimeday').observe(Mojo.Event.propertyChange, this.uberWeekTimeDaySelectionHandler);
+
+		this.uberTogglePrefsHandler = this.handleUberTogglePrefs.bindAsEventListener(this);
+		this.controller.listen('prefs-showsnoozedforbanner-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-showreminderdashboard-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-stopautoclose-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-sendsonywatch-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-snoozethrob-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-bridgecalldialer-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-displaycatfield-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-percalalarms-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-alarmsfollowgroups-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-dayviewcompressed-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-dayviewicons-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-dayminutepopup-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-weekviewenhanced-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-dayviewenhanced-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-monthviewenhanced-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-monthviewicons-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-monthusebusy-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-monthverticalicons-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-monthalldaycolors-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-weeknumbertitle-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-useisoweeknum-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-useagendaz-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-ucgroupsfirst-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-weekshowsubject-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-weekviewicons-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-gotoeditfromtemplate-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-workweekonly-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.listen('prefs-durabtnontop-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		
+		this.ucDrawerBtnHandler = this.toggleUCdrawer.bindAsEventListener(this);
+		this.controller.get('uberCprefsbutton').observe('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.get('dayuberCprefsbutton').observe('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.get('monthuberCprefsbutton').observe('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.get('weekuberCprefsbutton').observe('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.get('catuberCprefsbutton').observe('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.listen(this.uberCatList, Mojo.Event.listChange, this.uberCatListChangeHandler);
+		this.controller.listen(this.uberCatList, Mojo.Event.listAdd, this.uberCatListAddHandler);
+		this.controller.listen(this.uberCatList, Mojo.Event.listDelete, this.uberCatListDeleteHandler);
+		this.controller.listen(this.uberCatList, Mojo.Event.listReorder, this.uberCatListReorderHandler);
+		this.keyUpHandler = this.handleKeyUp.bind(this);
+		this.controller.listen(this.controller.sceneElement, Mojo.Event.keyup, this.keyUpHandler);
+		this.keyDownHandler = this.handleKeyDown.bind(this);
+		this.controller.listen(this.controller.sceneElement, Mojo.Event.keydown, this.keyDownHandler);
 	},
 	
 	handleAddAccountBtnTap: function() {
 		this.controller.get("pv_accounts_list_new").mojo.addAccount({displayText: $L("New Calendar Account")});
 	},
 	
+		
+	handleKeyUp: function(event) {
+		// Check for Orange key
+		if (event.originalEvent.altKey || event.originalEvent.keyCode === 129) {
+    	//Mojo.Log.info("handleKeyUp detected ORANGE key");
+			this.orangeKeyDown = false;
+ 		}	
+	},
+	
+	handleKeyDown: function(event) {
+		// Check for Orange key
+		if (event.originalEvent.altKey || event.originalEvent.keyCode === 129) {
+    	//Mojo.Log.info("handleKeyDown detected ORANGE key");
+			this.orangeKeyDown = true;
+ 		}
+	},
+
 	handleViewOptionBtnTap: function(){	
 		this.controller.stageController.pushScene("prefs-options");
 	},
 	
 	deactivate: function() {
+		//save default snooze duration to cookie
+		
+		if (this.catCookie) {
+			var cats = this.userUberCats.clone();
+			this.userUberCats = [];
+			cats.each(function(item) {
+				if(item.name !== "newcategory") {
+						this.userUberCats.push(item);
+					}
+				}, this);
+			this.catCookie.put({userubercats: this.userUberCats});
+		}
+		if (this.snoozeCookie) {
+			this.snoozeCookie.put({ 
+									defaultSnoozeDuration: this.prefs.defaultSnoozeDuration,
+									showSnoozedForBanner: this.showSnoozedForBanner,
+									showReminderDashboard: this.showReminderDashboard,
+									stopAutoClose: this.stopAutoClose,
+									sendsonywatch: this.sendSonyWatch,
+									uberopeninview: this.uberOpenInView,
+									perCalAlarms: this.perCalAlarms,
+									alarmsFollowGroups: this.alarmsFollowGroups,
+									displaycatfield: this.displayCatField,
+									bridgecalldialer: this.bridgeCallDialer
+									});
+		}
+		if (this.dayCookie) {
+			this.dayCookie.put({ 
+									dayviewcompressed: this.dayViewCompressed,
+									dayviewenhanced: this.dayViewEnhanced,
+									dayviewshrink: this.dayViewShrink,
+									weeknumoffset: this.weekNumOffset,
+									weeknumbertitle: this.weekNumberTitle,
+									useisoweeknum: this.useISOweekNum,
+									useagendaz: this.useAgendaZ,
+									ucgroupsfirst: this.ucGroupsFirst,
+									prefsstartofweek: this.prefs.startOfWeek,
+									weekmodulusnum: this.weekModulusNum,
+									uberbackgesture: this.uberBackGesture,
+									dayminutepopup: this.dayMinutePopup,
+									daymininterval: this.dayMinInterval,
+									dayviewicons: this.dayViewIcons
+									});
+		}
+		if (this.monthCookie) {
+			this.monthCookie.put({ 
+									monthalldaycolors: this.monthAllDayColors,
+									monthviewenhanced: this.monthViewEnhanced,
+									monthviewicons: this.monthViewIcons,
+									monthusebusy: this.monthUseBusy,
+									monthverticalicons: this.monthVerticalIcons,
+									weeknumoffset: this.weekNumOffset,
+									weeknumbertitle: this.weekNumberTitle,
+									useisoweeknum: this.useISOweekNum,
+									useagendaz: this.useAgendaZ,
+									ucgroupsfirst: this.ucGroupsFirst,
+									prefsstartofweek: this.prefs.startOfWeek,
+									weekmodulusnum: this.weekModulusNum,
+									uberbackgesture: this.uberBackGesture
+									});
+		}
+		if (this.weekCookie) {
+			this.weekCookie.put({ 
+									weekviewenhanced: this.weekViewEnhanced,
+									weeknumoffset: this.weekNumOffset,
+									weeknumbertitle: this.weekNumberTitle,
+									useisoweeknum: this.useISOweekNum,
+									useagendaz: this.useAgendaZ,
+									ucgroupsfirst: this.ucGroupsFirst,
+									prefsstartofweek: this.prefs.startOfWeek,
+									weekshowsubject: this.weekShowSubject,
+									weekviewicons: this.weekViewIcons,
+									weekviewshrink: this.weekViewShrink,
+									weektimeday: this.weekTimeDay,
+									weekmodulusnum: this.weekModulusNum,
+									uberbackgesture: this.uberBackGesture,
+									uberminuteinterval: this.uberMinuteInterval,
+									gotoeditfromtemplate: this.gotoEditFromTemplate,
+									durabtnontop: this.duraBtnOnTop,
+									workweekonly: this.workWeekOnly
+									});
+		}
+		//save notification repeat preferences
+		if (this.notificationCookie) {
+			this.notificationCookie.put({
+										notificationRepeatInterval: this.prefs.notificationRepeatInterval,
+										notificationMaxRepeat: this.prefs.notificationMaxRepeat
+										});
+		}
 		//Mojo.Log.info('prefs-assistant: deactivate');
 		this.controller.get('pv_start_of_week').stopObserving('mojo-tap', this.startOfWeekClickHandler);
 		
@@ -456,6 +1921,60 @@ var PrefsAssistant	= Class.create({
 		
 		this.controller.stopListening('currentringtonerow',Mojo.Event.tap, this.chooseNotificationRingtone);		
 
+		this.controller.get('pv_default_snooze_duration').stopObserving(Mojo.Event.propertyChange, this.snoozeDurationSelectionHandler);
+		this.controller.get('pv_notification_repeat_interval').stopObserving(Mojo.Event.propertyChange, this.repeatIntervalSelectionHandler);
+		this.controller.get('pv_notification_max_repeat').stopObserving(Mojo.Event.propertyChange, this.maxRepeatSelectionHandler);
+		this.controller.get('pv_uber_alarm_dura').stopObserving(Mojo.Event.propertyChange, this.alarmDuraSelectionHandler);
+		this.controller.get('pv_uber_open_in_view').stopObserving(Mojo.Event.propertyChange, this.uberOpenInViewSelectionHandler);
+		this.controller.get('pv_uber_back_gesture').stopObserving(Mojo.Event.propertyChange, this.uberBackGestureSelectionHandler);
+		this.controller.get('pv_uber_dayviewshrink').stopObserving(Mojo.Event.propertyChange, this.uberShrinkDaySelectionHandler);
+		this.controller.get('pv_uber_minute_interval').stopObserving(Mojo.Event.propertyChange, this.uberMinuteIntervalHandler);
+		this.controller.get('pv_uber_day_minute_interval').stopObserving(Mojo.Event.propertyChange, this.uberDayMinIntervalHandler);
+		this.controller.get('pv_uber_weeknumber_offset').stopObserving(Mojo.Event.propertyChange, this.uberWkNumOffsetHandler);
+		this.controller.get('pv_uber_weeknumber_modulus').stopObserving(Mojo.Event.propertyChange, this.uberWkModulusNumHandler);
+		this.controller.get('pv_uber_weekviewshrink').stopObserving(Mojo.Event.propertyChange, this.uberShrinkWeekSelectionHandler);
+		this.controller.get('pv_uber_weektimeday').stopObserving(Mojo.Event.propertyChange, this.uberWeekTimeDaySelectionHandler);
+		
+		this.controller.stopListening('prefs-showsnoozedforbanner-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-showreminderdashboard-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-stopautoclose-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-sendsonywatch-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-snoozethrob-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-bridgecalldialer-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-displaycatfield-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-percalalarms-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-alarmsfollowgroups-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-dayviewcompressed-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-dayviewicons-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-dayminutepopup-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-weekviewenhanced-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-dayviewenhanced-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-monthviewenhanced-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-monthalldaycolors-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-monthviewicons-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-monthusebusy-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-monthverticalicons-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-weekviewicons-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-weeknumbertitle-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-useisoweeknum-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-useagendaz-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-ucgroupsfirst-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-weekshowsubject-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-gotoeditfromtemplate-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-workweekonly-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.stopListening('prefs-durabtnontop-toggle', Mojo.Event.propertyChange, this.uberTogglePrefsHandler);
+		this.controller.get('uberCprefsbutton').stopObserving('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.get('dayuberCprefsbutton').stopObserving('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.get('monthuberCprefsbutton').stopObserving('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.get('weekuberCprefsbutton').stopObserving('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.get('catuberCprefsbutton').stopObserving('mojo-tap', this.ucDrawerBtnHandler);
+		this.controller.stopListening(this.uberCatList, Mojo.Event.listChange, this.uberCatListChangeHandler);
+		this.controller.stopListening(this.uberCatList, Mojo.Event.listAdd, this.uberCatListAddHandler);
+		this.controller.stopListening(this.uberCatList, Mojo.Event.listDelete, this.uberCatListDeleteHandler);
+		this.controller.stopListening(this.uberCatList, Mojo.Event.listReorder, this.uberCatListReorderHandler);
+		
+		this.controller.stopListening(this.controller.sceneElement, Mojo.Event.keyup, this.keyUpHandler);
+		this.controller.stopListening(this.controller.sceneElement, Mojo.Event.keydown, this.keyDownHandler);
 	},
 	
 	// *** EVENT HANDLERS ***
@@ -492,13 +2011,253 @@ var PrefsAssistant	= Class.create({
 		}
 	},
 
+	handleSnoozeDurationSelection: function(event) {
+		this.prefs.defaultSnoozeDuration = this.snoozeModel.command;
+		Mojo.Log.info("this.prefs.defaultSnoozeDuration", this.prefs.defaultSnoozeDuration);
+		this.dirty=true;
+	},
+	
+	handleRepeatIntervalSelection: function(event) {
+		this.prefs.notificationRepeatInterval = this.repeatIntervalModel.value;
+		Mojo.Log.info("this.prefs.notificationRepeatInterval", this.prefs.notificationRepeatInterval);
+		this.dirty=true;
+	},
+	
+	handleMaxRepeatSelection: function(event) {
+		this.prefs.notificationMaxRepeat = this.maxRepeatModel.value;
+		Mojo.Log.info("this.prefs.notificationMaxRepeat", this.prefs.notificationMaxRepeat);
+		this.dirty=true;
+	},
+	
+	handleAlarmDuraSelection: function(event) {
+		this.prefs.uberAlarmDura = this.alarmDuraModel.value;
+		Mojo.Log.info("this.uberAlarmDura", this.prefs.uberAlarmDura);
+		this.dirty=true;
+	},
+	
+	handleUberOpenInViewSelection: function(event) {
+		this.uberOpenInView = this.uberOpenInViewModel.value;
+		Mojo.Log.info("this.uberOpenInView", this.uberOpenInView);
+	},
+	
+	handleUberBackGestureSelection: function(event) {
+		this.uberBackGesture = this.uberBackGestureModel.value;
+		Mojo.Log.info("this.uberBackGesture", this.uberBackGesture);
+	},
+	
+	handleUberShrinkDaySelection: function(event) {
+		this.dayViewShrink = this.uberShrinkDayModel.value;
+		Mojo.Log.info("this.dayViewShrink", this.dayViewShrink);
+	},
+	
+	handleUberWeekTimeDaySelection: function(event) {
+		this.weekTimeDay = this.uberWeekTimeDayModel.value;
+		Mojo.Log.info("this.weekTimeDay", this.weekTimeDay);
+	},
+
+	handleUberShrinkWeekSelection: function(event) {
+		this.weekViewShrink = this.uberShrinkWeekModel.value;
+		Mojo.Log.info("this.weekViewShrink", this.weekViewShrink);
+	},
+	
+	handleUberWkNumOffset: function(event) {
+		this.weekNumOffset = this.weekNumOffsetModel.value;
+	},
+	
+	handleUberMinuteInterval: function(event) {
+		this.uberMinuteInterval = this.minuteIntervalModel.value;
+	},
+	
+	handleUberDayMinInterval: function(event) {
+		this.dayMinInterval = this.dayMinIntervalModel.value;
+	},
+	
+	handleUberWkModulusNum: function(event) {
+		this.weekModulusNum = this.weekModulusModel.value;
+	},
+	
+	handleUberTogglePrefs: function(event) {
+		//this.dirty = true;
+		if(event.model.id == "ShowSnoozedForBanner") {
+			this.showSnoozedForBanner = event.model.value;
+		} else if(event.model.id == "ShowReminderDashboard") {
+			this.showReminderDashboard = event.model.value;
+			this.reminders.showReminderDashboard = this.showReminderDashboard;
+		} else if(event.model.id == "StopAutoClose") {
+			this.stopAutoClose = event.model.value;
+			this.reminders.stopAutoClose = this.stopAutoClose;
+		} else if(event.model.id == "SendSonyWatch") {
+			this.sendSonyWatch = event.model.value;
+			this.reminders.sendSonyWatch = this.sendSonyWatch;
+		} else if(event.model.id == "BridgeCallDialer") {
+			this.bridgeCallDialer = event.model.value;
+		} else if(event.model.id == "DisplayCatField") {
+			this.displayCatField = event.model.value;
+		} else if(event.model.id == "PerCalAlarms") {
+			this.perCalAlarms = event.model.value;
+			this.reminders.perCalAlarms = event.model.value;
+		} else if(event.model.id == "AlarmsFollowGroups") {
+			this.alarmsFollowGroups = event.model.value;
+			this.reminders.alarmsFollowGroups = event.model.value;
+			if(!this.alarmsFollowGroups){
+				this.reminders.readSnoozedList();
+			} else {
+				this.reminders.setupAlarmsFollowGroups();
+			}
+		} else if(event.model.id == "SnoozeThrob") {
+			this.snoozeThrob = event.model.value;
+			this.prefs.blinkNotification = this.snoozeThrob;
+			this.dirty = true;
+		} else if(event.model.id == "DayViewCompressed") {
+			this.dayViewCompressed = event.model.value;
+		} else if(event.model.id == "DayViewIcons") {
+			this.dayViewIcons = event.model.value;
+		} else if(event.model.id == "DayMinutePopup") {
+			this.dayMinutePopup = event.model.value;
+		} else if(event.model.id == "DayViewEnhanced") {
+			this.dayViewEnhanced = event.model.value;
+			if(event.model.value) {
+				// true open drawer
+				this.controller.get('dayuberCaldrawer').mojo.setOpenState(true);
+			} else {
+				// close the drawer and turn off day features
+				this.controller.get('dayuberCaldrawer').mojo.setOpenState(false);
+			}
+		} else if(event.model.id == "MonthAllDayColors") {
+			this.monthAllDayColors = event.model.value;
+		} else if(event.model.id == "MonthViewIcons") {
+			this.monthViewIcons = event.model.value;
+		} else if(event.model.id == "MonthUseBusy") {
+			this.monthUseBusy = event.model.value;
+		} else if(event.model.id == "MonthVerticalIcons") {
+			this.monthVerticalIcons = event.model.value;
+		} else if(event.model.id == "WeekNumberTitle") {
+			this.weekNumberTitle = event.model.value;
+		} else if(event.model.id == "UseISOweekNum") {
+			this.useISOweekNum = event.model.value;
+		} else if(event.model.id == "UseAgendaZ") {
+			this.useAgendaZ = event.model.value;
+		} else if(event.model.id == "UcGroupsFirst") {
+			this.ucGroupsFirst = event.model.value;
+		} else if(event.model.id == "WeekShowSubject") {
+			this.weekShowSubject = event.model.value;
+		} else if(event.model.id == "WeekViewIcons") {
+			this.weekViewIcons = event.model.value;
+		} else if(event.model.id == "GotoEditFromTemplate") {
+			this.gotoEditFromTemplate = event.model.value;
+		} else if(event.model.id == "WorkWeekOnly") {
+			this.workWeekOnly = event.model.value;
+		} else if(event.model.id == "DuraBtnOnTop") {
+			this.duraBtnOnTop = event.model.value;
+		} else if(event.model.id == "MonthViewEnhanced") {
+			this.monthViewEnhanced = event.model.value;
+			if(event.model.value) {
+				// true open drawer
+				this.controller.get('monthuberCaldrawer').mojo.setOpenState(true);
+			} else {
+				// close the drawer and turn off day features
+				this.controller.get('monthuberCaldrawer').mojo.setOpenState(false);
+			}
+		} else if(event.model.id == "WeekViewEnhanced") {
+			this.weekViewEnhanced = event.model.value;
+			if(event.model.value) {
+				// true open drawer
+				this.controller.get('weekuberCaldrawer').mojo.setOpenState(true);
+			} else {
+				// close the drawer and turn off day features
+				this.controller.get('weekuberCaldrawer').mojo.setOpenState(false);
+			}
+		}
+	},
+	
+	handleUberCatListAdd: function(event) {
+		var catCookieChrs = Object.toJSON(this.userUberCats).length;
+		if(catCookieChrs >1490) {
+			this.controller.showAlertDialog({
+				onChoose: function(value) { return;},
+				title: $L("Warning: ") + catCookieChrs + $L(" characters"),
+				message: $L("Close to max number of categories, no more names can be added."),
+				choices:[
+				{label: $L("OK"), value:"cancel", type:'dismiss'}   
+				]
+			});
+			return;
+		}
+		var newItem = {name:"newcategory"};
+		this.uberCatModel.items.push(newItem);
+		var catLength = this.uberCatModel.items.length;
+		this.uberCatList.mojo.noticeAddedItems(catLength, [newItem]);
+		this.uberCatList.mojo.focusItem(this.uberCatModel.items[catLength-1]);
+	},
+	
+	handleUberCatListDelete: function(event) {
+		this.uberCatModel.items.splice(this.uberCatModel.items.indexOf(event.item), 1);
+	},
+	
+	handleUberCatListReorder: function(event) {
+		this.uberCatModel.items.splice(this.uberCatModel.items.indexOf(event.item), 1);
+		this.uberCatModel.items.splice(event.toIndex, 0, event.item);
+	},
+	
+	handleUberCatListChange: function(event) {
+		if(event.originalEvent.target.tagName == "INPUT") {
+			//event.item.name = event.originalEvent.target.value;
+			var testStr = event.originalEvent.target.value;
+			if(testStr === "newcategory" || testStr === "") {
+				// added a new category but left default name
+				// or deleted all the text
+				this.uberCatModel.items.splice(event.index, 1);
+				this.uberCatList.mojo.noticeRemovedItems(event.index, 1);
+			} else if(testStr && testStr !== "") {
+				//take out illegal key codes & caps
+				// limit chars
+				testStr = testStr.replace(/[^\w\-]/g,"");
+				testStr = testStr.substring(0, 20);
+				event.item.name = testStr.toLowerCase();
+				this.uberCatList.mojo.noticeUpdatedItems(0, this.uberCatModel.items);
+			}
+		}
+	},
+
+	uberClearCookies: function() {
+		// clear cookies
+		//Event.stop(event);
+		this.catCookie = new Mojo.Model.Cookie("userUberCats");
+		if(this.catCookie) { this.catCookie.remove(); }
+		this.catCookie = new Mojo.Model.Cookie("userUberCats");
+		this.dayCookie = new Mojo.Model.Cookie("DayEnhanced");
+		if(this.dayCookie) { this.dayCookie.remove(); }
+		this.dayCookie = new Mojo.Model.Cookie("DayEnhanced");
+		this.monthCookie = new Mojo.Model.Cookie("MonthViewEnhanced");
+		if(this.monthCookie) { this.monthCookie.remove(); }
+		this.monthCookie = new Mojo.Model.Cookie("MonthViewEnhanced");
+		this.weekCookie = new Mojo.Model.Cookie("WeekViewEnhanced");
+		if(this.weekCookie) { this.weekCookie.remove(); }
+		this.weekCookie = new Mojo.Model.Cookie("WeekViewEnhanced");
+		this.snoozeCookie = new Mojo.Model.Cookie("snoozeCookie");
+		if(this.snoozeCookie) { this.snoozeCookie.remove(); }
+		this.snoozeCookie = new Mojo.Model.Cookie("snoozeCookie");
+		this.notificationCookie = new Mojo.Model.Cookie("notificationCookie");
+		if(this.notificationCookie) { this.notificationCookie.remove(); }
+		this.notificationCookie = new Mojo.Model.Cookie("notificationCookie");
+		var cookie = new Mojo.Model.Cookie("BackGesture");
+		if(cookie) {cookie.remove();}
+		cookie = new Mojo.Model.Cookie("ucGroupsCookie");
+		if(cookie) {cookie.remove();}
+		cookie = new Mojo.Model.Cookie("uberGrpsCookie");
+		if(cookie) {cookie.remove();}
+		cookie = new Mojo.Model.Cookie("origExCookie");
+		if(cookie) {cookie.remove();}
+	},
+
+
 
 	startOfWeekChoose: function(val) {
 		//Mojo.Log.info('prefs-assistant: startOfWeekChoose: %s', val);
 		var value = parseInt(val, 10);
 		if (val !== undefined && value != this.prefs.startOfWeek) {
 			this.prefs.startOfWeek = value ;
-			this.prefs.userChangedstartOfWeek =true;
+			this.prefs.userChangedStartOfWeek =true;
 			this.renderStartOfWeek();
 			this.dirty = true;
 		}
@@ -558,8 +2317,23 @@ var PrefsAssistant	= Class.create({
 					label: ONE_HOUR,
 					command: 60
 				}, {
+				label: $L("75 minutes"),
+					command: 75
+				}, {
+				label: $L("90 minutes"),
+					command: 90
+				}, {
 					label: TWO_HOURS,
 					command: 120
+				}, {
+					label: $L("3 hours"),
+					command: 180
+				}, {
+					label: $L("4 hours"),
+					command: 240
+				}, {
+					label: $L("8 hours"),
+					command: 480
 				}]
 			});
 	},
@@ -606,10 +2380,49 @@ var PrefsAssistant	= Class.create({

 	handleAccountsListTap: function(account, template){
 		var capabilityProvider = this.getCalendarCapabilityProvider(account);
-		var accountSettingsUI;
+		var accountSettingsUI, scene = this.controller;

 		if(capabilityProvider && capabilityProvider.id === "com.palm.palmprofile.calendar"){
 			//do nothing
+		} else if(template && template.config && template.config.oauth2_config && capabilityProvider && capabilityProvider.config && capabilityProvider.config.auth_type === "oauth2"){
+			var msg, param = {};
+			msg = capabilityProvider.capability + " requires Oauth2 credentials";
+			_.extend(param, template.config.oauth2_config);
+			param.template = template;
+			param.account = account;
+			param.launchOauth2 = true;
+			function choiceMade(val){
+				if(parseInt(val,10) === 0){
+					if(scene){
+						scene.serviceRequest("palm://com.palm.applicationManager", {
+							  method:"launch",
+							  parameters:{
+									 id:'com.palm.app.accounts', params: param
+							  }
+							});
+					} else {
+						console.error("failed to launch account app");
+					}
+					return;
+				}
+				scene.stageController.pushScene("accountlogin", {
+					account: account,
+					template: template
+				});
+				return;
+			}
+			scene.showAlertDialog({
+					title: "Oauth2 Authentication",
+					message: msg,
+					choices: [{label:"Configure Oauth2", value: 0}, {label: "Skip", value: 1}],
+					onChoose: function(value) {
+						if(value !== undefined && value !== "" && value != -1) {
+							choiceMade(value);
+							console.error("In dialog choice was ::::: " + value);
+						}
+						return;
+					}
+				});
 		}
 		//If a transport has a custom account login screen, use that
 		else if (capabilityProvider && capabilityProvider.settingsUI) {
@@ -639,6 +2452,26 @@ var PrefsAssistant	= Class.create({
 		});
 	},
 	
+	toggleUCdrawer: function(e) {
+		var curBtn = e.currentTarget.id;
+		if(curBtn == "uberCprefsbutton") {
+			if(this.orangeKeyDown === true || e.altKey === true) {
+				this.orangeKeyDown = false;
+				this.uberClearCookies();
+			} else {
+				this.controller.get('uberCaldrawer').mojo.setOpenState(!this.controller.get('uberCaldrawer').mojo.getOpenState());
+			}
+		} else if(curBtn == "dayuberCprefsbutton") {
+			this.controller.get('dayuberCaldrawer').mojo.setOpenState(!this.controller.get('dayuberCaldrawer').mojo.getOpenState());
+		} else if(curBtn == "monthuberCprefsbutton") {
+			this.controller.get('monthuberCaldrawer').mojo.setOpenState(!this.controller.get('monthuberCaldrawer').mojo.getOpenState());
+		} else if(curBtn == "weekuberCprefsbutton") {
+			this.controller.get('weekuberCaldrawer').mojo.setOpenState(!this.controller.get('weekuberCaldrawer').mojo.getOpenState());
+		} else if(curBtn == "catuberCprefsbutton") {
+			this.controller.get('catuberCaldrawer').mojo.setOpenState(!this.controller.get('catuberCaldrawer').mojo.getOpenState());
+		}
+	},
+
 	// *** WIDGET ATTRS & MODELS
 
 	
@@ -651,22 +2484,320 @@ var PrefsAssistant	= Class.create({
 		listTitle: $L('Accounts'),
 		items: []
 	},
+	snoozeDurations: [
+		{label:$L('30 Minutes before start'), value:'-30'},
+		{label:$L('15 Minutes before start'), value:'-15'},
+		{label:$L('10 Minutes before start'), value:'-10'},
+		{label:$L('5 Minutes before start'), value:'-5'},
+		{label:$L('At start time'), value:'0'},
+		{label:$L('5 Minutes'), value:'5'},
+		{label:$L('10 Minutes'), value:'10'},
+		{label:$L('15 Minutes'), value:'15'},
+		{label:$L('30 Minutes'), value:'30'},
+		{label:$L('1 Hour'), value:'60'},
+		{label:$L('2 Hours'), value:'120'},
+		{label:$L('4 Hours'), value:'240'},
+		{label:$L('8 Hours'), value:'480'},
+		{label:$L('10 Hours'), value:'600'},
+		{label:$L('12 Hours'), value:'720'},
+		{label:$L('1 Day'), value:'1440'},
+		{label:$L('2 Days'), value:'2880'},
+		{label:$L('3 Days'), value:'4320'},
+		{label:$L('4 Days'), value:'5760'},
+		{label:$L('5 Days'), value:'7200'},
+		{label:$L('6 Days'), value:'8640'},
+		{label:$L('1 Week'), value:'10080'},
+		{label:$L('2 Weeks'), value:'20160'}		
+	],
+
+	notificationRepeatIntervals: [
+		{label:$L('Disabled'), value:'0'},
+		{label:$L('5 Seconds'), value:'.083'},
+		{label:$L('10 Seconds'), value:'.167'},
+		{label:$L('15 Seconds'), value:'.25'},
+		{label:$L('20 Seconds'), value:'.333'},
+		{label:$L('25 Seconds'), value:'.417'},
+		{label:$L('30 Seconds'), value:'.5'},
+		{label:$L('1 Minutes'), value:'1'},
+		{label:$L('2 Minutes'), value:'2'},
+		{label:$L('3 Minutes'), value:'3'},
+		{label:$L('4 Minutes'), value:'4'},
+		{label:$L('5 Minutes'), value:'5'},
+		{label:$L('10 Minutes'), value:'10'},
+		{label:$L('15 Minutes'), value:'15'}
+	],
+	uberMinuteIntervals: [
+		{label:$L('1'), value:1},
+		{label:$L('5'), value:5},
+		{label:$L('10'), value:10},
+		{label:$L('15'), value:15},
+		{label:$L('20'), value:20},
+		{label:$L('30'), value:30}
+	],
+	
+	uberDayMinIntervals: [
+		{label:$L('10'), value:10},
+		{label:$L('15'), value:15},
+		{label:$L('20'), value:20},
+		{label:$L('30'), value:30}
+	],
+	
+	uberShrinkDayOptions: [
+		{label:$L('None'), value:'none'},
+		{label:$L('Medium'), value:'medium'},
+		{label:$L('Strong'), value:'strong'}
+	],
+	uberWeekTimeDayOptions: [
+		{label:$L('1'), value:0},
+		{label:$L('2'), value:1},
+		{label:$L('3'), value:2},
+		{label:$L('4'), value:3},
+		{label:$L('5'), value:4},
+		{label:$L('6'), value:5},
+		{label:$L('7'), value:6}
+	],
+	uberShrinkWeekOptions: [
+		{label:$L('None'), value:'none'},
+		{label:$L('Medium'), value:'medium'},
+		{label:$L('Strong'), value:'strong'}
+	],
+	uberOpenInViewOptions: [
+		{label:$L('Last'), value:'last'},
+		{label:$L('Day'), value:'day'},
+		{label:$L('Week'), value:'week'},
+		{label:$L('Month'), value:'month'}
+	],
+	uberBackGestureOptions: [
+		{label:$L('Last'), value:'last'},
+		{label:$L('Day'), value:'day'},
+		{label:$L('Week'), value:'week'},
+		{label:$L('Month'), value:'month'}
+	],
+	notificationMaxRepeats: [
+		{label:$L('Unlimited'), value:'99999'}, //this should be a large enough value to be conisdered unlimited for our purpose.
+		{label:$L('1'), value:'1'},
+		{label:$L('2'), value:'2'},
+		{label:$L('3'), value:'3'},
+		{label:$L('4'), value:'4'},
+		{label:$L('5'), value:'5'},
+		{label:$L('10'), value:'10'},
+		{label:$L('15'), value:'15'},
+		{label:$L('20'), value:'20'},
+		{label:$L('25'), value:'25'},
+		{label:$L('30'), value:'30'},
+		{label:$L('35'), value:'35'},
+		{label:$L('40'), value:'40'},
+		{label:$L('45'), value:'45'},
+		{label:$L('50'), value:'50'},
+		{label:$L('55'), value:'55'},
+		{label:$L('60'), value:'60'},
+		{label:$L('65'), value:'65'},
+		{label:$L('70'), value:'70'},
+		{label:$L('75'), value:'75'},
+		{label:$L('80'), value:'80'},
+		{label:$L('85'), value:'85'},
+		{label:$L('90'), value:'90'},
+		{label:$L('95'), value:'95'},
+		{label:$L('100'), value:'100'}
+	],
+	uberWeekNumberModulo: [
+		{label:$L('1'), value:'1'},
+		{label:$L('2'), value:'2'},
+		{label:$L('3'), value:'3'},
+		{label:$L('4'), value:'4'},
+		{label:$L('5'), value:'5'},
+		{label:$L('6'), value:'6'},
+		{label:$L('7'), value:'7'},
+		{label:$L('8'), value:'8'},
+		{label:$L('9'), value:'9'},
+		{label:$L('10'), value:'10'},
+		{label:$L('11'), value:'11'},
+		{label:$L('12'), value:'12'},
+		{label:$L('13'), value:'13'},
+		{label:$L('14'), value:'14'},
+		{label:$L('15'), value:'15'},
+		{label:$L('16'), value:'16'},
+		{label:$L('17'), value:'17'},
+		{label:$L('18'), value:'18'},
+		{label:$L('19'), value:'19'},
+		{label:$L('20'), value:'20'},
+		{label:$L('21'), value:'21'},
+		{label:$L('22'), value:'22'},
+		{label:$L('23'), value:'23'},
+		{label:$L('24'), value:'24'},
+		{label:$L('25'), value:'25'},
+		{label:$L('26'), value:'26'},
+		{label:$L('27'), value:'27'},
+		{label:$L('28'), value:'28'},
+		{label:$L('29'), value:'29'},
+		{label:$L('30'), value:'30'},
+		{label:$L('31'), value:'31'},
+		{label:$L('32'), value:'32'},
+		{label:$L('33'), value:'33'},
+		{label:$L('34'), value:'34'},
+		{label:$L('35'), value:'35'},
+		{label:$L('36'), value:'36'},
+		{label:$L('37'), value:'37'},
+		{label:$L('38'), value:'38'},
+		{label:$L('39'), value:'39'},
+		{label:$L('40'), value:'40'},
+		{label:$L('41'), value:'41'},
+		{label:$L('42'), value:'42'},
+		{label:$L('43'), value:'43'},
+		{label:$L('44'), value:'44'},
+		{label:$L('45'), value:'45'},
+		{label:$L('46'), value:'46'},
+		{label:$L('47'), value:'47'},
+		{label:$L('48'), value:'48'},
+		{label:$L('49'), value:'49'},
+		{label:$L('50'), value:'50'},
+		{label:$L('51'), value:'51'},
+		{label:$L('52'), value:'52'}
+	],
+	uberWeekNumberOffset: [
+		{label:$L('0'), value:'0'},
+		{label:$L('1'), value:'1'},
+		{label:$L('2'), value:'2'},
+		{label:$L('3'), value:'3'},
+		{label:$L('4'), value:'4'},
+		{label:$L('5'), value:'5'},
+		{label:$L('6'), value:'6'},
+		{label:$L('7'), value:'7'},
+		{label:$L('8'), value:'8'},
+		{label:$L('9'), value:'9'},
+		{label:$L('10'), value:'10'},
+		{label:$L('11'), value:'11'},
+		{label:$L('12'), value:'12'},
+		{label:$L('13'), value:'13'},
+		{label:$L('14'), value:'14'},
+		{label:$L('15'), value:'15'},
+		{label:$L('16'), value:'16'},
+		{label:$L('17'), value:'17'},
+		{label:$L('18'), value:'18'},
+		{label:$L('19'), value:'19'},
+		{label:$L('20'), value:'20'},
+		{label:$L('21'), value:'21'},
+		{label:$L('22'), value:'22'},
+		{label:$L('23'), value:'23'},
+		{label:$L('24'), value:'24'},
+		{label:$L('25'), value:'25'},
+		{label:$L('26'), value:'26'},
+		{label:$L('27'), value:'27'},
+		{label:$L('28'), value:'28'},
+		{label:$L('29'), value:'29'},
+		{label:$L('30'), value:'30'},
+		{label:$L('31'), value:'31'},
+		{label:$L('32'), value:'32'},
+		{label:$L('33'), value:'33'},
+		{label:$L('34'), value:'34'},
+		{label:$L('35'), value:'35'},
+		{label:$L('36'), value:'36'},
+		{label:$L('37'), value:'37'},
+		{label:$L('38'), value:'38'},
+		{label:$L('39'), value:'39'},
+		{label:$L('40'), value:'40'},
+		{label:$L('41'), value:'41'},
+		{label:$L('42'), value:'42'},
+		{label:$L('43'), value:'43'},
+		{label:$L('44'), value:'44'},
+		{label:$L('45'), value:'45'},
+		{label:$L('46'), value:'46'},
+		{label:$L('47'), value:'47'},
+		{label:$L('48'), value:'48'},
+		{label:$L('49'), value:'49'},
+		{label:$L('50'), value:'50'},
+		{label:$L('51'), value:'51'},
+		{label:$L('52'), value:'52'}
+	],
 	
 	alarms: [
 		{label: '', command: 'none'},			// Do NOT Localize
+		{label: '', command:  '-PT0M'}, //DO NOT Localize
 		{label: '', command: '-PT5M'},		//Do Not localize
 		{label: '', command: '-PT10M'},		//Do Not localize
 		{label: '', command: '-PT15M'},		// Do NOT Localize
+		{label: '', command:  '-PT20M'}, // Do NOT Localize
+		{label: '', command:  '-PT25M'}, // Do NOT Localize
 		{label: '', command: '-PT30M'},		// Do NOT Localize
+		{label: '', command:  '-PT35M'}, // Do NOT Localize
+		{label: '', command:  '-PT45M'}, // Do NOT Localize
 		{label: '', command: '-PT1H'},		// Do NOT Localize
-		{label: '', command: '-P1D'}			// Do NOT Localize	
+		{label: '', command:  '-PT90M'}, // Do NOT Localize
+		{label: '', command:  '-PT2H'}, // Do NOT Localize
+		{label: '', command:  '-PT150M'}, // Do NOT Localize
+		{label: '', command:  '-PT3H'}, // Do NOT Localize
+		{label: '', command:  '-PT220M'}, // Do NOT Localize
+		{label: '', command:  '-PT4H'}, // Do NOT Localize
+		{label: '', command:  '-PT5H'}, // Do NOT Localize
+		{label: '', command:  '-PT6H'}, // Do NOT Localize
+		{label: '', command:  '-PT7H'}, // Do NOT Localize
+		{label: '', command:  '-PT8H'}, // Do NOT Localize
+		{label: '', command:  '-PT10H'}, // Do NOT Localize
+		{label: '', command:  '-PT12H'}, // Do NOT Localize	
+		{label: '', command:  '-PT18H'}, // Do NOT Localize	
+		{label: '', command:  '-PT23H'}, // Do NOT Localize
+		{label: '', command: '-P1D'},			// Do NOT Localize	
+		{label: '', command: '-PT36H'}, // Do NOT Localize
+		{label: '', command: '-P2D'}, // Do NOT Localize
+		{label: '', command: '-PT60H'}, // Do NOT Localize	
+		{label: '', command: '-P3D'}, // Do NOT Localize
+		{label: '', command: '-PT84H'}, // Do NOT Localize
+		{label: '', command: '-P4D'}, // Do NOT Localize
+		{label: '', command: '-P5D'}, // Do NOT Localize
+		{label: '', command: '-P6D'}, // Do NOT Localize			
+		{label: '', command: '-P1W'}, // Do NOT Localize
+		{label: '', command: '-P2W'}, // Do NOT Localize
+		{label: '', command: '-P3W'}, // Do NOT Localize
+		{label: '', command: '-P4W'}, // Do NOT Localize
+		{label: '', command: '-P8W'}, // Do NOT Localize
+		{label: '', command: '-P12W'}, // Do NOT Localize
+		{label: '', command: '-P16W'}, // Do NOT Localize
+		{label: '', command: '-P20W'}, // Do NOT Localize
+		{label: '', command: '-P24W'}, // Do NOT Localize
+		{label: '', command: '-P52W'} // Do NOT Localize
 	],
 	
 	allDayAlarms: [
 		{label: '', command: 'none'},			// Do NOT Localize
+		{label: '', command: '-PT0M'},// DO NOT Localize
+		{label: '', command: '-PT12H'},// DO NOT Localize
+		{label: '', command: '-PT18H'},// DO NOT Localize
 		{label: '', command: '-P1D'},			// Do NOT Localize
+		{label: '', command: '-PT36H'}, // Do NOT Localize
 		{label: '', command: '-P2D'},			// Do NOT Localize
+		{label: '', command: '-PT60H'}, // Do NOT Localize
 		{label: '', command: '-P3D'},			// Do NOT Localize
-		{label: '', command: '-P1W'}			// Do NOT Localize		
+		{label: '', command: '-PT84H'}, // Do NOT Localize
+		{label: '', command: '-P4D'}, // Do NOT Localize
+		{label: '', command: '-P5D'}, // Do NOT Localize
+		{label: '', command: '-P6D'}, // Do NOT Localize
+		{label: '', command: '-P1W'},		// Do NOT Localize	
+		{label: '', command: '-P2W'}, // Do NOT Localize
+		{label: '', command: '-P3W'}, // Do NOT Localize
+		{label: '', command: '-P4W'}, // Do NOT Localize
+		{label: '', command: '-P8W'}, // Do NOT Localize
+		{label: '', command: '-P12W'}, // Do NOT Localize
+		{label: '', command: '-P16W'}, // Do NOT Localize
+		{label: '', command: '-P20W'}, // Do NOT Localize
+		{label: '', command: '-P24W'}, // Do NOT Localize
+		{label: '', command: '-P52W'} // Do NOT Localize	
+	],
+	
+	uberCategories: [
+		{name: 'birthday'}, // Do NOT Localize these
+		{name: 'car'},
+		{name: 'doctor'},
+		{name: 'holiday'},
+		{name: 'kids'},
+		{name: 'party'},
+		{name: 'plane'},
+		{name: 'vacation'}
+	],
+	
+	uberAlarmDuration: [
+		{label: '0.5 '+$L('second'), value: '0.5'}, // Do NOT Localize these
+		{label: '1.0 '+$L('second'), value: '1.0'},
+		{label: '1.5 '+$L('seconds'), value: '1.5'},
+		{label: '2.0 '+$L('seconds'), value: '2.0'}
 	]
 });
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-options-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-options-assistant.js
index 2b63ff6..2154f15 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-options-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/prefs-options-assistant.js
@@ -16,14 +16,93 @@ var PrefsOptionsAssistant = Class.create({
 	
 	calendarCategory:function(modelItem) {
 		return modelItem.category;
-	},	
-
+	},
+	
+	randId: function() {
+		var chars = "0123456789abcdefghiklmnopqrstuvwxyz";
+		var string_length = 4;
+		var randomstring = '';
+		for (var i=0; i<string_length; i++) {
+			var rnum = Math.floor(Math.random() * chars.length);
+			randomstring += chars.substring(rnum,rnum+1);
+		}
+		return randomstring;
+	},
+	
 	setup: function() {
 		this.number		= Math.random();
 		this.db			= new DatabaseManager();
+		this.reminderMgr = getAppAssistant().getReminderManager();
 		this.calList	= [];
 		this.calsModel	= {listTitle: $L("Accounts"), items: this.calList};
-
+		this.uberDefaultCalId	= this.prefsManager.getDefaultCalendar();
+		this.userUberCalGroups = [];
+		this.excludedCals = [];
+		this.perCalAlarms = false;
+		this.alarmsFollowGroups = false;
+		var excCalsCookie = new Mojo.Model.Cookie("excCalAlarms");
+		try {
+			if(excCalsCookie) {
+				var excedcalscookie = excCalsCookie.get();
+				if (excedcalscookie) {
+					if(excedcalscookie.exccalslist) {
+						this.excludedCals = excedcalscookie.exccalslist;
+					}
+				}
+			}
+		} catch (e) { Mojo.Log.error( "RM bad cookie get init" + e.errorText) }
+		var snoozeCookie = new Mojo.Model.Cookie("snoozeCookie");
+		if (snoozeCookie) {
+			var snzcookie = snoozeCookie.get();
+			if (snzcookie) {			
+				if(snzcookie.perCalAlarms !== undefined)	{
+					this.perCalAlarms = snzcookie.perCalAlarms;
+				} else {
+					this.perCalAlarms = false;
+				}
+				if(snzcookie.alarmsFollowGroups !== undefined)	{
+					this.alarmsFollowGroups = snzcookie.alarmsFollowGroups;
+				} else {
+					this.alarmsFollowGroups = false;
+				}
+			}
+		}
+		this.uberGroups = this.app.getUberGroups();
+		this.userUberCalGroups = this.app.getUserUberCalGroups();
+		if(!this.userUberCalGroups || !this.userUberCalGroups[0] || (this.userUberCalGroups[0] && this.userUberCalGroups[0].rId === undefined)) {
+			this.userUberCalGroups = [{rId:"1234", groupname: $L('Default Group'), includes: [this.uberDefaultCalId], workWeek:false}];
+		}
+		this.uberMod = [];
+		this.uberCalGroups = [];
+		//build uberCalGroups from userUberCalGroups
+		if(this.userUberCalGroups &&  this.userUberCalGroups.length > 0 ) {
+			for(var i=0; i< this.userUberCalGroups.length; i++) {
+				this.uberCalGroups[i] = [];
+				this.uberCalGroups[i].rId = this.userUberCalGroups[i].rId;
+				this.uberCalGroups[i].groupname = this.userUberCalGroups[i].groupname;
+				this.uberCalGroups[i].category = this.userUberCalGroups[i].groupname;
+				this.uberCalGroups[i].workWeek = this.userUberCalGroups[i].workWeek;
+				this.uberCalGroups[i].workWeekTitle = $L('Work week');
+			}
+		}
+		
+		this.uberCalList = [];
+		this.uberCalGroupsModel = {listTitle: $L("UberCalendar Groups"), items: this.uberCalGroups};
+		var scrlHeight = 390, devinfoHeight = Mojo.Environment.DeviceInfo.screenHeight;
+		if(devinfoHeight){
+			if(devinfoHeight == 400){
+				scrlHeight = 300;
+			}
+		}
+		var scroller1 = document.createElement('div');
+		scroller1.setAttribute('x-mojo-element', "Scroller");
+		scroller1.setAttribute('id', 'ubercalscroller');
+		scroller1.setAttribute('style', 'height:' + scrlHeight + 'px; width:320px');
+		var pavDiv = this.controller.get('pav_body');
+		var newPav = pavDiv.cloneNode(true);
+		this.controller.get('prefs_options_view').removeChild(pavDiv);
+		scroller1.appendChild(newPav);
+		this.controller.get('prefs_options_view').appendChild(scroller1);
 		this.controller.setupWidget('pav_calendars_list', 
 									{
 										itemTemplate: 'prefs-options/prefs-options-calendar',
@@ -36,16 +115,88 @@ var PrefsOptionsAssistant = Class.create({
 											'blue',
 											this.colorPickerCallback.bind(this),
 											this.controller);
-											
+		
+		var newDiv1 = document.createElement('div');
+		newDiv1.setAttribute('class', "palm-list");
+		newDiv1.innerHTML = '<div class="pav-calendars-list" id="uber_calgroup_list" x-mojo-element="IndexedList"</div>'
+		scroller1.appendChild(newDiv1);
+		
 		this.controller.setupWidget('pav-cal-exclude-tb', {modelProperty : 'displayInAll', disabledProperty: 'displayDisabled'});
-
+		
 		this.calendarsModel = this.calendarsManager.getCalendarsModel();
 		this.buildCalendarsList();
+		this.buildUserUberCalList();	
+		this.uberSetupCalGroupsList();
+		this.controller.setupWidget('uber_calgroup_list', 
+									this.uberCalGrpAttrs = {itemTemplate: 'prefs-options/ubercalgroupitem',
+										addItemLabel: $L("Add Calendar Group"),
+										swipeToDelete: true,
+										dividerTemplate: 'prefs-options/divider',
+										dividerFunction: this.calendarCategory
+										},
+									this.uberCalGroupsModel);
+		//setup per cal alarms
+		if(this.perCalAlarms && !this.alarmsFollowGroups){
+			var item, enabled, len = this.uberCalList.length;
+			var newDiv1, newDiv2, newDiv3, newDiv4;
+			var newGroup1 = document.createElement('div');
+			var newGroup2 = document.createElement('div');
+			newGroup1.setAttribute('class', 'palm-group');
+			newGroup1.setAttribute('id', 'pav_percalalarmsgroup_div');
+			newGroup2.setAttribute('class', 'palm-group-title');
+			newGroup2.setAttribute('x-mojo-loc', '""');
+			newGroup2.innerHTML = $L('Enabled Alarms');
+			newGroup1.appendChild(newGroup2);
+			this.perCalAlarmsPrefs = {};
+			var perCalAlarmsAttributes = {
+					modelProperty: "value",
+					trueValue: true,
+					falseValue: false
+				};
+			//add html elements
+			for(var i=0;i<len;i++){
+				item = {};
+				enabled = true;
+				item = this.uberCalList[i];
+				if(item && item.id && item.name){
+					enabled = !(this.excludedCals && this.excludedCals.indexOf(item.id) !== -1);
+					this.perCalAlarmsPrefs[item.id] = {id: item.id, value:enabled};
+					newDiv1 = document.createElement('div');
+					newDiv2 = document.createElement('div');
+					newDiv3 = document.createElement('div');
+					newDiv4 = document.createElement('div');
+					newDiv1.setAttribute('class', "palm-row");
+					newDiv2.setAttribute('class', "palm-row-wrapper");
+					newDiv3.setAttribute('x-mojo-element', "ToggleButton");
+					newDiv3.setAttribute('id', "perCal-"+i + "-toggle");
+					newDiv4.setAttribute('class', "title");
+					newDiv4.setAttribute('x-mojo-loc', '""');
+					newDiv4.innerHTML = item.name;
+					newDiv2.appendChild(newDiv3);
+					newDiv2.appendChild(newDiv4);
+					newDiv1.appendChild(newDiv2);
+					newGroup1.appendChild(newDiv1);
+				}
+				//Mojo.Log.error(" setup toggles:::::" + JSON.stringify(this.perCalAlarmsPrefs));
+			}
+			scroller1.appendChild(newGroup1);
+			// setup widgets 
+			var i=0;
+			for(var  obj in this.perCalAlarmsPrefs){
+				if(this.perCalAlarmsPrefs.hasOwnProperty(obj)){
+					this.controller.setupWidget('perCal-'+i+'-toggle', perCalAlarmsAttributes, this.perCalAlarmsPrefs[obj]);
+					i++;
+				}
+			}
+		}
+		this.controller.setupWidget("ubercalscroller",{mode: 'vertical'});
+		this.controller.setInitialFocusedElement(null);
 	},
 	
 	buildCalendarsList: function() {
 		var defaultCalId	= this.prefsManager.getDefaultCalendar();
 		this.calsModel.items	= [];
+		this.uberCalList = [];
 		var category			= '';
 		var numAccounts = this.calendarsModel.length;
 		
@@ -71,10 +222,17 @@ var PrefsOptionsAssistant = Class.create({
 					// allow the user to exclude the default calendar from the "All
 					// Calendars view"
 					cal.displayDisabled = true;
+					if(cal.excludeFromAll){
+						cal.excludeFromAll = false;
+						cal.dirty = true;
+					}
 					cal.showExcludeTb = 'none';
 					cal.hideExcludeTb = 'inline-block';
 					cal.disableExcludeTb = 'disabled';
 				}
+				this.uberCalList.push(
+						{id: cal.id, name: cal.name, color: cal.color, displayInAll: cal.displayInAll}
+					);
 			}
 			//TODO: This check probably isn't necessary.  I think calendars manager
 			//will have filtered out any accounts that don't have calendars, and 
@@ -92,6 +250,71 @@ var PrefsOptionsAssistant = Class.create({
 		this.controller.modelChanged(this.calsModel);
 	},
 
+	buildUserUberCalList: function() {
+		//take the cal list, build properties for toggle buttons
+		var len = this.userUberCalGroups.length;
+		this.userUberCalList = [];
+		var cals = [];
+		this.validCals = [];
+		cals = this.uberCalList.clone();
+		
+		for (var i=0; i < len; i++) {
+			this.userUberCalList[i] = [];
+			cals.each(function(item) {
+				this.userUberCalList[i].push(Object.clone(item));
+				this.validCals.push(item.id);
+				}, this);
+			var includedLength = this.userUberCalGroups[i].includes.length;
+			var includes = [];
+			var testList = [];
+			testList = this.userUberCalGroups[i].includes.clone();
+			//verify includes have not been removed
+			if(testList && testList.length >0) {
+				for(var z=0; z< testList.length; z++){
+					if(this.validCals.indexOf(testList[z]) !== -1) {
+						includes.push(testList[z]);
+					}
+				}
+			}
+			this.userUberCalGroups[i].includes = [];
+			this.userUberCalGroups[i].includes = includes.clone();
+			if(includes && this.userUberCalList[i] && cals && includedLength) {
+				for(var k = 0; k < cals.length; k++) {
+					this.userUberCalList[i][k].displayDisabled = false;
+					this.userUberCalList[i][k].displayInAll = false;
+					this.userUberCalList[i][k].rId = this.userUberCalGroups[i].rId;
+					this.userUberCalList[i][k].type = "toggle";
+					for(var j=0; j < includes.length; j++) {
+						if(cals[k].id == includes[j]) {
+							this.userUberCalList[i][k].displayInAll = true;
+						}
+					}
+				}
+			}
+		}
+	},
+	
+	uberSetupCalGroupsList: function () {
+		var len = this.userUberCalGroups.length;
+		if(len > 0) {
+			this.uberMod = [];
+			for(var i=0; i <len; i++) {
+				var rID = this.userUberCalGroups[i].rId
+				this.controller.setupWidget("ubercalscroller" + rID,{mode: 'vertical'});
+				this.controller.setupWidget('ubercalgroup-text' + rID,
+										this.txtAttr ={inputName: 'groupname', maxLength: 18, enterSubmits: true, preventResize: true, multiline: false, autoFocus: false, hintText: $L('Enter a group name'), modelProperty: 'value'},
+										this.model = {type: "textfield", rId: rID, value: this.userUberCalGroups[i].groupname});
+				this.controller.setupWidget('uber-cal-workweek-toggle'+rID, this.workAttr={modelProperty:'value'}, this.workModel={type:"workweek", rId: rID, value: this.userUberCalGroups[i].workWeek});
+				this.controller.setupWidget('ubercallist' + rID, 
+										this.uberCalAttrs = {itemTemplate: 'prefs-options/ubercalitem'},
+										this.uberMod[i] = {rId: rID, listTitle: $L("Calendar List"), items: this.userUberCalList[i]});
+
+			}
+			this.controller.setupWidget('uber-cal-list-toggle', {modelProperty : 'displayInAll', disabledProperty: 'displayDisabled'});
+		}
+		
+	},
+	
 	buildAccountCategoryName: function(calendar) {
 		var categoryName = calendar.username;
 		var source = calendar.source;
@@ -127,7 +350,8 @@ var PrefsOptionsAssistant = Class.create({
 		
 		if(calendars.length){
 			this.updateCalendarsRequest = this.db.updateCalendars(calendars, this.setCalendarsCallback.bind(this),this.setCalendarsCallback.bind(this));	
-		}				
+		}
+		
 	},	
 
 	setCalendarsCallback:function(response){
@@ -146,14 +370,94 @@ var PrefsOptionsAssistant = Class.create({
 
 		this.listPropertyChangeHandler = this.handleListPropertyChange.bindAsEventListener(this);
 		this.controller.listen('pav_calendars_list', Mojo.Event.propertyChange, this.listPropertyChangeHandler);
-
+		this.uberCalGroupsChangeHandler = this.handleUberCalGroupsChange.bindAsEventListener(this);
+		this.controller.listen('uber_calgroup_list' , Mojo.Event.propertyChange, this.uberCalGroupsChangeHandler);
+		this.uberCalGroupsAddHandler = this.handleUberCalGroupsAdd.bindAsEventListener(this);
+		this.controller.listen('uber_calgroup_list' , Mojo.Event.listAdd, this.uberCalGroupsAddHandler);
+		this.uberCalGroupsDeleteHandler = this.handleUberCalGroupsDelete.bindAsEventListener(this);
+		this.controller.listen('uber_calgroup_list' , Mojo.Event.listDelete, this.uberCalGroupsDeleteHandler);
+		if(this.perCalAlarms && !this.alarmsFollowGroups){
+			this.perCalTogglePrefsHandler = this.handlePerCalTogglePrefs.bindAsEventListener(this);
+			var i=0;
+			for(obj in this.perCalAlarmsPrefs){
+				if(this.perCalAlarmsPrefs.hasOwnProperty(obj)){
+					this.controller.listen('perCal-'+i+'-toggle', Mojo.Event.propertyChange, this.perCalTogglePrefsHandler);
+					i++;
+				}
+			}
+		}
 	},
 	
 	deactivate: function() {
-			
+		if(this.userUberCalGroups && this.userUberCalGroups.length > 0) {
+			var tempGroups = [];
+			var idx = 0;
+			for(var i=0; i< this.userUberCalGroups.length; i++) {
+				if(this.userUberCalGroups[i] && this.userUberCalGroups[i].includes && this.userUberCalGroups[i].includes.length >0) {
+					// group is defined with at least one include
+					tempGroups[idx] = {};
+					tempGroups[idx].rId = this.userUberCalGroups[i].rId;
+					tempGroups[idx].groupname = (this.userUberCalGroups[i].groupname !== undefined && this.userUberCalGroups[i].groupname !== "") ? this.userUberCalGroups[i].groupname : $L("Default Group ") + idx.toString();
+					tempGroups[idx].includes = this.userUberCalGroups[i].includes;
+					tempGroups[idx].workWeek = this.userUberCalGroups[i].workWeek;
+					idx++;
+				}
+			}
+			if(tempGroups) {
+				var userCalGrpsCookie = new Mojo.Model.Cookie("ucGroupsCookie");
+				if(userCalGrpsCookie) {
+					userCalGrpsCookie.put({usercalgroups: tempGroups});
+				}
+			}
+		} else { // user deleted all the groups
+			var userCalGrpsCookie = new Mojo.Model.Cookie("ucGroupsCookie");
+			if(userCalGrpsCookie) {
+				userCalGrpsCookie.remove();
+			}
+		}
 		this.controller.get('pav_calendars_list').stopObserving(Mojo.Event.listTap, this.acctsListSelectionHandler);
 		this.controller.stopListening('pav_calendars_list', Mojo.Event.propertyChange, this.listPropertyChangeHandler);
-
+		this.controller.stopListening('uber_calgroup_list' , Mojo.Event.propertyChange, this.uberCalGroupsChangeHandler);
+		this.controller.stopListening('uber_calgroup_list' , Mojo.Event.listAdd, this.uberCalGroupsAddHandler);
+		this.controller.stopListening('uber_calgroup_list' , Mojo.Event.listDelete, this.uberCalGroupsDeleteHandler);
+		if(this.perCalAlarms && !this.alarmsFollowGroups){
+			if(this.excludedCals && this.excludedCals.length > 0){
+				var len = this.excludedCals.length
+				var idx, cals = this.excludedCals.slice();
+				for(i=0;i<len;i++){
+					idx = this.validCals.indexOf(cals[i]) 
+					if(idx === -1){
+						cals.splice(idx,1);
+					}
+				}
+				if(cals && cals.length > 0){
+					this.reminderMgr.updateExcCals(cals.slice());
+					var excCalsCookie = new Mojo.Model.Cookie("excCalAlarms");
+					if(excCalsCookie){
+						excCalsCookie.put({exccalslist: cals});
+					}
+				} else {
+					var excCalsCookie = new Mojo.Model.Cookie("excCalAlarms");
+					if(excCalsCookie){
+						excCalsCookie.remove();;
+					}
+					this.reminderMgr.updateExcCals([]);
+				}
+			} else {
+				var excCalsCookie = new Mojo.Model.Cookie("excCalAlarms");
+				if(excCalsCookie){
+					excCalsCookie.remove();;
+				}
+				this.reminderMgr.updateExcCals([]);
+			}
+			var i=0;
+			for(var obj in this.perCalAlarmsPrefs){
+				if(this.perCalAlarmsPrefs.hasOwnProperty(obj)){
+					this.controller.stopListening('perCal-'+i+'-toggle', Mojo.Event.propertyChange, this.perCalTogglePrefsHandler);
+					i++;
+				}
+			}
+		}
 	},
 	
 		
@@ -184,6 +488,203 @@ var PrefsOptionsAssistant = Class.create({
 		}
 	},
 	
+	handleUberCalGroupsChange: function(event) {
+		if(event.model !== undefined && event.target.id !== undefined) {
+			var model = event.model;
+			var targetId = event.target.id;
+			if(targetId === "uber-cal-list-toggle" && model.rId !== undefined) {
+				//toggled a calendar entry
+				var rID = model.rId;
+				var grpLen = this.userUberCalGroups.length;
+				for(var i=0; i< grpLen; i++) {
+					if(this.userUberCalGroups[i].rId === rID) {
+						var grpIndex = i;
+						break;
+					}
+				}
+				var includes = this.userUberCalGroups[grpIndex].includes.clone();
+				if(model.id !== undefined && model.displayInAll !== undefined && model.displayInAll === false) {
+					if(includes !== undefined && includes !== '') { // not empty remove
+						if(includes.length === 1) {
+							this.controller.showAlertDialog({
+								onChoose: function(value){return;},
+								title: $L("Warning: 0 calendars selected"),
+								message: $L("Groups without 1 included calendar will not be saved"),
+								choices:[
+								{label: $L("OK"), value:"cancel", type:'dismiss'}   
+								]
+							});
+						}
+						if(includes.indexOf(model.id) !== -1){
+							var inIdx = includes.indexOf(model.id);
+							includes.splice(inIdx, 1);
+							this.userUberCalGroups[grpIndex].includes = [];
+							includes.each(function(item) {
+								this.userUberCalGroups[grpIndex].includes.push(item);
+							}, this);
+						}
+					}
+				} else if(model.id !== undefined && model.displayInAll !== undefined && model.displayInAll === true) {
+					if(includes !== undefined && includes !== '') { // not empty add
+						if(includes.indexOf(model.id) === -1){
+							includes.push(model.id);
+							this.userUberCalGroups[grpIndex].includes = [];
+							includes.each(function(item) {
+								this.userUberCalGroups[grpIndex].includes.push(item);
+							}, this);
+						}
+					} else if(includes !== undefined && includes === '') { // previously empty
+						includes.push(id);
+							this.userUberCalGroups[grpIndex].includes = [];
+							includes.each(function(item) {
+								this.userUberCalGroups[grpIndex].includes.push(item);
+							}, this);
+					}
+				}
+				//Mojo.Log.error("includes:   " + JSON.stringify(includes));
+			}
+			if(model.rId !== undefined && targetId === "ubercalgroup-text" + model.rId  && model.value !== undefined) {
+				var rID = model.rId;
+				if(model.value === '') { // empty is not allowed for group name
+					return;
+				} else { //changed  the group name
+					var grpLen = this.userUberCalGroups.length;
+					for(var i=0; i< grpLen; i++) {
+						if(this.userUberCalGroups[i].rId === rID) {
+							var grpIndex = i;
+							break;
+						}
+					}
+					this.userUberCalGroups[grpIndex].groupname = model.value;
+					this.uberCalGroupsModel.items[grpIndex].groupname = model.value;
+					this.uberCalGroupsModel.items[grpIndex].category = model.value;
+					this.controller.get('uber_calgroup_list').mojo.noticeUpdatedItems(0, this.uberCalGroupsModel.items);
+				}
+			}
+			if(model.rId !== undefined && targetId === "uber-cal-workweek-toggle" + model.rId  && model.value !== undefined) {
+				var rID = model.rId;
+				 //changed  work group property
+					var grpLen = this.userUberCalGroups.length;
+					for(var i=0; i< grpLen; i++) {
+						if(this.userUberCalGroups[i].rId === rID) {
+							var grpIndex = i;
+							break;
+						}
+					}
+					this.userUberCalGroups[grpIndex].workWeek = model.value;
+					//this.controller.get('uber_calgroup_list').mojo.noticeUpdatedItems(0, this.uberCalGroupsModel.items);
+			}
+			//Mojo.Log.error("model:  " + JSON.stringify(model));
+			//Mojo.Log.error("target.id:   " + JSON.stringify(targetId));
+		}
+	},
+	
+	handleUberCalGroupsAdd: function(event) {
+		var groupCookieChrs = Object.toJSON(this.userUberCalGroups).length;
+		if(groupCookieChrs >1300) {
+			this.controller.showAlertDialog({
+				onChoose: function(value) { return;},
+				title: $L("Warning: ") + groupCookieChrs + $L(" characters"),
+				message: $L("Close to max number of groups, no more groups can be added."),
+				choices:[
+				{label: $L("OK"), value:"cancel", type:'dismiss'}   
+				]
+			});
+			return;
+		} else {
+			var targetId = event.target.id;
+			var len = this.userUberCalList.length;
+			var rID = this.randId();
+			var newUberCalGroup = {rId: rID, groupname:$L("New Group") + len, _id: "", category:$L("New Group"), workWeekTitle:$L('Work week'), workWeek:false};
+			var newUberCal = {rId: rID, groupname:"", includes: [this.uberDefaultCalId], workWeek: false};
+			this.userUberCalGroups.push(newUberCal); //set for cookie not in list model
+			var cals = [];
+			cals = this.uberCalList.clone();
+			this.userUberCalList[len] = []; // build for toggles
+			cals.each(function(item) {
+					this.userUberCalList[len].push(Object.clone(item));
+					}, this);
+			if(this.userUberCalList[len] && cals && this.uberDefaultCalId) {
+				for(var k = 0; k < cals.length; k++) {
+					this.userUberCalList[len][k].displayDisabled = false;
+					this.userUberCalList[len][k].displayInAll = false;
+					this.userUberCalList[len][k].rId = rID;
+					this.userUberCalList[len][k].type = "toggle";
+					if(cals[k].id == this.uberDefaultCalId) {
+						this.userUberCalList[len][k].displayInAll = true;
+					}
+				}
+			}
+			//add group to group list model items
+			this.uberCalGroupsModel.items.push(newUberCalGroup);
+			var grpLength = this.uberCalGroupsModel.items.length;
+			//setup new toggles
+			var newGrpIdx = this.userUberCalGroups.length - 1;
+			this.uberMod[len] = [];
+			this.controller.setupWidget("ubercalscroller" + rID, {mode: 'vertical'});
+			this.controller.setupWidget('ubercalgroup-text' + rID,
+									this.txtAttr ={inputName: 'groupname', preventResize: true, multiline: false, enterSubmits: true, maxLength: 18, autoFocus: false, hintText: $L('Enter a group name'), modelProperty: 'value'},
+									this.model = {type: "textfield", rId: rID, value: ""});
+			this.controller.setupWidget('uber-cal-workweek-toggle'+rID, this.workAttr={modelProperty:'value'}, this.workModel={type:"workweek", rId: rID, value: newUberCalGroup.workWeek});
+			this.controller.setupWidget('ubercallist' + rID, 
+									this.uberCalAttrs = {itemTemplate: 'prefs-options/ubercalitem'},
+									this.uberMod[len] = {listTitle: $L("Calendar List"), items: this.userUberCalList[len]});
+			
+			this.controller.get('uber_calgroup_list').mojo.noticeAddedItems(grpLength, [newUberCalGroup]);
+			this.controller.get('uber_calgroup_list').mojo.focusItem(this.uberCalGroupsModel.items[grpLength -1]);
+		}
+	},
+	
+	handleUberCalGroupsDelete: function(event) {
+		var rID = event.item.rId;
+		var grpIdx = event.index;
+		if(rID !== undefined) {
+			// remove grp from model and userUberCalGroups
+			var grpLen = this.uberCalGroupsModel.items.length;
+			for(var i=0; i< grpLen; i++) {
+				if(this.userUberCalGroups[i] && this.userUberCalGroups[i].rId === rID) {
+					//Mojo.Log.error("group:  " + JSON.stringify(this.userUberCalGroups[i]));
+					this.userUberCalGroups.splice(i, 1); // remove from the cookie array
+				}
+				if(this.uberMod[i] && this.uberMod[i].rId === rID) {
+					this.uberMod.splice(i, 1); //toggle model
+				}
+				if(this.userUberCalList[i] && this.userUberCalList[i][0].rId === rID) {
+					//Mojo.Log.error("cal List:   " + JSON.stringify(this.userUberCalList[i]));
+					this.userUberCalList.splice(i, 1); // remove toggle items
+				}
+			}
+			//Mojo.Log.error("group:  " + JSON.stringify(this.uberCalGroupsModel.items[grpIdx]));
+			this.uberCalGroupsModel.items.splice(grpIdx, 1); // group model
+			if(rID === this.uberGroups.rId){ //deleted selected group
+				this.uberGroups = {inUse: false, rId: ""};
+				this.app.setUberGroups(false);
+				this.calendarsManager.setCurrentCal('all');
+			}
+		}
+	},
+	
+	handlePerCalTogglePrefs: function(event){
+		var id = event.model.id;
+		var enabled = event.model.value;
+		var exc = [], idx;
+		exc = this.excludedCals.slice();
+		idx = exc.indexOf(id)
+		if(enabled){
+			if(idx !== -1){
+				exc.splice(idx,1);
+			}
+		} else if(enabled === false){
+			if(idx === -1){
+				exc.push(id);
+			}
+		}
+		this.excludedCals = [];
+		if(exc && exc.length > 0){
+			this.excludedCals = exc.slice();
+		}
+	},
+	
 	handleListPropertyChange: function(event) {		
 		//Mojo.Log.info("handleListPropertyChange %j", event);
 		if (event.property !== "displayInAll") {
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/reminder-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/reminder-assistant.js
index 65ecc4e..5252c8c 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/reminder-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/reminder-assistant.js
@@ -3,24 +3,231 @@
 /*jslint laxbreak: true, white: false, devel: true */
 /*global Class: false, Mojo: false, $L: false, Template: false, getAppAssistant: false */
 
+g_notificationRepeatCount = 0;
+
 var ReminderAssistant = Class.create({
 
+	snoozeDurationOptions: [
+		{label:$L('30 minutes before') + ' ' +$L('start'), value:'-30'},
+		{label:$L('15 minutes before') + ' ' +$L('start'), value:'-15'},
+		{label:$L('10 minutes before') + ' ' +$L('start'), value:'-10'},
+		{label:$L('5 minutes before') + ' ' +$L('start'), value:'-5'},
+		{label:$L('At Start Time'), value:'0'},
+		{label:$L('5 minutes'), value:'5'},
+		{label:$L('10 minutes'), value:'10'},
+		{label:$L('15 minutes'), value:'15'},
+		{label:$L('30 minutes'), value:'30'},
+		{label:$L('1 hour'), value:'60'},
+		{label:$L('2 hours'), value:'120'},
+		{label:$L('4 hours'), value:'240'},
+		{label:$L('8 hours'), value:'480'},
+		{label:$L('10 hours'), value:'600'},
+		{label:$L('12 hours'), value:'720'},
+		{label:$L('1 day'), value:'1440'},
+		{label:$L('2 days'), value:'2880'},
+		{label:$L('3 days'), value:'4320'},
+		{label:$L('4 days'), value:'5760'},
+		{label:$L('5 days'), value:'7200'},
+		{label:$L('6 days'), value:'8640'},
+		{label:$L('1 week'), value:'10080'},
+		{label:$L('2 weeks'), value:'20160'}
+	],
+	
 	initialize: function(reminder, needThrobbing) {
 		Mojo.Log.info("========= RA: initialize: "+reminder._id);
 		this.DEFAULT_SNOOZE			= 5;
 		this.reminderManager		= getAppAssistant().getReminderManager();		
 		this.doThrob				= needThrobbing;
 		this.reminder				= reminder;		
+		
+		//Ubercalendar additions
+		this.autoSnoozed = false;
+		this.snoozeThrob = false;
+		this.showSnoozedForBanner = false;
+		this.stopAutoClose = true;
+		this.sendSonyWatch = false;
+		
+		//get default snooze duration from cookie
+		this.snoozeCookie = new Mojo.Model.Cookie("snoozeCookie");
+
+		if (this.snoozeCookie) {
+			var snzcookie = this.snoozeCookie.get();
+			if (snzcookie) {
+				if(snzcookie.defaultSnoozeDuration !== undefined) {
+					this.DEFAULT_SNOOZE = parseInt(snzcookie.defaultSnoozeDuration, 10);
+				} else {
+					this.DEFAULT_SNOOZE = 5;
+				}
+				if(snzcookie.showSnoozedForBanner !== undefined)	{
+					this.showSnoozedForBanner = snzcookie.showSnoozedForBanner;
+				} else {
+					this.showSnoozedForBanner = false;
+				}
+				if(snzcookie.stopAutoClose !== undefined)	{
+					this.stopAutoClose = snzcookie.stopAutoClose;
+				} else {
+					this.stopAutoClose = true;
+				}
+				if (snzcookie.sendsonywatch !== undefined) {
+					this.sendSonyWatch = snzcookie.sendsonywatch;
+				} else {
+					this.sendSonyWatch = false;
+				}
+			}
+		}
+		
+		//load the notification repeat preferences.
+		//doing this here instead of in initialze to avoid conflict with snooze duration patch
+		//get notification repeat interval and max repeat values from cookie
+		this.notificationCookie = new Mojo.Model.Cookie("notifCookie");
+		this.notificationRepeatInterval = '2';
+		this.notificationMaxRepeat = '99999';
+		
+		if (this.notificationCookie) {
+			var notificationCookie = this.notificationCookie.get();
+			if (notificationCookie) {
+				if(notificationCookie.notificationRepeatInterval !== undefined) {
+					this.notificationRepeatInterval = notificationCookie.notificationRepeatInterval;
+				} else {
+					//set default value to 2 minutes
+					this.notificationRepeatInterval = '2';
+				}
+			
+				if(notificationCookie.notificationMaxRepeat !== undefined) {
+					this.notificationMaxRepeat = notificationCookie.notificationMaxRepeat;
+				} else {
+					//set default value to unlimited
+					this.notificationMaxRepeat = '99999';
+				}
+			}
+		}
+		//logic to not pic a default snooze that has already past
+		//set the snoozeOptions to the master set otherwise as we remove items we also remove them
+		//for any additonal reminders.
+		this.snoozeOptions = this.snoozeDurationOptions.slice(0);
+		var curDate = new Date();
+		var curDateTS = curDate.getTime();
+		var defSnooze = this.snoozeOptions[0].value;
+		var defSnoozeTS = defSnooze * 60*1000; //put in millisec
+		var testDateTS = this.reminder.startTime + defSnoozeTS;
+		while(testDateTS <= curDateTS && defSnooze <= 0)
+		{
+			//remove the invalid option
+			var tmp = this.snoozeOptions.shift();
+			defSnooze = parseInt(this.snoozeOptions[0].value);
+			defSnoozeTS = defSnooze * 60*1000;
+			testDateTS = this.reminder.startTime + defSnoozeTS;
+		}
+		this.lastSnooze = this.reminderManager.findSnoozedListItem(reminder.eventId);
+		if(this.lastSnooze && this.lastSnooze !== -1) {
+			var testsnz = parseInt(this.lastSnooze, 10)/(60*1000);
+			for(var i=0; i<this.snoozeOptions.length; i++) {
+				if(this.snoozeOptions[i].value == testsnz) {
+					this.snzIndex = i;
+					this.DEFAULT_SNOOZE = this.snoozeOptions[i].value;
+					return;
+				}
+			}
+
+		}
+		for(var i=0; i<this.snoozeOptions.length; i++) {
+			if(this.snoozeOptions[i].value == parseInt(this.DEFAULT_SNOOZE, 10)) {
+				this.snzIndex = i;
+				return;
+			}
+		}
+		//if the DEFAULT_SNOOZE < defSnooze then it is no longer a valid snooze option so use the next valide value
+		if( this.DEFAULT_SNOOZE < defSnooze )
+		{
+			this.DEFAULT_SNOOZE = defSnooze;
+			this.snzIndex= 0;
+		}
 	},
 
 	activate:function(){
 		Mojo.Log.info("========= RA: activate");
-		if (this.doThrob) {
+		var prefs = getAppAssistant().getPrefsManager().getPrefs();
+		this.snoozeThrob = prefs.blinkNotification;
+		if (this.doThrob && this.snoozeThrob) {
 			this.controller.stageController.indicateNewContent(true);
 		}
+		if(parseInt(this.notificationMaxRepeat) !== 0 && g_notificationRepeatCount < parseInt(this.notificationMaxRepeat)) {
+			if(ReminderManager.fromDash === false) {
+				this.schedulePlayAlarmSoundTask();
+			} else {
+				ReminderManager.fromDash = false;
+			}
+		}
 	},
 	
 	setup: function() {
+		// prepare an additional widget (on the fly to prevent editing of translated resources)
+		var newTextDiv = document.createElement('div');
+		newTextDiv.setAttribute('class', "palm-dashboard-text");
+		newTextDiv.setAttribute('style', "margin-top: 10px position:relative -webkit-palm-mouse-target:ignore");
+		newTextDiv.setAttribute('id', "reminder-chosen-snz-text");
+		newTextDiv.innerHTML = this.snoozeOptions[this.snzIndex].label;
+		// first button row
+		var newButtonRow1 = document.createElement('div');
+		newButtonRow1.setAttribute('id', "reminder-snz-button-row1");
+		newButtonRow1.setAttribute('style', "position:relative; width:100%");
+		var setSnoozeBtn = document.createElement('div');
+		setSnoozeBtn.setAttribute('id', "reminder-setsnooze");
+		var ssbtnwrapper = document.createElement('div');
+		ssbtnwrapper.setAttribute('x-mojo-loc', '""');
+		ssbtnwrapper.setAttribute('class', "button-wrapper");
+		ssbtnwrapper.innerHTML = '+/-';
+		setSnoozeBtn.appendChild(ssbtnwrapper);
+		var remSnooze = this.controller.get('reminder-snooze').cloneNode(true); 
+		var remDismiss = this.controller.get('reminder-dismiss').cloneNode(true);
+		this.controller.get('reminder-dismiss').parentNode.removeChild(this.controller.get('reminder-dismiss'));
+		this.controller.get('reminder-snooze').parentNode.removeChild(this.controller.get('reminder-snooze'));
+		newButtonRow1.appendChild(remDismiss);
+		newButtonRow1.appendChild(remSnooze);
+		newButtonRow1.appendChild(setSnoozeBtn);
+		
+		// second row of buttons
+		var newButtonRow2 = document.createElement('div');
+		newButtonRow2.setAttribute('id', "reminder-snz-button-row2");
+		newButtonRow2.setAttribute('style', "position:relative; width:100%");
+		var newBtnWrapDiv1 = document.createElement('div');
+		var newBtnWrapDiv2 = document.createElement('div');
+		var newBtnWrapDiv3 = document.createElement('div');
+		newBtnWrapDiv1.setAttribute('class', "button-wrapper");
+		newBtnWrapDiv2.setAttribute('class', "button-wrapper");
+		newBtnWrapDiv3.setAttribute('class', "button-wrapper");
+		newBtnWrapDiv1.setAttribute('x-mojo-loc', '""');
+		newBtnWrapDiv2.setAttribute('x-mojo-loc', '""');
+		newBtnWrapDiv3.setAttribute('x-mojo-loc', '""');
+		newBtnWrapDiv1.innerHTML = '+';
+		newBtnWrapDiv2.innerHTML = '-';
+		newBtnWrapDiv3.innerHTML = $L("Snooze");
+		var snzAdvanceBtn = document.createElement('div');
+		var snzPreviousBtn = document.createElement('div');
+		var snzChosenBtn = document.createElement('div');
+		snzAdvanceBtn.setAttribute('id', "reminder-snz-advance-button");
+		snzPreviousBtn.setAttribute('id', "reminder-snz-previous-button");
+		snzChosenBtn.setAttribute('id', "reminder-snz-chosen-button");
+		snzAdvanceBtn.appendChild(newBtnWrapDiv1);
+		snzPreviousBtn.appendChild(newBtnWrapDiv2);
+		snzChosenBtn.appendChild(newBtnWrapDiv3);
+		newButtonRow2.appendChild(snzPreviousBtn);
+		newButtonRow2.appendChild(snzChosenBtn);
+		newButtonRow2.appendChild(snzAdvanceBtn);
+
+		
+
+		var panelDiv = this.controller.get('reminder-email').parentNode;
+		panelDiv.appendChild(newTextDiv);
+		panelDiv.appendChild(newButtonRow1);
+		panelDiv.appendChild(newButtonRow2);
+		newButtonRow2.setAttribute('style', "display:none");
+		//setup the snooze duration selector list
+		this.selectorChoices = this.snoozeOptions;
+		this.selectorAttributes = {label: "Snooze", modelProperty:'value' };
+		this.controller.get('reminder-snz-button-row2').style.display = 'none';
+		this.onSnoozeDurationChangedHandler = this.onSnoozeDurationChanged.bindAsEventListener(this);
+		
 		Mojo.Log.info("========= RA: setup: in");
 		this.onEventHandler		= this.onEvent	.bindAsEventListener(this);
 		this.onDismissHandler	= this.onDismiss.bindAsEventListener(this);
@@ -28,6 +235,8 @@ var ReminderAssistant = Class.create({
 		this.onSnoozeHandler	= this.onSnooze	.bindAsEventListener(this);
 		this.reminderManager.observeReminders ('reminder-assistant', this);
 		this.reminderManager.observeRemindersDisplay ('reminder-assistant', this);
+		this.setSnoozeHandler = this.handleSetSnoozeTap.bindAsEventListener(this);
+		this.snzPlusMinusHandler = this.handleSnzPlusMinus.bindAsEventListener(this);
 		this.updateDisplay();
 		this.reminderManager.showCompleted('reminder-assistant', this.reminder._id);
 		Mojo.Log.info("========= RA: setup: out");
@@ -98,6 +307,23 @@ var ReminderAssistant = Class.create({
 		Mojo.Log.info("========= RA: updateDisplay: removing listeners");			
 		this.removeListeners();
 		
+		if(this.sendSonyWatch){
+			//Report Title to ST-Watch MBW150
+			Mojo.Log.error('ABOUT TO Report reminder to ST-Watch MBW150');
+			try{ var request = new Mojo.Service.Request('palm://com.palm.applicationManager', {
+					method: 'open',
+					parameters: {
+						id: "de.metaviewsoft.mwatch",
+						params: {command: "SMS", icon: "CAL", "appid": "com.palm.app.calendar", info: data.subject + "\n" + data.time +" / " + data.location}
+					 },
+					onSuccess: function() {},
+					onFailure: function() {}		
+				});
+			} catch(e){
+				Mojo.Log.error('FAILED TO Report reminder to ST-Watch MBW150');
+			}
+		}
+		
 		var eventHtml = Mojo.View.render({object: data, template: 'reminder/reminder-event'});
 		this.updateHTML(this.controller.get('reminder-event'), eventHtml);
 		
@@ -113,6 +339,35 @@ var ReminderAssistant = Class.create({
 		Mojo.Log.info("========= RA: updateDisplay: out");
 	},
 	
+	handleSetSnoozeTap: function() {
+		//deactivate & animate
+		var btnR1 = this.controller.get('reminder-snz-button-row1');
+		btnR1.absolutize();
+		var btnR2 = this.controller.get('reminder-snz-button-row2');;
+		Mojo.Animation.animateStyle(btnR1, 'left', 'bezier', {
+				from:0,
+					to: 530,
+					duration: 0.2,
+					curve:'over-easy',
+					onComplete: function() {btnR2.style.display="";}
+				}
+		);
+	},
+	
+	handleSnzPlusMinus: function(e) {
+		var targetBtn = e.currentTarget.id;
+		var length = this.snoozeOptions.length;
+		if(targetBtn == 'reminder-snz-advance-button') {
+			//advance in time in snz options
+			this.snzIndex = (this.snzIndex + 1) < length ? (this.snzIndex + 1) : 0;
+			this.controller.get('reminder-chosen-snz-text').innerHTML = this.snoozeOptions[this.snzIndex].label;
+		} else if(targetBtn == 'reminder-snz-previous-button') {
+			//back in time in snz options
+			this.snzIndex = (this.snzIndex - 1) < 0 ? (length - 1) :(this.snzIndex - 1);
+			this.controller.get('reminder-chosen-snz-text').innerHTML = this.snoozeOptions[this.snzIndex].label;
+		}
+	},
+	
 	addListeners: function() {
 		Mojo.Log.info("========= RA: addListeners: in");
 		try{
@@ -122,6 +377,10 @@ var ReminderAssistant = Class.create({
 			this.controller.get('notification-event-subtitle').addEventListener(Mojo.Event.tap, this.onEventHandler);
 			this.controller.get('notification-event-icon').addEventListener(Mojo.Event.tap, this.onEventHandler);
 			this.controller.get('notification-event-location').addEventListener(Mojo.Event.tap, this.onEventHandler);
+			this.controller.get('reminder-setsnooze').addEventListener(Mojo.Event.tap, this.setSnoozeHandler);
+			this.controller.get('reminder-snz-advance-button').addEventListener(Mojo.Event.tap, this.snzPlusMinusHandler);
+			this.controller.get('reminder-snz-previous-button').addEventListener(Mojo.Event.tap, this.snzPlusMinusHandler);
+			this.controller.get('reminder-snz-chosen-button').addEventListener(Mojo.Event.tap, this.onSnoozeDurationChangedHandler);
 		}
 		catch(e){
 			Mojo.Log.info("========= RA: addListeners: ARGH, FAIL");
@@ -159,6 +418,23 @@ var ReminderAssistant = Class.create({
 		if (snooze) {
 			snooze.removeEventListener(Mojo.Event.tap, this.onSnoozeHandler);
 		}
+		//remove snoozeDuration event listners
+		var setSnooze = this.controller.get('reminder-setsnooze');
+		if (setSnooze) {
+			setSnooze.removeEventListener(Mojo.Event.tap, this.setSnoozeHandler);
+		}
+		var snoozeAdvance = this.controller.get('reminder-snz-advance-button');
+		if (snoozeAdvance) {
+			snoozeAdvance.removeEventListener(Mojo.Event.tap, this.snzPlusMinusHandler);
+		}
+		var snoozePrevious = this.controller.get('reminder-snz-previous-button');
+		if (snoozePrevious) {
+			snoozePrevious.removeEventListener(Mojo.Event.tap, this.snzPlusMinusHandler);
+		}
+		var snoozeChosen = this.controller.get('reminder-snz-chosen-button');
+		if (snoozeChosen) {
+			snoozeChosen.removeEventListener(Mojo.Event.tap, this.onSnoozeDurationChangedHandler);
+		}
 		Mojo.Log.info("========= RA: removeListeners: out");
 	},
 	
@@ -218,18 +494,106 @@ var ReminderAssistant = Class.create({
 		return template.evaluate(timeDelta);
 	},
 	
+	// returns date in format suitable for application manager
+	// takes date
+	dateFormatForScheduler: function(d) {
+		function twoChars(x) { return ((x>9)?"":"0")+x; }
+		
+		return twoChars(d.getUTCMonth()+1) + "/" + twoChars(d.getUTCDate()) + "/" + twoChars(d.getUTCFullYear()) 
+					+ " " + twoChars(d.getUTCHours()) + ":" + twoChars(d.getUTCMinutes()) + ":" + twoChars(d.getUTCSeconds()) ;
+	},
+	
+	schedulePlayAlarmSoundTask: function() {
+		//retrigger reminder every X minutes until we acknowledge it.
+		//notificationRepeatInterval disables the notification repeat
+		//also check to make sure we have not exceeded the max repeat value
+		if( (parseFloat(this.notificationRepeatInterval) != 0 && g_notificationRepeatCount < parseInt(this.notificationMaxRepeat)) || (parseFloat(this.notificationRepeatInterval) === 0 && this.stopAutoClose === true) ) {
+			var playSoundTime = new Date();
+			if(parseFloat(this.notificationRepeatInterval) != 0 && g_notificationRepeatCount < parseInt(this.notificationMaxRepeat)) {
+				g_notificationRepeatCount++;
+				playSoundTime = new Date(playSoundTime.getTime() + parseFloat(this.notificationRepeatInterval)*60*1000);
+			} else {
+				// repeat notification is disabled, but stop auto close is on
+				// schedule a snooze 7 mins before autoClose time to change autoclose time
+				var endTime = parseInt(this.reminder.endTime, 10);
+				var autoTime = parseInt(this.reminder.autoCloseTime, 10);
+				var startTime = parseInt(this.reminder.startTime, 10);
+				var dura = endTime - startTime;
+				var testTime = (dura < 900000) ? (startTime+900000) : (startTime+dura);
+				// verify this is the first time setting auto close time
+				if(autoTime === testTime) {
+					playSoundTime = new Date(autoTime - 7*60*1000);
+				} else {
+					return;
+				}
+			}
+			var eId = this.reminder.eventId;
+			var key = "playalarmsound" + eId.toString();
+			var at = this.dateFormatForScheduler(playSoundTime);
+			var reminderJSON = JSON.stringify(this.reminder);
+			this.controller.serviceRequest("palm://com.palm.power/timeout/", {
+				method: "set",
+				parameters: {
+					"wakeup": true,
+					"key": '"' + key + '"',
+					"uri": "palm://com.palm.applicationManager/open",
+					"params": { "id": "com.palm.app.calendar", "params": {"playAlarmSound": reminderJSON }},
+					"at": at
+				},
+				onSuccess: function(resp) {
+					Mojo.Log.error("****************** Reminder-assistant repeat scheduled. " + resp.key);
+				}.bind(this),
+				onFailure: function() {
+					Mojo.Log.error("****************** Reminder-assistant repeat failed: " + e.errorText );
+				}.bind(this)
+			});
+		}
+	},
+
+	removePlayAlarmSoundTask: function() {
+		var eId = this.reminder.eventId;
+		var key = "playalarmsound" + eId.toString();
+		if(parseInt(this.notificationMaxRepeat) !== 0 && g_notificationRepeatCount <= parseInt(this.notificationMaxRepeat) && g_notificationRepeatCount > 0) {
+			this.controller.serviceRequest("palm://com.palm.power/timeout/", {
+				method: "clear",
+				parameters: {"key": '"' + key + '"'},
+				onSuccess: function(resp) {
+					Mojo.Log.error("****************** Reminder-assistant remove repeat. " + resp.key);
+				}.bind(this),
+				onFailure: function(e) {
+					Mojo.Log.error("****************** Reminder-assistant remove repeat failed." + e.errorText);
+				}.bind(this)
+			});
+			//reset the notification repeat counter
+			g_notificationRepeatCount = 0;
+		}
+	},
+
 	onEvent: function(event) {
+		if(ReminderManager.fromDash === false) {
+			this.removePlayAlarmSoundTask();
+		}
 		Mojo.Log.info("========= RA: onEvent: "+this.reminder._id);
 		this.showEventDetails();
 		this.reminderManager.dismissReminder(this.reminder);
 	},
 
 	onDismiss: function(event) {
+		if(ReminderManager.fromDash === false) {
+			this.removePlayAlarmSoundTask();
+		}
 		Mojo.Log.info("========= RA: onDismiss: "+this.reminder._id);
-		this.reminderManager.dismissReminder(this.reminder);
+		if(event && event.down && event.down.altKey === true) {
+			this.reminderManager.dismissAllReminders();
+		} else {
+			this.reminderManager.dismissReminder(this.reminder);
+		}
 	},
 
 	onEmail: function(event) {
+		if(ReminderManager.fromDash === false) {
+			this.removePlayAlarmSoundTask();
+		}
 		Mojo.Log.info("========= RA: onEmail: "+this.reminder._id);
 		if (this.reminder.attendees && this.reminder.attendees.length > 0) {
 			var messageBody = $L("Running late, on my way...");
@@ -243,9 +607,33 @@ var ReminderAssistant = Class.create({
 	},
 
 	onSnooze: function(event) {
-		Mojo.Log.info("========= RA: onSnooze: "+this.reminder._id);
-		this.showSnoozeBanner(this.DEFAULT_SNOOZE);
-		this.reminderManager.snoozeReminder(this.reminder);
+		if(ReminderManager.fromDash === false) {
+			this.removePlayAlarmSoundTask();
+		}
+		if(this.showSnoozedForBanner) {
+			Mojo.Log.info("========= RA: onSnooze: "+this.reminder._id);
+			this.showSnoozeBanner(this.DEFAULT_SNOOZE);
+		}
+		var snzTS;
+		var curTS = new Date().getTime();
+		if(this.DEFAULT_SNOOZE === 0) {
+			snzTS = this.reminder.startTime - curTS;
+		} else if (this.DEFAULT_SNOOZE <0){
+			snzTS = (this.reminder.startTime + this.DEFAULT_SNOOZE*60*1000) - curTS;
+		} else {
+			snzTS = this.DEFAULT_SNOOZE*60*1000;
+		}
+		if (snzTS <0) {
+			snzTS = 1000;
+		}
+		if (this.stopAutoClose === true) {
+			this.reminder.autoCloseTime = parseInt(this.reminder.autoCloseTime, 10) + snzTS + 24*60*60*1000; // snooze time + 1 day
+			this.reminder.autoCloseTime = this.reminder.autoCloseTime.toString();
+			this.reminderManager.snoozeReminder(this.reminder, snzTS, this.reminder.autoCloseTime);
+		
+		} else {
+			this.reminderManager.snoozeReminder(this.reminder, snzTS);
+		}
 	},
 	
 	
@@ -258,6 +646,31 @@ var ReminderAssistant = Class.create({
 		Mojo.Controller.appController.showBanner({messageText: snoozeText}, null /*launchArguments*/, "calendar-snooze");
 	},
 	
+	/* handle the change event for the snooze duration.
+	 * set the default snooze value to the selection value
+	 * need to figure out how to save this value for reuse when the snooze duration
+	 * expires so that we can set the selection to the same value prevously selected
+	 */
+	onSnoozeDurationChanged: function(event) {
+		Mojo.Log.info("$$$$$$$$ Reminder-assistant onSnoozeDurationChanged: start: ");
+		this.DEFAULT_SNOOZE = parseInt(this.snoozeOptions[this.snzIndex].value, 10);
+		this.onSnooze(event);
+	},
+	
+	resetSnzDismiss: function () {
+		var btnR1 = this.controller.get('reminder-snz-button-row1');
+		btnR1.absolutize();
+		this.controller.get('reminder-snz-button-row2').style.display = "none";
+		Mojo.Animation.animateStyle(btnR1, 'left', 'bezier', {
+				from:530,
+					to: 0,
+					duration: 0.2,
+					curve:'over-easy',
+					onComplete: function() {Mojo.Log.error("reset snz dismiss")}
+				}
+		);
+	},
+	
 	closeAlert: function() {
 		Mojo.Log.info("========= RA: CLOSING THE WINDOW");
 		this.controller.window.close();
@@ -293,15 +706,17 @@ var ReminderAssistant = Class.create({
 	
 	//callback if the reminder manager says the display should change
 	remindersDisplayUpdated: function(reminder){
-		if(reminder){
-			Mojo.Log.info("========= RA: remindersDisplayUpdated: updating display: "+reminder._id);
-		}
-		else{
-			Mojo.Log.info("========= RA: remindersDisplayUpdated: updating display: no reminder");	
+		if (this.reminderManager.getNumReminders() === 0) {
+			Mojo.Log.info("========= RA: remindersDisplayUpdated: closing display: ");
+			this.closeAlert();	
+		} else {
+			if(reminder && this.reminder.eventId && this.reminder.eventId !== reminder.eventId) {
+				this.resetSnzDismiss();
+			}
+			this.reminder = reminder;
+			if (!reminder) {Mojo.Log.info("========= RA: remindersDisplayUpdated: updating display: no reminder");	}
+			this.updateDisplay();
 		}
-		
-		this.reminder = reminder;
-		this.updateDisplay();
 	}
 	
 });
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/repeat-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/repeat-assistant.js
index 65216e2..1a50eed 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/repeat-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/repeat-assistant.js
@@ -33,7 +33,7 @@ var RepeatAssistant = Class.create({
 		//Mojo.Log.info("repeat-assistant:initialize");
 		this.app				= getAppAssistant();
 		this.prefsManager		= this.app.getPrefsManager();
-		this.eventManager		= new Calendar.EventManager();
+		this.eventManager		= this.app.getEventManager();
 		this.targetEvent		= targetEvent;
 		this.targetCallBack		= callback;
 		this.oldEvent			= oldEvent;
@@ -46,7 +46,7 @@ var RepeatAssistant = Class.create({
 	},
 
 	databaseChanged: function() {
-		//Mojo.Log.info("\n\n\nrepeat: databaseChanged\n\n\n");
+		Mojo.Log.info("\n\n\nrepeat: databaseChanged\n\n\n");
 		if (!this.targetEvent._id) { return; }
 		this.app.db.getEvent (this.targetEvent._id, this.updateTargetEvent, this.updateTargetEvent);
 	},
@@ -54,7 +54,7 @@ var RepeatAssistant = Class.create({
 	updateTargetEvent: function (response) {
 		if (!response.returnValue) { return; }
 		//console.log ("\n\n\nupdateTargetEvent: response: "+JSON.stringify (response)+"\n\ntargetEvent: "+JSON.stringify (this.targetEvent)+"\n\n\n");
-		this.targetEvent._rev = response.results[0].rev;
+		this.targetEvent._rev = response.results[0].rev || response.results[0]._rev;
 	},
 
 	freqs: [
@@ -62,7 +62,10 @@ var RepeatAssistant = Class.create({
 		{name: $L('Weekly'), units: $L('week(s)')},
 		{name: $L('Monthly on (by date)'), units: $L('month(s)')},
 		{name: $L('Monthly on (by week)'), units: $L('month(s)')},
-		{name: $L('Yearly on (by month)...)'), units: $L('year(s)')}
+		{name: $L('Yearly on (by month)...)'), units: $L('year(s)')},
+		{name: $L('Monthly on (by last DoW)...)'), units: $L('month(s)')},
+		{name: $L('Monthly on (by last DofMonth)...)'), units: $L('month(s)')},
+		{name: $L('Monthly custom external'), units: $L('month(s)')}
 	],
 	
 	buildRepeatInfo: function(count) {
@@ -191,7 +194,7 @@ var RepeatAssistant = Class.create({
 			this.repeatFreqIndex = 3;
 			
 			//Look for BYDAY rules
-			var byDayRules = null;
+			var byMonthDayRules = null, byDayRules = null;
 			var rules = this.targetEvent.rrule.rules;
 			if (rules) {
 				var rulesLength = rules.length;
@@ -200,6 +203,9 @@ var RepeatAssistant = Class.create({
 					if (rule.ruleType == "BYDAY") {
 						byDayRules = rule.ruleValue;
 						break;
+					} else if (rule.ruleType == "BYMONTHDAY") {
+						byMonthDayRules = rule.ruleValue;
+						break;
 					}
 				}
 			}
@@ -208,11 +214,25 @@ var RepeatAssistant = Class.create({
 			if(byDayRules){
 				var day = new Date(this.targetEvent.dtstart).getDay();
 				var ord = Utilities.getDOWCount(this.targetEvent.dtstart);
-				if (byDayRules.length === 1 &&
-					(byDayRules[0].day == day && byDayRules[0].ord == ord)) {
-						this.repeatFreqIndex = 4;
-				}				
-			}			
+				if(byDayRules[0].ord) {
+					var ucByDay = parseInt(byDayRules[0].ord, 10);
+				}
+				if (byDayRules.length > 0) {
+					if(byDayRules.length > 1) {
+						this.repeatFreqIndex = 8;
+					} else if(byDayRules.length === 1 &&
+						(byDayRules[0].day == day && byDayRules[0].ord == ord)) {
+							this.repeatFreqIndex = 4;
+					} else if(ucByDay && ucByDay < 0) {
+						this.repeatFreqIndex = 6;
+					}
+				}
+			} else if (byMonthDayRules && byMonthDayRules.length > 0 && byMonthDayRules[0].ord) {
+				var ucByLastDay = parseInt(byMonthDayRules[0].ord, 10);
+				if(ucByLastDay && ucByLastDay < 0) {
+					this.repeatFreqIndex = 7;
+				}
+			}
 		}
 		else if (freq == 'YEARLY') {
 			this.repeatFreqIndex = 5;
@@ -313,15 +333,656 @@ var RepeatAssistant = Class.create({
 		
 		// update selections in the recurrence field
 		//into our recurence model
-		this.updateRecurrence();
-		
+		this.updateRecurrence();		
 		if (this.checkTargetEventDirty()) {
 			this.saveEvent(true);
-		}		
+		}
 	},	
 	
+	// From monthview (Feb is fixed up by hand as necessary)
+	// We try to avoid the DateJS stuff because it's indescribably slow.
+	_monthDays: [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ],
+	
+	rdayNames: function() {
+		var stday = 0;
+		if(this.startOfWeek==null || this.startOfWeek == 'undefined')
+			this.startOfWeek = 1;
+		stday = this.startOfWeek - 1;
+		var tday = new Date();
+		tday.moveToDayOfWeek(stday);
+		for (var i = 0; i < 7; i++) {
+			this._rdNames[i] = Mojo.Format.formatDate(tday, "E");
+			tday.addDays(1);
+		}
+	},
+	
+	isLeapYear: function(year) {
+		if (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0)) {
+			return true;
+		}
+			
+		return false;
+	},
+	radvanceWk: function(wk, month, year, maxwkn) {
+		var wkn = parseInt(wk, 10);
+		if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+			var maxwkn = this.weekModulusNum;
+		}
+		if((wkn > 8) && (wkn < maxwkn)) {
+			return (wkn + 1);
+		} else if((wkn <= 8) && (wkn < maxwkn)) {
+			wkn +=1;
+			var zd = '0';
+			return zd + wkn.toString();
+		} else if(wkn == maxwkn || wkn > maxwkn) {
+			var zd = '01';
+			return zd;
+		}
+	},
+	
+	// draw month function, expects numbers 0 based month
+	canvasRM: function(month, year, context) {
+		// date object
+		var rmon = new Date(year, month, 1);
+		
+		//setup number of days, 1st day(day of week), week number, number of weeks
+		var rd1dayOfMon = rmon.getDay();
+		var rwkNum = this.useISOweekNum === true ? rmon.getISO8601Week() : rmon.getWeekOfYear(this.prefStartDoW);
+		var maxwkn = this.useISOweekNum === true ? new Date((month != 0 ? year : year -1), 11, 28).getISO8601Week() : new Date((month != 0 ? year : year -1), 11, 28).getWeekOfYear(this.prefStartDoW);
+		maxwkn = maxwkn == 0 ? 53 : maxwkn;
+		rwkNum = rwkNum == 0 ? maxwkn : rwkNum;
+		if(this.weekNumOffset !== undefined && this.weekNumOffset !=0) {
+			var wkNum = parseInt(rwkNum,10) + this.weekNumOffset;
+			rwkNum = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			rwkNum = rwkNum < 10 ? '0' + rwkNum : rwkNum;
+		}
+		if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+			rwkNum = (parseInt(rwkNum, 10) % this.weekModulusNum);
+			rwkNum = rwkNum !== 0 ? rwkNum : this.weekModulusNum;
+			rwkNum = rwkNum < 10 ? '0' + rwkNum : rwkNum;
+		}
+		var r1offset = rd1dayOfMon - (this.startOfWeek - 1);
+		if (r1offset < 0) {r1offset += 7;}  //num of days of prev mon
+		if(this.isLeapYear(year)) {
+			this._monthDays[1] = 29;
+		} else {
+			this._monthDays[1] = 28;
+		}
+		this.RM[context].maxdays = this._monthDays[month];		
+		//setup fonts and spacing
+		this.mthctx[context].fillStyle = "rgb(0, 0, 0)";
+		this.mthctx[context].font = "bold 14px Prelude";
+		this.mthctx[context].textAlign = "left";
+		this.mthctx[context].textBaseline = "top";
+		var top = 2;
+		var leftmargin = 2;
+		var left = 0 + leftmargin;
+		var txt = "";
+		this.colHW = 30;
+		var maxW = 30;
+		this.topCor = 42 + (this.colHW/2); //top margin + half-cell
+		this.leftCor = this.colHW;
+		this.RM[context].fstDayLidx = r1offset;
+		this.RM[context].fstDayTidx = 1;
+		// setup title and week header
+		var titleTxt = Mojo.Format.formatDate(rmon, $L("MMM yyyy"));
+		this.mthctx[context].strokeText(titleTxt, left + 90, top);
+		this.mthctx[context].textAlign = "center";
+		for (var i = 0; i < 7; i++) {
+			txt = this._rdNames[i];
+			left = (i * this.colHW) + this.leftCor + 13;//13 is for font &txt to ctr
+			top = 22;
+			this.mthctx[context].strokeText(txt, left, top);	
+		}
+		this.mthctx[context].fillStyle = "rgb(104, 104, 104)";
+		this.mthctx[context].font = "14px Prelude";
+		this.mthctx[context].textAlign = "left";
+		this.mthctx[context].textBaseline = "alphabetic";
+		for (var j = 0; j < 6; j++) {
+			txt = rwkNum;
+			left = leftmargin;
+			top = (j * this.colHW) + this.topCor + 3; // 3 is for font correction
+			this.mthctx[context].strokeText(txt, left, top);
+			rwkNum = this.radvanceWk(rwkNum, month, year, maxwkn);
+		}
+		//iterate through the date rows
+		var num = 1;
+		this.mthctx[context].fillStyle = "rgb(0, 0, 0)";
+		this.mthctx[context].font = "bold 14px Prelude";
+		this.mthctx[context].textAlign = "center";
+		for (var j=0; j<6; j++) {
+			if (num > this.RM[context].maxdays) {
+				break; }
+			top = (j * this.colHW) + this.topCor + 3;
+			for (var i=0; i<7; i++) {
+				if (j==0 && i ==0) {i = r1offset;}
+				txt = num;
+				left =  (i * this.colHW) + this.leftCor + 13;
+				this.mthctx[context].strokeText(txt, left, top);
+				num +=1;
+				if (num > this.RM[context].maxdays) {
+					break; }
+			}
+		}
+	},
+	
+	RMnextM: function(index) {
+		this.RM[index].month = this.RM[index - 1].month;
+		this.RM[index].year = this.RM[index - 1].year;
+		if(this.RM[index].month == 11) {
+			this.RM[index].month = 0;
+			this.RM[index].year += 1;
+		} else {
+			this.RM[index].month += 1;
+		}
+	},
+	
+	RMprevM: function(index) {
+		this.RM[index].month = this.RM[index + 1].month;
+		this.RM[index].year = this.RM[index + 1].year;
+		if(this.RM[index].month == 0) {
+			this.RM[index].month = 11;
+			this.RM[index].year -= 1;
+		} else {
+			this.RM[index].month -= 1;
+		}
+	},
+	
+	// determin calendar order for the canvas's
+	orderRM: function( stDate, eDate, isAllDay) {
+		//check first
+		if(stDate.getTime() > eDate.getTime) {
+			Mojo.Log.error ("start after end");
+			return;
+		}
+		for(var i=0; i<6; i++) {
+			this.RM[i] = {};
+			this.RM[i].month = "";
+			this.RM[i].year = "";
+			this.RM[i].fstDayLidx = 1;
+			this.RM[i].fstDayTidx = 1;
+			this.RM[i].maxdays = 1;
+		}
+		// date objects
+		var curD = new Date();
+		var utils = new Calendar.Utils();
+		var curMY = {month: curD.getMonth(), year: curD.getFullYear() };
+		var stMY = {month: stDate.getMonth(), year: stDate.getFullYear() };
+		var eMY = {month: eDate.getMonth(), year: eDate.getFullYear() };
+		this.RMlast.duration = utils.getTimePeriodParts(stDate, eDate, isAllDay);
+		var rwhen = {};
+		rwhen = utils.getTimePeriodParts(curD, stDate, isAllDay);
+		var dura = this.RMlast.duration;
+		// determine duration case
+		if ( (this.repeatForeverChecked) || ((dura.years == 0) && (((dura.months == 5) && (dura.days == 0)) || (dura.months < 5)) )) {
+			if ( (this.repeatForeverChecked) || ((dura.months <=1) && ((rwhen.months <= 3) && (rwhen.years <=0))) ){
+				// we can fit in 6 months try to get today in the 6 months
+				if((this.repeatForeverChecked) || (curD.getTime() < stDate.getTime()) ) {
+					//close future start with curDate 
+					this.redlineSplit.setStyle('border-right: 1px solid black');
+					this.RM[0].month = curMY.month;
+					this.RM[0].year = curMY.year;
+					for (var i = 1; i < 6; i++) {
+						this.RMnextM(i);
+					}
+				} else {
+					// in close past start with stDate
+					this.redlineSplit.setStyle('border-right: 1px solid black');
+					this.RM[0].month = stMY.month;
+					this.RM[0].year = stMY.year;
+					for (var i = 1; i < 6; i++) {
+						this.RMnextM(i);
+					}
+				}
+			} else {
+				if((curD.getTime() < stDate.getTime()) && (((dura.months == 4) && (dura.days == 0) && (dura.years ==0)) || ((dura.months <4) && (dura.years==0)))){
+					// in 6 months, too far away for today, in future do prev 
+					this.redlineSplit.setStyle('border-right: 1px solid black');
+					this.RM[1].month = stMY.month;
+					this.RM[1].year = stMY.year;
+					this.RMprevM(0);
+					this.RMnextM(2);
+					this.RMnextM(3);
+					this.RMnextM(4);
+					this.RMnextM(5);
+				} else {
+					// in past or could be 6 cal months do start + 5
+					this.redlineSplit.setStyle('border-right: 1px solid black');
+					this.RM[0].month = stMY.month;
+					this.RM[0].year = stMY.year;
+					for (var i = 1; i < 6; i++) {
+						this.RMnextM(i);
+					}
+				}
+			}
+		} else { //duration won't fit in 6 months
+			if( ((stMY.year == curMY.year) && (stMY.month == curMY.month)) ||
+			  ((stMY.year < curMY.year) ||  ((stMY.year == curMY.year) && (stMY.month < curMY.month))) ){
+			//past or present month - do start + next + next redline split then -- prev + end + next
+				this.redlineSplit.setStyle('border-right: 2px solid red');
+				this.RM[0].month = stMY.month;
+				this.RM[0].year = stMY.year;
+				this.RMnextM(1);
+				this.RMnextM(2);
+				this.RM[4].month = eMY.month;
+				this.RM[4].year = eMY.year;
+				this.RMprevM(3);
+				this.RMnextM(5);
+			} else if((stMY.year > curMY.year) ||  ((stMY.year == curMY.year) && (stMY.month > curMY.month))) {
+			// future - do prev + start + next redline split prev + end + next
+				this.redlineSplit.setStyle('border-right: 2px solid red');
+				this.RM[1].month = stMY.month;
+				this.RM[1].year = stMY.year;
+				this.RMprevM(0);
+				this.RMnextM(2);
+				this.RM[4].month = eMY.month;
+				this.RM[4].year = eMY.year;
+				this.RMprevM(3);
+				this.RMnextM(5);
+			}
+		}	
+		// call canvasRM
+		for(var k=0; k<6; k++){
+			this.canvasRM(this.RM[k].month, this.RM[k].year, k);
+		}
+		// record for next time comparisons
+		this.RMlast.stMY = stMY;
+		this.RMlast.eMY = eMY;
+		this.RMlast.curMY = curMY;
+	},
+	
+	risRendered: function( year, month) {
+		for(var i=0; i<6; i++) {
+			if((this.RM[i].month == month) && (this.RM[i].year == year)) {
+				return i;
+			}
+		}
+		return -1;
+	},
+	
+	//mark days in calendar
+	markDay: function(rdate, imgsrc, color, rx, ry, rwt, rht) {
+		// determine which month, year, date
+		if (rdate instanceof Date == true) { 
+			var whatMn = rdate.getMonth();
+			var whatYr = rdate.getFullYear();
+			var whatDt = rdate.getDate();
+		} else if(rdate !== undefined) {
+			this.rtdate = new Date(rdate);
+			var whatMn = this.rtdate.getMonth();
+			var whatYr = this.rtdate.getFullYear();
+			var whatDt = this.rtdate.getDate();
+		}
+		var rmimgsrc = imgsrc;
+		var idx = this.risRendered(whatYr, whatMn);
+		if(idx == -1) { return; }
+		var fstDayLidx = this.RM[idx].fstDayLidx;
+		var fstDayTidx = this.RM[idx].fstDayTidx;
+		var rRow = Math.floor((whatDt + fstDayLidx -1) / 7);
+		var col = (whatDt + fstDayLidx - 1) % 7;
+		var itop = (rRow * this.colHW) + 40;
+		var ileft = (col * this.colHW) + this.colHW;
+		itop = (ry !== undefined) ? itop + ry : itop;
+		ileft = (rx !== undefined) ? ileft + rx : ileft;
+		if (rmimgsrc !== undefined) {
+			this.mthctx[idx].drawImage(rmimgsrc, ileft, itop, (rwt !== undefined)? rwt : this.colHW,(rht !== undefined)? rht : this.colHW);
+		} else if(color !== undefined) {
+			this.mthctx[idx].fillStyle = color;
+			this.mthctx[idx].fillRect(ileft, itop, this.colHW-2, this.colHW-2);
+		} else {
+			this.mthctx[idx].fillStyle = "rgba(232,227,124,0.5)";
+			this.mthctx[idx].fillRect(ileft, itop, this.colHW-2, this.colHW-2);
+		}
+	},
+	
+	rmMarkD: function() {
+		var utils = new Calendar.Utils();
+		this.RMlast.duration = utils.getTimePeriodParts(this.RMlast.stD, this.RMlast.eD, this.targetEvent.allDay);
+		var daylen = 3600000*24;
+		if(this.RMlast.duration.months > 7 || this.RMlast.duration.years > 0) {
+			return;
+		}
+		if(Math.floor((this.targetEvent.dtstart - this.targetEvent.dtend)/daylen) <=1) {
+			this.RMlast.HMDB = 1;
+			return;
+		}
+		var stTS = new Date(this.RMlast.stMY.year, this.RMlast.stMY.month, this.RMlast.stD.getDate(), 12).getTime();
+		var end = utils.howManyDaysBetween(this.RMlast.stD, this.RMlast.eD) +1;
+		this.RMlast.HMDB = end;
+		this.RMlast.stTS = stTS;
+		for (var z = 0; z < end; z++) {
+			this.markDay(stTS + (z*daylen),
+							this.dImg, 
+							null/*color*/,
+							null/*x adjust*/,
+							this.colHW-2/*y adjust*/ ,
+							this.colHW/*wd adjust*/,
+							2 /*ht adjust*/)
+		}
+	},
+		
+	rmRecur: function() {
+		var utils = new Calendar.Utils();
+		// this function is after it is a known recurrent model
+		// time of when -- occuring each
+		var rcfrequency = this.targetEvent.rrule.freq;
+		// howmany times between
+		var rcint = this.targetEvent.rrule.interval;
+		// take stTS and duradays to create the base event from the curent event
+		var rcduraD = this.RMlast.HMDB;
+		var rcstTS = this.targetEvent.dtstart;
+		var rcstD = new Date(rcstTS);
+		var rcEvtHour = rcstD.getHours();
+		var rcEvtMin = rcstD.getMinutes();
+		var rcEvtSec = 0;
+		var stDoW = rcstD.getDay();
+		var dlen = 3600000*24;
+		var rcdaysofwk = [];
+		this.recTS = []; // array of timestamps of the recurring evt
+		switch (rcfrequency) {
+				case 'DAILY':
+					var recfreqTS = dlen;
+					break;
+				case 'WEEKLY':
+					var recfreqTS = dlen * 7;
+					break;
+				case 'MONTHLY':
+					var recfreqTS = -1;
+					break;
+				case 'YEARLY':
+					var recfreqTS = -1;
+					break;
+		}
+		this.RMlast.recD.setHours(rcEvtHour);	
+		this.RMlast.recD.setMinutes(rcEvtMin);
+		this.RMlast.recD.setSeconds(rcEvtSec);
+		var recHMDB = utils.howManyDaysBetween(rcstD, this.RMlast.recD) +1;
+		// detect recurr model
+		switch (rcfrequency) {
+			case 'DAILY' : // Do Not Localize
+				// get how many intervals
+				var rcdays = 1 + Math.floor((recHMDB*dlen) / (recfreqTS*rcint));
+				for(var k=0; k < rcdays; k++) { // cycle through intervals
+					this.recTS.push((dlen*k*rcint) + rcstTS);	
+				}
+				while(this.recTS[this.recTS.length -1] > this.RMlast.recD.getTime()){
+					this.recTS.pop();
+				}
+				break;
+				
+            case 'WEEKLY': // Do NOT Localize
+				// find the day numbers from their names
+				var rci = this.targetEvent.rrule.rules[0].ruleValue.length;
+				var rcSundayTS = rcstTS - (stDoW*dlen); 
+				for(var i=0; i < rci; i++) {
+					rcdaysofwk[i] = this.targetEvent.rrule.rules[0].ruleValue[i].day;
+				}
+				if(rci > 1) {
+				// get start day dow because it has to be in rcdaysofwk
+					var rcpos = rcdaysofwk.indexOf(stDoW);
+					//need to get to the last of the array before start of next week
+					if(rcpos !== rci - 1){
+						for(var i = rcpos; i <= rci; i++) {
+							for(var j = 0; j < rcduraD; j++) {
+							// array's TS = duration days *milliseconds in a day + (sundays TS + day of week adjustment) 
+							this.recTS.push((dlen*j) + (rcSundayTS + dlen*rcdaysofwk[i]));	
+							}
+						}
+					}
+				}
+				//should be at the first day of the week after start day's week
+				// need to get how many intervals until GetHowManyDays / 7*interval
+				var rcwks = 1 + Math.floor((recHMDB*dlen) / (recfreqTS*rcint)); 
+				for(var k=1; k <= rcwks; k++) { // cycle through intervals
+					var rcwkSunTS = rcSundayTS + (rcint * recfreqTS * k);
+					for(var i = 0; i < rci; i++) { // cycle through days of week
+						for(var j = 0; j < rcduraD; j++) { //cycle duration
+						this.recTS.push((dlen*j) + (rcwkSunTS + dlen*rcdaysofwk[i]));	
+						}
+					}
+				}
+				while(this.recTS[this.recTS.length -1] > this.RMlast.recD.getTime()){
+					this.recTS.pop();
+				}
+            	break;
+                
+            case 'MONTHLY': // Do NOT Localize
+                //Monthly by date
+				var rcmonths = 1 + Math.floor(utils.howManyMonthsBetween(rcstD ,this.RMlast.recD)/rcint);
+                if (this.targetEvent.rrule.rules[0].ruleType === "BYMONTHDAY") {
+                    var rcmonthday = parseInt(this.targetEvent.rrule.rules[0].ruleValue[0].ord, 10);
+					if(rcmonthday > 0) {
+						var rcstmon = rcstD.getMonth();
+						var rcstyear = rcstD.getFullYear();
+						for(var i=0; i<rcmonths; i++) { //cycle through intervals
+							var rcmon = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon + (i*rcint);
+							var rcyear = (rcstmon + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear; 
+							var rcmonChk = new Date(rcyear, rcmon, rcmonthday, rcEvtHour, rcEvtMin, rcEvtSec, 0);
+							var rcmonTS = rcmonChk.getTime();
+							if(rcmonChk.getMonth() === rcmon) { // test valid date in the month
+								for(var j=0; j<rcduraD; j++) { // cycle through duration
+									this.recTS.push(rcmonTS + (j*dlen));
+								}
+							}
+						}
+					} else if(rcmonthday < 0) {
+						var rcstmon = rcstD.getMonth();
+						var rcstyear = rcstD.getFullYear();
+						for(var i=0; i<rcmonths; i++) { //cycle through intervals
+							var rcmon = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon + (i*rcint);
+							var rcmonLast = (rcstmon + 1 + (i*rcint)) > 11 ? rcstmon +1 + (i*rcint) - 12 : rcstmon + 1 + (i*rcint);
+							var rcyear = (rcstmon + 1 + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear; 
+							var rcmonChk = new Date(new Date(rcyear, rcmonLast, 1, rcEvtHour, rcEvtMin, rcEvtSec, 0).getTime() + rcmonthday*dlen);
+							var rcmonTS = rcmonChk.getTime();
+							if(rcmonChk.getMonth() === rcmon) { // test valid date in the month
+								for(var j=0; j<rcduraD; j++) { // cycle through duration
+									this.recTS.push(rcmonTS + (j*dlen));
+								}
+							}
+						}
+					}
+                } else {
+					// check for multiple by days and last week type set
+					var byDayLen = this.targetEvent.rrule.rules[0].ruleValue.length;
+					var byDayDefault = true;
+					if(byDayLen && byDayLen > 1) {
+						var byDayArray = [];
+						var ford = parseInt(this.targetEvent.rrule.rules[0].ruleValue[0].ord, 10);
+						for(var i=0; i<byDayLen; i++) {
+							var ord = parseInt(this.targetEvent.rrule.rules[0].ruleValue[i].ord, 10);
+							if(ord && ord !== ford) {//we only care about matching bysetpos type repeat
+								byDayDefault = true; //default to just using first byday
+								break; //cal doesn't support multiple pos days in monthly repeat 
+							} else if(ord && ord === ford) {
+								var DoW = this.targetEvent.rrule.rules[0].ruleValue[i].day;
+								if(byDayArray.indexOf(DoW) === -1) {//not in previously
+									byDayArray.push(DoW);
+								}
+								byDayDefault = false;
+							}
+						} //should have an array with the last days wanted
+						if(!byDayDefault && byDayArray.length > 1) {
+							if(ford<0){
+								var rcmonthday = -1;
+							} else if(ford>0) {
+								var rcmonthday = 1;
+							}
+							var rcstmon = rcstD.getMonth();
+							var rcstyear = rcstD.getFullYear();
+							for(var i=0; i<rcmonths; i++) { //cycle through intervals
+								var rcmon = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon + (i*rcint);
+								if(ford<0){
+									var rcmonLast = (rcstmon + 1 + (i*rcint)) > 11 ? rcstmon +1 + (i*rcint) - 12 : rcstmon + 1 +(i*rcint);
+									var rcyear = (rcstmon + 1 + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear; 
+									var rcmonTS = new Date(rcyear, rcmonLast, 1, rcEvtHour, rcEvtMin, rcEvtSec, 0).getTime() + rcmonthday*dlen;
+								} else if(ford>0){
+									var rcmonLast = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon +(i*rcint);
+									var rcyear = (rcstmon + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear; 
+									var rcmonTS = new Date(rcyear, rcmonLast, 1, rcEvtHour, rcEvtMin, rcEvtSec, 0).getTime();
+								}
+								var rcDoW = new Date(rcmonTS).getDay();
+								for(var k=0; k< Math.abs(ford); k++) {
+									while(byDayArray.indexOf(rcDoW) === -1) {
+										rcmonTS = rcmonTS + rcmonthday*dlen;
+										rcDoW = new Date(rcmonTS).getDay();
+									}
+									if(k !== Math.abs(ford) - 1){
+										rcmonTS = rcmonTS + rcmonthday*dlen;
+										var rcDoW = new Date(rcmonTS).getDay();
+									}
+								}
+								var rcmonChk = new Date(rcmonTS);
+								if(rcmonChk.getMonth() === rcmon) { // test valid date in the month
+									for(var j=0; j<rcduraD; j++) { // cycle through duration
+										this.recTS.push(rcmonTS + (j*dlen));
+									}
+								}
+							}
+						} else {
+							byDayDefault = true; // just one byday
+						}
+					} else if(byDayLen === 1 || byDayDefault) {
+						var nth = parseInt(this.targetEvent.rrule.rules[0].ruleValue[0].ord,10);
+						if(nth && nth > 0) {
+							var rcmonths = 1 + Math.floor(utils.howManyMonthsBetween(rcstD ,this.RMlast.recD)/rcint);
+							var rcstmon = rcstD.getMonth();
+							var rcstyear = rcstD.getFullYear();
+							var rcwantday = rcstD.getDay();
+							for(var i=0; i<rcmonths; i++) { // cycle through intervals
+								var rcmon = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon + (i*rcint);
+								var rcyear = (rcstmon + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear;
+								var rcmonD = new Date(rcyear, rcmon, 1, rcEvtHour, rcEvtMin, rcEvtSec, 0);
+								var rcfstday = rcmonD.getDay();
+								var rcaddTS = ((rcwantday - rcfstday) < 0) ? ((rcwantday - rcfstday) + 7)*dlen : (rcwantday - rcfstday)*dlen;
+								var rcmonTS = rcmonD.getTime() + rcaddTS + 7*dlen*(nth-1);
+								var rcmonChk = new Date(rcmonTS);
+								if(rcmonChk.getMonth() === rcmon) { // test valid date in the month
+									for(var j=0; j<rcduraD; j++) { // cycle through duration
+										this.recTS.push(rcmonTS + (j*dlen));
+									}
+								}
+							}
+						} else if(nth && nth<0) {
+							var rcmonths = 1 + Math.floor(utils.howManyMonthsBetween(rcstD ,this.RMlast.recD)/rcint);
+							var rcstmon = rcstD.getMonth();
+							var rcstyear = rcstD.getFullYear();
+							var rcwantday = rcstD.getDay();
+							for(var i=0; i<rcmonths; i++) { // cycle through intervals
+								var rcmon = (rcstmon + (i*rcint)) > 11 ? rcstmon + (i*rcint) - 12 : rcstmon + (i*rcint);
+								var rcmonLast = (rcstmon + 1 + (i*rcint)) > 11 ? rcstmon +1 + (i*rcint) - 12 : rcstmon + 1 +(i*rcint);
+								var rcyear = (rcstmon + 1 + (i*rcint)) > 11 ? rcstyear + 1 : rcstyear;
+								var rcmonD = new Date(new Date(rcyear, rcmonLast, 1, rcEvtHour, rcEvtMin, rcEvtSec, 0).getTime() - dlen) ;
+								var rcLstday = rcmonD.getDay();
+								var rcaddTS = ((rcwantday - rcLstday) > 0) ? ((rcwantday - rcLstday) - 7)*dlen : (rcwantday - rcLstday)*dlen;
+								var rcmonTS = rcmonD.getTime() + rcaddTS + 7*dlen*(nth+1);
+								var rcmonChk = new Date(rcmonTS);
+								if(rcmonChk.getMonth() === rcmon) { // test valid date in the month
+									for(var j=0; j<rcduraD; j++) { // cycle through duration
+										this.recTS.push(rcmonTS + (j*dlen));
+									}
+								}
+							}
+						}
+					}	
+				}
+				while(this.recTS[this.recTS.length -1] > this.RMlast.recD.getTime()){
+					this.recTS.pop();
+				}
+				break;
+				
+			default:                
+				break;
+		}
+		this.rcexTS = [];
+		// pull out the exceptions
+		if(this.targetEvent.exdates !== undefined) {
+			if(this.targetEvent.exdates !== "") {
+				
+				var rcexstr = [];
+				for(var i=0; i<this.targetEvent.exdates.length; i++) {
+					if(rcexstr.indexOf(this.targetEvent.exdates[i]) === -1) {
+						rcexstr.push(this.targetEvent.exdates[i]);
+					}
+				}
+				for(var j=0; j<rcexstr.length; j++) {
+					var rcyear = rcexstr[j].substring(0,4);
+					var rcmon = parseInt(rcexstr[j].substring(4,6), 10) -1;
+					var rcday = parseInt(rcexstr[j].substring(6,8), 10);
+					var rchour = parseInt(rcexstr[j].substring(9,11), 10);
+					var rcmin = parseInt(rcexstr[j].substring(11,13), 10);
+					var rcsec = 0; // parseInt(rcexstr[j].substring(16,18), 10);
+					var rctestD = new Date(Date.UTC(rcyear, rcmon, rcday, rchour, rcmin, rcsec, 0));
+					this.rcexTS[j] = rctestD.getTime();
+				}
+				// pull exdates out of array
+				for(var k=0; k<this.rcexTS.length; k++) {
+					var idx = this.recTS.indexOf(this.rcexTS[k]);
+					if(idx !== -1) {
+						this.recTS.splice(idx,1);
+					}
+				}
+			}
+		}
+		// mark the recurrence days
+		var rcstop = this.recTS.length;
+		for(var k=0; k<rcstop; k++){
+			this.markDay(this.recTS[k],
+							this.rImg, 
+							null/*color*/,
+							null/*x adjust*/,
+							this.colHW-2/*y adjust*/ ,
+							this.colHW/*wd adjust*/,
+							2 /*ht adjust*/)
+		}
+		
+	},
+	
+	rmEval: function() {
+		this.RMlast.stD = new Date(this.targetEvent.dtstart);
+		this.RMlast.eD = new Date(this.targetEvent.dtend);
+		if(this.repeatForeverChecked != true) {
+			this.RMlast.recD = this.endDateModel.date;
+		} else if(this.repeatForeverChecked == true) {
+			// go out 6 calendar months
+			this.RMlast.recD = new Date( (this.RMlast.eD.getMonth() + 5 > 11 ? this.RMlast.eD.getFullYear() + 1 : this.RMlast.eD.getFullYear() ), (this.RMlast.eD.getMonth() + 5 > 11 ? this.RMlast.eD.getMonth() - 7 : this.RMlast.eD.getMonth() + 5), this._monthDays[(this.RMlast.eD.getMonth() + 5 > 11 ? this.RMlast.eD.getMonth() - 7 : this.RMlast.eD.getMonth() + 5)]);
+		}
+		this.rmdoRec = true;
+		return;
+	},
+
+	
 	setup: function() {
 		//Mojo.Log.info("repeat-assistant:setup");
+		this.weekModulusNum = 1;
+		this.weekNumOffset = 0;
+		this.useISOweekNum = false;
+		this.prefStartDoW = 0;
+		this.weekCookie = new Mojo.Model.Cookie('WeekViewEnhanced');
+		if (this.weekCookie) {
+			var weekcookie = this.weekCookie.get();
+			if(weekcookie) {
+				if(weekcookie.weeknumoffset !== undefined) {
+						this.weekNumOffset = parseInt(weekcookie.weeknumoffset, 10);
+				} else {
+						this.weekNumOffset = 0;
+				}
+				if(weekcookie.weekmodulusnum !== undefined) {
+						this.weekModulusNum = parseInt(weekcookie.weekmodulusnum, 10);
+				} else {
+						this.weekModulusNum = 1;
+				}
+				if (weekcookie.useisoweeknum !== undefined) {
+					this.useISOweekNum = weekcookie.useisoweeknum;
+				} else {
+					this.useISOweekNum = false;
+				}
+				if (weekcookie.prefsstartofweek !== undefined) {
+					this.prefStartDoW = parseInt(weekcookie.prefsstartofweek, 10) -1;
+				} else {
+					this.prefStartDoW = 0;
+				}
+			}
+		}
 		this.appMenuModel= { visible:true, 
 					label:$L('Calendar'), 
 					items: [ Mojo.Menu.editItem,
@@ -344,6 +1005,18 @@ var RepeatAssistant = Class.create({
 		this.db			= new DatabaseManager();
 		this.requests	= [];	
 		
+		// setup button & button row
+		var butRowWrapDiv = this.controller.get("dtl_checkbox_div").parentNode;
+		var fevrDiv = this.controller.get("dtl_checkbox_div");
+		butRowWrapDiv.removeChild(fevrDiv);
+		butRowWrapDiv.innerHTML = '<table width="100%"><tr><td width="80%">' +
+					'<div id="dtl_checkbox_div">' +
+						'<div id="dtl_forever_cb" x-mojo-element="CheckBox" class="icon left repeat-checkbox" ></div>' +
+						'<div class="title" x-mojo-loc="">'+ $L("Forever") + '</div>' +
+					'</div></td>' + '<td width="20%">' + 
+						'<div x-mojo-element="Button" id="rpDrawerBtn" class="rpDrawerBtnClass"></div>' +
+					'</td></tr></table>';
+		
 		this.foreverCheckboxModel = {
 			value: false
 		};
@@ -419,6 +1092,28 @@ var RepeatAssistant = Class.create({
 		template = $L("1#Yearly on #{month} 1st|2#Yearly on #{month} 2nd|3#Yearly on #{month} 3rd|21#Yearly on #{month} 21st|22#Yearly on #{month} 22nd|23#Yearly on #{month} 23rd|31#Yearly on #{month} 31st|#Yearly on #{month} #{day}th");	
 		this.freqs[4].name = Mojo.Format.formatChoice(templateModel.day, template, templateModel);
 	
+		var ucLastDay = this.getIsLastProps(this.targetEvent.dtstart);
+		this.hasUClastProps = false;
+		if( (ucLastDay && ucLastDay.lastweek) || 
+			((this.targetEvent.rrule && this.targetEvent.rrule.freq === "MONTHLY") &&
+				((this.targetEvent.rrule.rules[0].ruleType === "BYMONTHDAY" && this.targetEvent.rrule.rules[0].ruleValue[0].ord && parseInt(this.targetEvent.rrule.rules[0].ruleValue[0].ord,10) <0) ||
+				(this.targetEvent.rrule.rules[0].ruleType === "BYDAY"  && this.targetEvent.rrule.rules[0].ruleValue[0].ord && parseInt(this.targetEvent.rrule.rules[0].ruleValue[0].ord, 10) <0) ) ) ) {
+			
+			this.hasUClastProps = true;
+			templateModel = {};
+			templateModel.dayOfWeek = Mojo.Format.formatDate(date, "EEEE");
+			templateModel.dowCount = 1;
+			var template = $L("#Monthly on the last #{dayOfWeek}");	
+			this.freqs[5].name = Mojo.Format.formatChoice(templateModel.dowCount, template, templateModel);
+			
+			templateModel = {};
+			templateModel.dayOfWeek = Mojo.Format.formatDate(date, "EEEE");
+			var num = parseInt(ucLastDay.lastday,10);
+			templateModel.dowCount = Math.abs(num);
+			var template = $L("1#Monthly on the last day|2#Monthly on the 2nd to last day|3#Monthly on the 3rd to last day|#Monthly on the #{dowCount}th to last day");	
+			this.freqs[6].name = Mojo.Format.formatChoice(templateModel.dowCount, template, templateModel);
+		}
+		
 		var button = Mojo.View.render({object: {text: this.freqs[this.repeatFreqIndex-1].name,
 									buttonId: 'freqButton'}, template: "edit/popupButton"});
 		this.controller.get('repeat_freq').insert(button);
@@ -443,6 +1138,93 @@ var RepeatAssistant = Class.create({
 		this.updateRepeatFromModel();
 		this.oldRRuleUntil = this.targetEvent.rrule.until;
 		this.attributes = {	modelProperty:'value'};
+		
+		// setup canvas & drawer
+		var parentDiv = this.controller.get("foreverdiv").parentNode;
+		var repeatUntilDiv = this.controller.get("repeat_until_row");
+		var newDiv = this.controller.document.createElement("div");
+        newDiv.setAttribute("id", "rpDrawer");
+        newDiv.setAttribute("x-mojo-element", "Drawer");
+        newDiv.setAttribute("class", "drawerClass");
+        newDiv.setAttribute("name", "RPmonth_view");
+        newDiv.innerHTML = '<div id="RPscrol" x-mojo-element="Scroller"><div id="RPscrolct">' +
+				'<div id="RPmonth_0" class="RPmv">' +
+				'<canvas id="RPleft0" width="240" height="220" left="0"></canvas>' +
+				'</div><div id="RPmonth_1" class="RPmv">' +
+				'<canvas id="RPleft1" width="240" height="220"></canvas>' +
+				'</div><div id="RPmonth_2" class="RPmv">' +
+				'<canvas id="RPleft2" width="240" height="220"></canvas>' +
+				'</div><div id="RPmonth_3" class="RPmv">' +
+				'<canvas id="RPright0" width="240" height="220"></canvas>' +
+				'</div><div id="RPmonth_4" class="RPmv">' +
+				'<canvas id="RPright1" width="240" height="220"></canvas>' +
+				'</div><div id="RPmonth_5" class="RPmv">' +
+				'<canvas id="RPright2" width="280" height="220"></canvas></div></div></div>';
+        parentDiv.insertBefore(newDiv, repeatUntilDiv);
+		// drawer & scroller setup
+		this.controller.setupWidget("RPscrol",{mode: 'horizontal-snap'}, {snapElements: {x:[this.controller.get("RPmonth_0"), this.controller.get("RPmonth_1"), this.controller.get("RPmonth_2"), this.controller.get("RPmonth_3"), this.controller.get("RPmonth_4"), this.controller.get("RPmonth_5")]}});
+		this.dModel = {open:false};
+		this.controller.setupWidget('rpDrawer', {property:'open', drawerBottomOffset: 50}, this.dModel);
+		this.rpdrawer = this.controller.get('rpDrawer');
+		this.controller.setupWidget("rpDrawerBtn",
+			{},
+			{
+				label : "",
+				disabled: false
+			}
+		);
+		// setup month canvas context
+		this.redlineSplit = this.controller.get("RPmonth_2");
+		this.mthctx = [];
+		this.left0 = this.controller.get("RPleft0");
+		this.mthctx[0] = this.left0.getContext('2d');
+		this.left1 = this.controller.get("RPleft1");
+		this.mthctx[1] = this.left1.getContext('2d');
+		this.left2 = this.controller.get("RPleft2");
+		this.mthctx[2] = this.left2.getContext('2d');
+		this.right0 = this.controller.get("RPright0");
+		this.mthctx[3] = this.right0.getContext('2d');
+		this.right1 = this.controller.get("RPright1");
+		this.mthctx[4] = this.right1.getContext('2d');
+		this.right2 = this.controller.get("RPright2");
+		this.mthctx[5] = this.right2.getContext('2d');
+		// setup vars
+		this.startOfWeek = this.prefsManager.getPrefs().startOfWeek;
+		this._rdNames = [];
+		this.RMlast = {};
+		this.RMlast.duration = {years: 0, months: 0, days: 0, hours: 0, minutes: 0};
+		this.RM = [];
+		this.topCor = "";
+		this.leftCor = "";
+		this.rtdayimg = new Image();
+		this.rtdayimg.src = "./images/week-current-day.png";
+		this.rmdoRec = false;
+		this.rdayNames();
+		this.rmEval();
+		this.orderRM(this.RMlast.stD, this.RMlast.recD, this.targetEvent.allDay);
+		this.stImg = new Image();
+		this.stImg.src = "./images/day-allday-event-green-center.png";
+		this.eImg = new Image();
+		this.eImg.src = "./images/day-allday-event-red-center.png";
+		this.dImg = new Image();
+		this.dImg.src = "./images/day-event-green.png";
+		this.rImg = new Image();
+		this.rImg.src = "./images/day-event-yellow.png";
+		this.rmScroller = this.controller.get('RPscrol');
+		this.rtDate = new Date();
+		this.rmcalHold = false;
+		this.rmUpdate = false;
+	},
+	
+	rmScrollTo: function(x) {
+		if (x instanceof Date == true) { 
+			var whatMn = x.getMonth();
+			var whatYr = x.getFullYear();
+			var idx = this.risRendered(whatYr, whatMn);
+		} else if(x >= 0 && x <= 6) {
+			var idx = x;
+		}
+		this.controller.get('RPscrol').mojo.setSnapIndex(idx, true);
 	},
 	
 	//Callback for the interval picker
@@ -450,6 +1232,7 @@ var RepeatAssistant = Class.create({
 	intervalConstruct:function(event){
 		//Mojo.Log.info("in interval construct");
 		this.targetEvent.rrule.interval = event.value;
+		this.rmUpdate = true;
 		this.constructRecurrenceString();
 	},
 	
@@ -467,6 +1250,7 @@ var RepeatAssistant = Class.create({
 	
 	//Callback for the repeat-until date picker
 	endDateUpdate: function(event) {
+		this.rmUpdate = true;
 		this.recurConstruct(new Date(event.value), true);
 	},
 	
@@ -511,11 +1295,13 @@ var RepeatAssistant = Class.create({
 			var numOccurrences = this.eventManager.findNumOccurrencesInRange(this.targetEvent, range, 100); 
 			this.buildRepeatInfo(numOccurrences);
 		}
+		if (this.rmUpdate) {this.rmHandleUpdate();}
 	},
 	
 	//Callback for the repeat forever checkbox
 	handleForeverTap: function() {
 		Mojo.Log.info('repeat-assistant: handleForeverTap');
+		this.rmUpdate = true;
 		if (this.repeatForeverChecked) {
 			this.repeatForeverChecked = false;
 		}
@@ -528,9 +1314,29 @@ var RepeatAssistant = Class.create({
 	//Callback for the weekday checkboxes	
 	handleWeekTap: function() {
 		//Mojo.Log.info('repeat-assistant: handleWeekTap');
+		this.rmUpdate = true;
 		this.constructRecurrenceString();
 	},
 	
+	rmHandleUpdate: function() {
+		// date picker model changed do redraw
+		for(var i = 0;i<6; i++) {
+			this.mthctx[i].clearRect(0, 0, 240,220);
+		}
+		this.rmEval();
+		this.orderRM(this.RMlast.stD, this.RMlast.recD, this.targetEvent.allDay);
+		this.markDay(new Date(), this.rtdayimg);
+		this.markDay(this.RMlast.stD, this.stImg , null/*color*/, 1/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		if(this.repeatForeverChecked != true) {this.markDay(this.RMlast.recD, this.eImg , null/*color*/, this.colHW-2/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);}
+		this.rmMarkD();
+		if(this.rmdoRec) {this.rmRecur(); }
+		if(this.repeatForeverChecked != true) {
+			this.rmScrollTo(this.RMlast.recD);
+		} else {
+			this.rmScrollTo(this.RMlast.stD);
+		}
+	},
+	
 	//Hides and shows the repeat-until date picker
 	updateRecurUntil: function(transition) {
 		//Mojo.Log.info("repeat-assistant: updaterecuruntil");
@@ -551,14 +1357,14 @@ var RepeatAssistant = Class.create({
 		} else {
 			if (this.repeatForeverChecked === false) {
 				this.slideDown(this.controller.get('repeat_until_row'), 0.4);
-			
+				this.controller.get('rpDrawer').mojo.setOpenState(true);
 				this.foreverCheckboxModel.value = false;
 				this.controller.modelChanged(this.foreverCheckboxModel);
 				this.controller.get('foreverdiv').removeClassName('last');
 					
 			} else {
 				this.slideUp(this.controller.get('repeat_until_row'), 0.4);
-				
+				this.controller.get('rpDrawer').mojo.setOpenState(false);
 				this.foreverCheckboxModel.value = true;
 				this.controller.modelChanged(this.foreverCheckboxModel);
 				this.controller.get('foreverdiv').addClassName('last');
@@ -572,6 +1378,7 @@ var RepeatAssistant = Class.create({
 	//sets rrule.freq & rrule.rules & rrule.interval & rrule.until
 	updateRecurrence:function(){
 		//Mojo.Log.info("repeat-assistant:UpdateRecurrence");
+		if(this.repeatFreqIndex === 8) {return;} //custom external don't modify
 		var num=0;
 		
 		var date = new Date(this.targetEvent.dtstart);
@@ -638,7 +1445,35 @@ var RepeatAssistant = Class.create({
 				this.targetEvent.rrule.freq ='YEARLY'; // Do NOT Localize
 				this.targetEvent.rrule.rules = [];
 				break;
+				
+			case 6:
+				// monthly last DoW
+				this.targetEvent.rrule.freq ='MONTHLY'; // Do NOT Localize
+				nth = "-1";
+				var day = new Date(this.targetEvent.dtstart).getDay();
+					byDayRules = [
+						{	"ord": nth
+						,	"day": day
+						}
+					];
+					this.targetEvent.rrule.rules = [
+						{	"ruleType": "BYDAY"
+						,	"ruleValue": byDayRules
+						}
+					];
+				break;
 			
+			case 7:
+				// monthly last days
+				this.targetEvent.rrule.freq ='MONTHLY'; // Do NOT Localize
+				var ucbymonthday = this.getIsLastProps(date.getTime());
+				var byMonthDayRules = [{ "ord": ucbymonthday.lastday}];
+				this.targetEvent.rrule.rules = [
+					{	"ruleType": "BYMONTHDAY"
+					,	"ruleValue": byMonthDayRules
+					}
+				];
+				break;
 		}
 		
 		this.targetEvent.rrule.interval = interval;
@@ -676,9 +1511,11 @@ var RepeatAssistant = Class.create({
 		//TODO: need to decide if we want to merge params or set the whole event again
 		//Merge is more efficient in the new system
 		if(this.targetEvent._id){
+			//Mojo.Log.error("repeat update Event"+ JSON.stringify(this.targetEvent));
 			this.requests.push(this.db.updateEvent(this.targetEvent, callback, callback));
 		}
 		else{
+			//Mojo.Log.error("repeat create Event" + JSON.stringify(this.targetEvent));
 			this.requests.push(this.db.createEvent(this.targetEvent, callback, callback));
 		}
 		
@@ -712,12 +1549,12 @@ var RepeatAssistant = Class.create({
 		var rev;
 		//if we're coming from a batch
 		if (response.responses) {
-			eventId = response.responses[1].results[0].id;
-			rev = response.responses[1].results[0].rev;
+			eventId = response.responses[1].results[0].id || response.responses[1].results[0]._id;
+			rev = response.responses[1].results[0].rev || response.responses[1].results[0]._rev;
 		}
 		else {
-			eventId = response.results[0].id;
-			rev = response.results[0].rev;
+			eventId = response.results[0].id || response.results[0]._id;
+			rev = response.results[0].rev || response.results[0]._rev;
 		}
 		
 		this.targetEvent._rev	= rev;
@@ -785,25 +1622,63 @@ var RepeatAssistant = Class.create({
 	},
 
 	activate: function() {
+		this.rpDrawerBtnHandler = this.toggleRPdrawer.bindAsEventListener(this);
+		this.controller.get('rpDrawerBtn').observe('mojo-tap', this.rpDrawerBtnHandler);
+		this.markDay(new Date(), this.rtdayimg);
+		this.markDay(this.RMlast.stD, this.stImg , null/*color*/,0/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		if(this.repeatForeverChecked != true) {this.markDay(this.RMlast.recD, this.eImg , null/*color*/, this.colHW-2/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);}
+		this.rmMarkD();
+		if(this.rmdoRec) {this.rmRecur(); }
+		if(this.repeatForeverChecked != true) {
+			this.rmScrollTo(this.RMlast.recD);
+		} else {
+			this.rmScrollTo(this.RMlast.stD);
+		}
+		//tap handlers
+		this.calTapHandler = this.handleCalTap.bind(this);
+		this.calHoldHandler = this.handleCalHold.bind(this);
+		Mojo.Event.listen(this.left0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.left1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.left2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.right0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.right1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.right2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.left0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.left1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.left2, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.right0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.right1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.right2, Mojo.Event.hold, this.calHoldHandler);
 	},
 	
 	deactivate: function() {
 		//Mojo.Log.info("repeat-assistant:deactivate");
 		this.controller.stopListening(this.controller.document, Mojo.Event.deactivate, this.blurStage);
-
+		this.controller.get('rpDrawerBtn').stopObserving('mojo-tap', this.rpDrawerBtnHandler);
+		Mojo.Event.stopListening(this.left0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.left1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.left2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.right0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.right1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.right2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.left0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.left1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.left2, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.right0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.right1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.right2, Mojo.Event.hold, this.calHoldHandler);
 	},
 
 	//Shows the repeat frequency popup menu
 	handleRepeatFreq: function(e){
+		var items = [];
+		var len = this.hasUClastProps === true ? 7 : 5;
+		for(var i=0; i<len; i++) {
+			items.push( {label: this.freqs[i].name, command: i+1} );
+		}
 		this.controller.popupSubmenu({onChoose:this.freqChoose, placeNear:e.target,
 			toggleCmd:this.repeatFreqIndex,
-			    items: [
-				    {label: this.freqs[0].name, command: 1}, 
-				    {label: this.freqs[1].name, command: 2}, 
-				    {label: this.freqs[2].name, command: 3}, 
-				    {label: this.freqs[3].name, command: 4}, 
-				    {label: this.freqs[4].name, command: 5} 
-				]});
+			    items: items});
 	},
 	
 	//Callback for the frequency popup menu
@@ -825,7 +1700,7 @@ var RepeatAssistant = Class.create({
 			
 			
 			//update the repeatuntil and reset it to forever
-			
+			this.rmUpdate = true;
 			this.updateRRuleUntil();
 		
 			
@@ -863,6 +1738,13 @@ var RepeatAssistant = Class.create({
 		}
 	},
 	
+	toggleRPdrawer: function(e) {
+		var curBtn = e.currentTarget.id;
+		if (curBtn == "rpDrawerBtn") {
+			this.controller.get('rpDrawer').mojo.setOpenState(!this.controller.get('rpDrawer').mojo.getOpenState());
+		}
+	},
+	
 	slideDown: function(div, duration) {
 		div.show();
 		var divDimensions = div.getDimensions();
@@ -894,9 +1776,157 @@ var RepeatAssistant = Class.create({
 	    this.controller.modelChanged(this.endDateModel);
 		this.recurConstruct(this.defaultRRuleUntil,false);
 		
-	}	
+	},	
+	
+		//Calendar Tap Handlers
+	handleCalHold: function(event) {
+		// set the hold var, send to tap handler
+		this.rmcalHold = true;
+		this.handleCalTap(event);
+	},
+	
+	handleCalTap: function(event) {
+		Event.stop(event);
+		var x = event.down.offsetX;
+		var y = event.down.offsetY;
+		//get rid of tap areas not in calendar day area
+		if(x <= 30 || y <= 40 || x>= 241) {
+			this.rmcalHold = false;
+			return;
+		}
+		var rmcan = event.target.id;
+		switch (rmcan) {
+			case 'RPleft0':
+				var rmindex = 0;
+				break;
+			case 'RPleft1':
+				var rmindex = 1;
+				break;
+			case 'RPleft2':
+				var rmindex = 2;
+				break;
+			case 'RPright0':
+				var rmindex = 3;
+				break;
+			case 'RPright1':
+				var rmindex = 4;
+				break;
+			case 'RPright2':
+				var rmindex = 5;
+				break;
+		}
+		// get first day index month year
+		if (x && y && (rmindex !== undefined)) {
+			var calx = x - 30;
+			var caly = y - 40;
+			var cald1idx = this.RM[rmindex].fstDayLidx;
+			var calcol = Math.floor(calx/this.colHW);
+			var calrow = Math.floor(caly/this.colHW);
+			var caldate = ((calrow * 7) + calcol +1) - cald1idx;
+			if((caldate > this.RM[rmindex].maxdays) || (caldate <= 0)) {
+				// tapped an area with invalid date
+				this.rmcalHold = false;
+				return;
+			}
+			var calmon = this.RM[rmindex].month;
+			var calyear = this.RM[rmindex].year;
+			if((calyear !== undefined) && (calmon !== undefined) && (caldate !== undefined)) {
+				var rpTestDate = new Date(calyear, calmon, caldate, this.RMlast.stD.getHours(), this.RMlast.stD.getMinutes(), 0 , 0);
+				var rpTestTS = rpTestDate.getTime();
+				if(rpTestTS <= this.targetEvent.dtstart || rpTestTS == this.RMlast.recD.getTime() ||  rpTestTS <= this.targetEvent.dtend) {
+					// do nothing - invalid date
+					this.rmcalHold = false;
+					return;
+				}
+				if(this.rmcalHold === false && this.repeatForeverChecked != true) {
+					// setting end date
+					var rpEnd = new Date(this.endDateModel.date.getTime());
+					rpEnd.setFullYear(calyear);
+					rpEnd.setMonth(calmon);
+					rpEnd.setDate(caldate);
+					this.endDateModel.date = rpEnd;
+					this.rmUpdate = true;
+					this.controller.modelChanged(this.endDateModel);
+					Mojo.Event.send(this.controller.get('untilDate'), 'mojo-property-change', {value: this.endDateModel.date} )
+				} else if(this.rmcalHold == true) {
+					// toggling a repeat date
+					if(this.recTS.indexOf(rpTestTS) !== -1 && (this.rcexTS.indexOf(rpTestTS) == -1) || this.rcexTS.length == 0) {
+						// is a recurring event date, put in an exception
+						this.rcexTS.push(rpTestTS);
+						this.rcexTS.sort(function(a,b){return a - b});
+						var rptxt = "";
+						this.targetEvent.exdates = [];
+						for(var i=0; i<this.rcexTS.length; i++) {
+							var tempDate = new Date(this.rcexTS[i]);
+							var rcyear = tempDate.getUTCFullYear();
+							var rcmon =  tempDate.getUTCMonth();
+							var rcday = tempDate.getUTCDate();
+							var rchour = tempDate.getUTCHours();
+							var rcmin = tempDate.getUTCMinutes();
+							var rcsec = 0; //new Date(this.rcexTS[i]).getSeconds();
+							rcmon = parseInt(rcmon,10) + 1;
+							rcmon = rcmon <10 ? '0' + rcmon : rcmon.toString();
+							rcday = parseInt(rcday,10) <10 ? '0' + rcday : rcday.toString();
+							rchour = parseInt(rchour,10) <10 ? '0' + rchour : rchour.toString();
+							rcmin = parseInt(rcmin,10) <10 ? '0' + rcmin : rcmin.toString();
+							rcsec = '00';
+							this.targetEvent.exdates.push(rcyear.toString() + rcmon + rcday + 'T' + rchour + rcmin + rcsec + 'Z');
+						}
+						this.rmcalHold = false;
+						this.rmHandleUpdate();
+					} else if (this.recTS.indexOf(rpTestTS) == -1 && (this.rcexTS.indexOf(rpTestTS) != -1) || this.rcexTS.length == 0) {
+						// is an exception, remove exception
+						var idx = this.rcexTS.indexOf(rpTestTS);
+						this.rcexTS.splice(idx,1);
+						this.rcexTS.sort(function(a,b){return a - b});
+						var rptxt = "";
+						this.targetEvent.exdates =[];
+						for(var i=0; i<this.rcexTS.length; i++) {
+							var tempDate = new Date(this.rcexTS[i]);
+							var rcyear = tempDate.getUTCFullYear();
+							var rcmon =  tempDate.getUTCMonth();
+							var rcday = tempDate.getUTCDate();
+							var rchour = tempDate.getUTCHours();
+							var rcmin = tempDate.getUTCMinutes();
+							var rcsec = 0; //new Date(this.rcexTS[i]).getSeconds();
+							rcmon = parseInt(rcmon,10) + 1;
+							rcmon = rcmon <10 ? '0' + rcmon : rcmon.toString();
+							rcday = parseInt(rcday,10) <10 ? '0' + rcday : rcday.toString();
+							rchour = parseInt(rchour,10) <10 ? '0' + rchour : rchour.toString();
+							rcmin = parseInt(rcmin,10) <10 ? '0' + rcmin : rcmin.toString();
+							rcsec = '00';
+							this.targetEvent.exdates.push(rcyear.toString() + rcmon + rcday + 'T' + rchour + rcmin + rcsec + 'Z');
+						}
+						this.rmcalHold = false;
+						this.rmHandleUpdate();
+					}
+					this.rmcalHold = false;
+				}
+			}
+		}
+		return;
+	},
+	
+	getIsLastProps: function(value) {
+		var monthDays= [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
+		var dt = new Date(value);
+		var daydt = dt.getDate();
+		var yr = dt.getFullYear();
+		var mn = dt.getMonth();
+		if(this.isLeapYear(yr)) {
+			monthDays[1] = 29;
+		} else {
+			monthDays[1] = 28;
+		}
+		var lastdayIdx = (daydt - monthDays[mn] -1).toString();
+		if(monthDays[mn] - daydt < 7) {
+			if(monthDays[mn] - daydt === 0) {
+				return {lastweek: true, lastday: lastdayIdx, islastday: true };
+			} else {
+				return {lastweek: true, lastday: lastdayIdx, islastday: false};
+			}
+		} else {
+			return {lastweek: false, lastday: lastdayIdx, islastday: false};
+		}
+	}
 });
-
-
-
-
diff --git a/usr/palm/applications/com.palm.app.calendar/app/controllers/week-assistant.js b/usr/palm/applications/com.palm.app.calendar/app/controllers/week-assistant.js
index 4fa6e78..6a62916 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/controllers/week-assistant.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/controllers/week-assistant.js
@@ -15,9 +15,12 @@ var WeekAssistant = Class.create({
 		this.appMenuModel = { visible:true, 
 								label:$L('Calendar'), 
 								items: [ Mojo.Menu.editItem,
+										{label:$L('New'), items: [{label:$L('Event'), shortcut:'n', command:'newtimed', disabled:false},
+	                													{label:$L('All day event'), shortcut:'d', command:'newallday', disabled:false}] 
+											},
 										{label:$L('Sync Now'), command:'sync', id: 0},
 										{label:$L('Show today'), command:'today', id: 1},
-										{label:$L('Jump to...'), command:'jumpto', id: 2},
+										{label:$L('Jump to...')+ '/' + $L("Templates"), command:'jumpto', id: 2},
 										{label:$L('Missed reminders...'), command:'reminders', id: 3},
 										{label:$L('Preferences & Accounts'), command:Mojo.Menu.prefsCmd, checkEnabled: true},
 										{label:$L('Help'), command:Mojo.Menu.helpCmd, disabled:false}]
@@ -43,6 +46,16 @@ var WeekAssistant = Class.create({
 		this.calendarsManager	= this.app.getCalendarsManager();
 		this.layoutManager		= new LayoutManager();
 		this.prefsManager		= this.app.getPrefsManager();
+		this.uberCategories = [
+				{'name': 'birthday'}, // Do NOT Localize these
+				{'name': 'car'},
+				{'name': 'doctor'},
+				{'name': 'holiday'},
+				{'name': 'kids'},
+				{'name': 'party'},
+				{'name': 'plane'},
+				{'name': 'vacation'},
+			];
 		this.PREV_WEEK			= 1;
 		this.THIS_WEEK			= 2;
 		this.NEXT_WEEK			= 3;
@@ -50,10 +63,200 @@ var WeekAssistant = Class.create({
 		this.requests			= [];
 		this.HOUR_HEIGHT		= 30;
 		this.TOTAL_HEIGHT		= this.HOUR_HEIGHT * 24;
+		this.WEEK_WIDTH			= 320;
 		this.COL_WIDTH			= [45, 46, 46, 46, 46, 46, 45];
 		this.COL_POS			= [0, 45, 91, 137, 183, 229, 275];
 		this.pendingRender		= false;
 		this.pendingCalendarSettingsUpdate = false;
+		this.imgAlarm = new Image();
+		this.imgAlarm.src = "/media/internal/.scrims/ubercalendar/alarm-icon.png";
+		this.imgIcons = new Object();
+		this.ALL_DAY_HEIGHT = 12;
+		this.enhancedView = false;
+		this.weekModulusNum = 1;
+		this.weekNumberTitle = true;
+		this.weekShowSubject = true;
+		this.weekViewShrink = "none";
+		this.weekViewIcons = true;
+		this.weekNumOffset = 0;
+		this.useISOweekNum = false;
+		this.prefStartDoW = 0;
+		this.weekTimeDay = 0;
+		this.workWeekOnly = false;
+		this.ucGroupsFirst = false;
+		this.uberBackGesture = 'last';
+		this.useAgendaZ = false;
+		this.weekCookie = new Mojo.Model.Cookie('WeekViewEnhanced');
+		if (this.weekCookie) {
+			var weekcookie = this.weekCookie.get();
+			if(weekcookie) {
+				if(weekcookie.weekviewenhanced !== undefined) {
+						this.enhancedView = weekcookie.weekviewenhanced;
+				} else {
+						this.enhancedView = false;
+				}
+				if(weekcookie.weeknumoffset !== undefined) {
+						this.weekNumOffset = parseInt(weekcookie.weeknumoffset,10);
+				} else {
+						this.weekNumOffset = 0;
+				}
+				if(weekcookie.weekmodulusnum !== undefined) {
+						this.weekModulusNum = parseInt(weekcookie.weekmodulusnum,10);
+				} else {
+						this.weekModulusNum = 1;
+				}
+				if(weekcookie.weeknumbertitle !== undefined) {
+						this.weekNumberTitle = weekcookie.weeknumbertitle;
+				} else {
+						this.weekNumberTitle = true;
+				}
+				if(weekcookie.weekshowsubject !== undefined) {
+						this.weekShowSubject = weekcookie.weekshowsubject;
+				} else {
+						this.weekShowSubject = true;
+				}
+				if(weekcookie.weekviewicons !== undefined) {
+						this.weekViewIcons = weekcookie.weekviewicons;
+				} else {
+						this.weekViewIcons = true;
+				}
+				if(weekcookie.weekviewshrink !== undefined) {
+						this.weekViewShrink = weekcookie.weekviewshrink;
+				} else {
+						this.weekViewShrink = "none";
+				}
+				if(weekcookie.weektimeday !== undefined) {
+						this.weekTimeDay = parseInt(weekcookie.weektimeday, 10);
+				} else {
+						this.weekTimeDay = 0;
+				}
+				if(weekcookie.uberbackgesture !== undefined) {
+						this.uberBackGesture = weekcookie.uberbackgesture;
+				} else {
+						this.uberBackGesture = 'last';
+				}
+				if (weekcookie.useisoweeknum !== undefined) {
+					this.useISOweekNum = weekcookie.useisoweeknum;
+				} else {
+					this.useISOweekNum = false;
+				}
+				if (weekcookie.prefsstartofweek !== undefined) {
+					this.prefStartDoW = parseInt(weekcookie.prefsstartofweek, 10) -1;
+				} else {
+					this.prefStartDoW = 0;
+				}
+				if (weekcookie.workweekonly !== undefined) {
+					this.workWeekOnly = weekcookie.workweekonly;
+				} else {
+					this.workWeekOnly = false;
+				}
+				if (weekcookie.ucgroupsfirst !== undefined) {
+					this.ucGroupsFirst = weekcookie.ucgroupsfirst;
+				} else {
+					this.ucGroupsFirst = false;
+				}
+				if (weekcookie.useagendaz !== undefined) {
+					this.useAgendaZ = weekcookie.useagendaz;
+				} else {
+					this.useAgendaZ = false;
+				}
+			}
+		}
+		this.workTest = !!this.workWeekOnly;
+		this.userUberCats = [];
+		this.catCookie = new Mojo.Model.Cookie("userUberCats");
+		if(this.catCookie) {
+			var catcookie = this.catCookie.get();
+			if(catcookie) {
+				if(catcookie.userubercats && catcookie.userubercats.length > 0){
+					this.userUberCats = catcookie.userubercats;
+				} else {
+					this.userUberCats = this.uberCategories;
+				}
+			} else {
+				this.userUberCats = this.uberCategories;
+			}
+		} else {
+				this.userUberCats = this.uberCategories;
+		}
+		if(this.enhancedView && this.weekViewShrink == "strong") {
+			this.HOUR_HEIGHT = 15;
+		} else if(this.enhancedView && this.weekViewShrink == "medium") {
+			this.HOUR_HEIGHT = 20;
+		} else {
+			this.HOUR_HEIGHT = 30;
+		}
+		if(this.enhancedView && this.workWeekOnly){
+			this.COL_WIDTH = [64, 64, 64, 64, 64, 64, 64];
+			this.COL_POS = [0, 64, 128, 192, 256, 320, 384];
+			this.WEEK_WIDTH = 448;
+		}
+	},
+	
+	uberColors: {"cal-color-blue": "rgba(145,211,234,0.5)",
+		"cal-color-green": "rgba(140,240,140,0.5)",
+		"cal-color-yellow": "rgba(232,227,124,0.5)",
+		"cal-color-gray": "rgba(194,194,194,0.5)",
+		"cal-color-orange": "rgba(251,180,116,0.5)",
+		"cal-color-pink": "rgba(245,156,188,0.5)",
+		"cal-color-red": "rgba(255,151,151,0.5)",
+		"cal-color-purple": "rgba(217,183,255,0.5)",
+		"cal-color-teal": "rgba(114,223,210,0.5)"},
+	
+	uberSetWidth: function(option){
+		if(option){
+			//this.workWeekOnly = true;
+			this.COL_WIDTH = [64, 64, 64, 64, 64, 64, 64];
+			this.COL_POS = [0, 64, 128, 192, 256, 320, 384];
+			this.WEEK_WIDTH = 448;
+		} else{
+			//this.workWeekOnly = false;
+			this.WEEK_WIDTH			= 320;
+			this.COL_WIDTH			= [45, 46, 46, 46, 46, 46, 45];
+			this.COL_POS			= [0, 45, 91, 137, 183, 229, 275];
+		}
+		this.eventHandler.deactivate();
+		this.eventHandler.removeAllHandlers();
+		this.allDayEventHandler.deactivate();
+		this.allDayEventHandler.removeAllHandlers();
+		for (var i = 0; i < 7; i++) {
+			this.eventHandler.addHandler(this.COL_POS[i], 
+										 0, 
+										 this.COL_POS[i] + this.COL_WIDTH[i],
+										 this.TOTAL_HEIGHT,
+										 this.tapHandler.bind(this, i),
+										 this.showSelectedHandler.bind(this, i),
+										 this.clearSelectedHandler.bind(this, i));
+		}
+		for (var i = 0; i < 7; i++) {
+			this.allDayEventHandler.addHandler(this.COL_POS[i], 
+												 0, 
+												 this.COL_POS[i] + this.COL_WIDTH[i],
+												 2 + 5 /* max rows */ * 9 /* row height */,
+												 this.tapHandler.bind(this, i),
+										 		 this.showSelectedHandler.bind(this, i),
+										 		 this.clearSelectedHandler.bind(this, i));
+		}
+		this.eventHandler.activate();
+		this.allDayEventHandler.activate();
+		this.controller.get("week_view").width = this.WEEK_WIDTH + 'px';
+		this.controller.get("wv_scroll_data").width = this.WEEK_WIDTH*3 + 'px';
+		this.controller.get("wv_scroll_events").width = (this.WEEK_WIDTH*3)+3 + 'px';
+		this.controller.get("wv_scrim_prev").width = this.WEEK_WIDTH + 'px';
+		this.controller.get("wv_scrim_next").width = this.WEEK_WIDTH + 'px';
+		this.controller.get("wv_scrim_next").left = (this.WEEK_WIDTH*2)+2 + 'px';
+		this.controller.get("wv_event_container").width = ((this.WEEK_WIDTH*3)+3) + 'px';
+		this.controller.get('wv_eventsDay0').width = this.WEEK_WIDTH+'px';
+		this.controller.get('events0').width = this.WEEK_WIDTH;
+		this.controller.get('wv_eventsDay1').width = this.WEEK_WIDTH+'px';
+		this.controller.get('wv_eventsDay1').left = (this.WEEK_WIDTH+1)+'px';
+		this.controller.get('events1').width = this.WEEK_WIDTH;
+		this.controller.get('wv_eventsDay2').width = this.WEEK_WIDTH+'px';
+		this.controller.get('wv_eventsDay2').left = ((this.WEEK_WIDTH*2)+1)+'px';
+		this.controller.get('events2').width = this.WEEK_WIDTH;
+		this.controller.get('events1').left = this.WEEK_WIDTH+1;
+		this.controller.get('events2').left = ((this.WEEK_WIDTH*2)+2);
+		this.buildWeekTitle();
 	},
 	
 	databaseChanged: function (response) {
@@ -111,6 +314,56 @@ var WeekAssistant = Class.create({
 		}
 	},
 	
+	clearEventsTapHandlers: function() {
+		if(this.eventsTapHandler !== undefined) {
+			this.eventsTapHandler.deactivate();
+			this.eventsTapHandler.removeAllHandlers();
+			// clear and hide canvas
+			this.evtapcontext.clearRect( 0, 0, this.WEEK_WIDTH, 850)
+			Mojo.Dom.hide(this.evtap);
+		}
+	},
+	
+	getUCGroupsProps: function() {
+		// check for UC groups
+		if(this.uberGroups && this.uberGroups.inUse === true && this.userUberCalGroups && this.userUberCalGroups.length > 0 && this.userUberCalGroups[0].rId !== undefined) {
+			var rID = this.uberGroups.rId;
+			if(rID) {
+				var len = this.userUberCalGroups.length;
+				var idx;
+				for(var i=0; i < len; i++){
+					if(rID === this.userUberCalGroups[i].rId) {
+						var idx = i;
+						break;
+					}
+				}
+				if(idx !== undefined && this.userUberCalGroups[idx].includes && this.userUberCalGroups[idx].includes.length >0) {
+					this.ucGroupIdx = idx;
+					this.ucGroupWorkWeek = this.userUberCalGroups[idx].workWeek;
+				}
+			}
+		} else {
+			this.ucGroupIdx = undefined;
+			this.ucGroupWorkWeek = false;
+		}
+	},
+	
+	whichDayCol: function (x) {
+		// determine which day column is tapped
+		var X = x;
+		var dayCol = null;
+		if (X) {
+			if ((X >= this.COL_POS[0]) && (X < this.COL_POS[1])) {dayCol=0;}
+			else if ((X >= this.COL_POS[1]) && (X < this.COL_POS[2])) {dayCol=1;}
+			else if ((X >= this.COL_POS[2]) && (X < this.COL_POS[3])) {dayCol=2;}
+			else if ((X >= this.COL_POS[3]) && (X < this.COL_POS[4])) {dayCol=3;}
+			else if ((X >= this.COL_POS[4]) && (X < this.COL_POS[5])) {dayCol=4;}
+			else if ((X >= this.COL_POS[5]) && (X < this.COL_POS[6])) {dayCol=5;}
+			else if ((X >= this.COL_POS[6]) && (X < this.WEEK_WIDTH)) {dayCol=6;}
+		}
+		return dayCol;
+	},
+	
 	isWeekDisplayed: function(week) {
 		var weekDateKey = this.keyFromDate(week);
 		var thisWeek = this.getFirstDayOfWeek (this.app.getCurrentDateTime());
@@ -137,9 +390,31 @@ var WeekAssistant = Class.create({
 	buildWeekTitle: function() {
 		var today = Date.today().clearTime();
 		var dayOfWeek = this.getFirstDayOfWeek(this.weekDate);
-		
-		var template = new Template($L("Week of #{dateStr}"));
+		var weekNumber = this.useISOweekNum === true ? new Date(this.weekDate).getISO8601Week() : new Date(this.weekDate).getWeekOfYear(this.prefStartDoW);
+		var year = new Date(this.weekDate).getFullYear();
+		var month = new Date(this.weekDate).getMonth();
+		var maxwkn = this.useISOweekNum === true ? new Date((month != 0 ? year : year -1), 11, 28).getISO8601Week() : new Date((month != 0 ? year : year -1), 11, 28).getWeekOfYear(this.prefStartDoW);
+		weekNumber = weekNumber == 0 ? 53 : weekNumber;
+		maxwkn = maxwkn == 0 ? 53 : maxwkn;
+		if(this.weekNumOffset !== undefined && this.weekNumOffset !=0) {
+			var wkNum = parseInt(weekNumber,10) + this.weekNumOffset;
+			weekNumber = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			weekNumber = weekNumber < 10 ? '0' + weekNumber : weekNumber;
+		}
+		if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+			var modNumber = (parseInt(weekNumber, 10) % this.weekModulusNum);
+			modNumber = modNumber !== 0 ? modNumber : this.weekModulusNum;
+			weekNumber = weekNumber + ' (' + modNumber + ')';
+		}
 		var templateModel = {};
+		if(this.weekNumberTitle) {
+			var template = new Template($L("Week") + " #{weekStr}, " + $L("#{dateStr}"));
+			templateModel.weekStr = weekNumber;
+		} else {
+			var template = new Template($L("Week of #{dateStr}"));
+		}
+		//var template = new Template($L("Week of #{dateStr}"));
+		
 		var formatObj = {};
 		// formatString = "MMM d, yyyy";
         formatObj.date = "default";
@@ -168,10 +443,14 @@ var WeekAssistant = Class.create({
 		this.ctxHeaderLabels.fillRect(641, 0, 1, 18);
 		
 		dayOfWeek.addWeeks(-1).clearTime();
+		var maxD = 7;
+		if(this.enhancedView && this.workTest){
+			maxD = 5;
+		}
 		var currentDayIndex = -1;
 		this.ctxHeaderLabels.fillStyle = "rgb(0, 0, 0)";
 		for (var i = 0; i < 3; i++) {
-			for (var j = 0; j < 7; j++) {
+			for (var j = 0; j < maxD; j++) {
 				var text1 = String(Mojo.Format.formatDate(dayOfWeek,'E'));
 				var text2 = String(dayOfWeek.getDate());
 				this.ctxHeaderLabels.font = "bold 14px Prelude";
@@ -191,13 +470,16 @@ var WeekAssistant = Class.create({
 				if ((currentDayIndex == -1) && (dayOfWeek.compareTo(today) === 0)) {
 					currentDayIndex = j + (i * 7);
 				}
+				if(this.enhancedView && this.workTest && j === maxD-1){
+					dayOfWeek.addDays(2);
+				}
 				dayOfWeek.addDays(1);
 			}
 		}
 		if (currentDayIndex != -1) { 
 			this.currentDay.setStyle({
 				top: '34px',
-				left: (960 / 21 * currentDayIndex - 8) + 'px',
+				left: (this.enhancedView && this.workTest) ? Math.floor(currentDayIndex/7)*320 + (currentDayIndex%7 * 64) + 'px' :(960 / 21 * currentDayIndex - 8) + 'px',
 				display: 'block'
 			});
 		} else {
@@ -285,15 +567,26 @@ var WeekAssistant = Class.create({
 		//Mojo.Log.info("week-assistant: currentCalendarUpdated");
 		var calMgr	= this.calendarsManager
 		,	calendar= calMgr.getCurrentCal();
-
-		if ("all" == calendar) {
+		
+		// update UC groups, calendars changed
+		this.userUberCalGroups = [];
+		this.userUberCalGroups = this.app.getUserUberCalGroups();
+		this.uberGroups = this.app.getUberGroups();
+		this.getUCGroupsProps();
+		
+		if(this.ucGroupIdx !== undefined) {
+			var name = this.userUberCalGroups[this.ucGroupIdx].groupname;
+			this.controller.get ("wv_current_calendar")	.update			(name);
+			this.controller.get ("wv_calendar_source")	.setAttribute	("class", "header-cal-source");
+			return;
+		} else if ("all" == calendar) {
 			this.controller.get ("wv_current_calendar")	.update			($L("All"));
 			this.controller.get ("wv_calendar_source")	.setAttribute	("class", "header-cal-source");
 			return;
 		}

 		if ("Local" == calMgr.getCalSyncSource (calendar)) {
-			// Special case the local calendar to always show Palm since Palm Profile always
+			// Special case the local calendar to always show Palm since HP webOS Account always
 			// gets truncated and looks ugly
 			this.controller.get ("wv_current_calendar").update ($L("Palm"));
 		} else {
@@ -403,10 +696,18 @@ var WeekAssistant = Class.create({
 		};
 
 		var calendarId	= this.calendarsManager.getCurrentCal();
-
+		// check for UC groups
+		if(this.uberGroups && this.uberGroups.inUse === true && this.ucGroupIdx !== undefined) {
+			var idx = this.ucGroupIdx;
+			if(idx !== undefined && this.userUberCalGroups && this.userUberCalGroups.length > 0 && this.userUberCalGroups[idx].includes && this.userUberCalGroups[idx].includes.length >0) {
+				var ucIncludes = this.userUberCalGroups[idx].includes;
+				calendarId = 'all';
+			}
+		}
+		
 		if (calendarId == "all") {												// When in "View All" mode
 			calendarId = null;													// disable calendar filtering
-			range.excludeList = this.calendarsManager.getExcludeFromAllList();	// except for excluded calendars.
+			range.excludeList = this.app.buildUberExcludes(ucIncludes);	// except for excluded calendars.
 		} else {
 			range.calendarId = calendarId;										// otherwise enable calendar filtering.
 		}
@@ -441,21 +742,66 @@ var WeekAssistant = Class.create({
 		var midPos = this.midDayMarkerPos * this.HOUR_HEIGHT - 1;
 		var endPos = this.endDayMarkerPos * this.HOUR_HEIGHT - 1;
 
+		for (var i=1; i<24; i++) {
+			ctx.fillStyle = "rgb(185, 185, 185)";
+			ctx.fillRect(0, i * this.HOUR_HEIGHT - 1, this.WEEK_WIDTH, 1);
+			ctx.fillStyle = "rgb(255, 255, 255)";
+			ctx.fillRect(0, i * this.HOUR_HEIGHT, this.WEEK_WIDTH, 1);
+		}
+
 		// Draw marker lines
 		ctx.fillStyle = "rgb(135, 135, 134)";
-		ctx.fillRect(0, startPos, 320, 2);
-		ctx.fillRect(0, endPos, 320, 2);
+		ctx.fillRect(0, startPos, this.WEEK_WIDTH, 2);
+		ctx.fillRect(0, endPos, this.WEEK_WIDTH, 2);
 		ctx.fillStyle = "rgb(160, 160, 160)";
-		ctx.fillRect(0, midPos, 320, 1);
+		ctx.fillRect(0, midPos, this.WEEK_WIDTH, 1);
 		ctx.fillStyle = "rgb(255, 255, 255)";
-		ctx.fillRect(0, startPos + 2, 320, 1);
-		ctx.fillRect(0, midPos + 1, 320, 1);
-		ctx.fillRect(0, endPos + 2, 320, 1);
+		ctx.fillRect(0, startPos + 2, this.WEEK_WIDTH, 1);
+		ctx.fillRect(0, midPos + 1, this.WEEK_WIDTH, 1);
+		ctx.fillRect(0, endPos + 2, this.WEEK_WIDTH, 1);
 	},
 	
 	renderStartEndDayLabels: function(whichWeek) {
 		var ctx = this.weeks[whichWeek].ctxEvents;
 		
+		// Draw marker labels
+		ctx.fillStyle = "rgb(0, 0, 0)";
+		if(this.enhancedView && this.weekViewShrink == "strong") {
+			var ucadd = 12;
+			ctx.font = "bold 10px Prelude";
+		} else if(this.enhancedView && this.weekViewShrink == "medium") {
+			ctx.font = "bold 12px Prelude";
+			var ucadd = 16;
+		} else {
+			ctx.font = "bold 14px Prelude";
+			var ucadd = 24;
+		}
+		
+		if(this.enhancedView && this.workTest && this.weekTimeDay > 4) {
+			var timedaypos = 12 + this.COL_POS[4];
+		} else if(this.enhancedView && ((this.workTest && this.weekTimeDay < 5) || (!this.workTest))) {
+			var timedaypos = 12 + this.COL_POS[this.weekTimeDay];
+		} else {
+			var timedaypos = 12;
+		}
+		
+		if (this.app.getTimeFormat() == 'HH24') {
+			for (var i=2; i<24; i+=2) {
+				var endPos = i * this.HOUR_HEIGHT - 1;
+				ctx.strokeText(i, timedaypos, endPos + ucadd);
+			}
+		} else {
+			for (var i=2; i<12; i+=2) {
+				var endPos = i * this.HOUR_HEIGHT - 1;
+				ctx.strokeText(i + " AM", timedaypos, endPos + ucadd);
+			}
+			for (var i=0; i<12; i+=2) {
+				var endPos = (i + 12) * this.HOUR_HEIGHT - 1;
+				var num = (i==0) ? 12 : i;
+				ctx.strokeText(num + " PM", timedaypos, endPos + ucadd);
+			}
+		}
+		/*
 		var startPos = this.startDayMarkerPos * this.HOUR_HEIGHT - 1;
 		var midPos = this.midDayMarkerPos * this.HOUR_HEIGHT - 1;
 		var endPos = this.endDayMarkerPos * this.HOUR_HEIGHT - 1;
@@ -469,6 +815,7 @@ var WeekAssistant = Class.create({
 			ctx.strokeText(this.midDayMarkerTime, 12, midPos + 24);
 		}
 		ctx.strokeText(this.endDayMarkerTime, 17, endPos + 24);
+		*/
 	},
 	
 	renderEmptyWeek: function(whichWeek) {
@@ -476,7 +823,7 @@ var WeekAssistant = Class.create({
 		
 		// Erase the entire cavas
 		ctx.fillStyle = "rgb(228, 228, 226)";
-		ctx.fillRect(0, 0, 320, this.TOTAL_HEIGHT);
+		ctx.fillRect(0, 0, this.WEEK_WIDTH, this.TOTAL_HEIGHT);
 
 		// Draw vertical day seperator lines
 		var x = 0;
@@ -501,7 +848,7 @@ var WeekAssistant = Class.create({
 				allDayEvents.setAttribute("height", newHeight + 'px');
 				var ctx = this.weeks[whichWeek].ctxAllDay;
 				ctx.fillStyle = "rgb(198, 197, 196)";
-				ctx.fillRect(0, 0, 320, newHeight);
+				ctx.fillRect(0, 0, this.WEEK_WIDTH, newHeight);
 			}
 				
 			if (allDayEvents.style.display != 'block') {
@@ -520,7 +867,7 @@ var WeekAssistant = Class.create({
 		}
 	},
 	
-	renderEvent: function(whichWeek, whichDay, event) {
+	renderEvent: function(whichWeek, whichDay, event, eIdx) {
 		var ctx = this.weeks[whichWeek].ctxEvents;
 		var marginLeft = 4;
 		var marginRight = 4;
@@ -564,6 +911,94 @@ var WeekAssistant = Class.create({
 		
 		ctx.fillStyle = "rgba(255, 255, 255, 0.10)";
 		ctx.fillRect(left+1, top+height-3, width-2, 1);
+		if (this.enhancedView){
+			// eventsTap handlers if not from highlight render (fromDefaultTap)
+			if ((!this.fromDefaultTap) && (whichWeek == this.THIS_WEEK)) {
+				var right = left+width;
+				var bottom = top + height;
+				this.eventsTapHandler.addHandler(left,
+													top,
+													right,
+													bottom,
+													this.handleEventsTap.bind(this, event),
+													this.showSelectedEventsTap.bind(this, left, top, width, height),
+													this.clearSelectedEventsTap.bind(this, left, top, width, height),
+													this.handleEventsHold.bind(this, event, left, top, width, height, whichDay, eIdx),
+													null,
+													null,
+													null);
+			}
+			if(this.weekShowSubject) {
+				// Subject
+				ctx.fillStyle = this.colors[event.calendarColor].text;
+				if(this.enhancedView && this.weekViewShrink == "strong") {
+					ctx.font = "8px Prelude";
+				} else if(this.enhancedView && this.weekViewShrink == "medium") {
+					ctx.font = "10px Prelude";
+				} else {
+					ctx.font = "10px Prelude";
+				}
+				var oldAlign = ctx.textAlign;
+				var oldBaseline = ctx.textBaseline;
+				ctx.textAlign = "left";
+				ctx.textBaseline = "top";
+				
+				var text = event.subject;
+				if (text !== undefined) {
+					var length = text.length;
+					var metrics = ctx.measureText(text);
+					while ((metrics.width > eventMaxWidth-3) && (length > 0)) {
+						// too large, try one less
+						length--;
+						text = text.substring(0, length);
+						metrics = ctx.measureText(text);
+					}
+					ctx.fillText(text, left+2, top+1);
+					top += 12
+					if (text.length < event.subject.length) {
+						var text = event.subject.substring(text.length);
+						var length = text.length;
+						var metrics = ctx.measureText(text);
+						while ((metrics.width > eventMaxWidth-3) && (length > 0)) {
+							// too large, try one less
+							length--;
+							text = text.substring(0, length);
+							metrics = ctx.measureText(text);
+						}
+						ctx.fillText(text, left+2, top+1);
+						top += 12
+					}
+				}
+			}
+			// Alarm
+			var testA, xx = false, AA, ZZ = event.alarm;
+			if(ZZ){
+				for(AA=0;AA<ZZ.length;AA++){
+					testA = ZZ[AA];
+					if(testA &&  testA.alarmTrigger && testA.action === "display" && testA.alarmTrigger.valueType && testA.alarmTrigger.valueType === "DURATION" && testA.alarmTrigger.value && testA.alarmTrigger.value !== "" && testA.alarmTrigger.value !== "none"){
+						xx = true;
+						break;
+					}
+				}
+			}
+			if (xx && this.weekViewIcons) {
+				try{ ctx.drawImage(this.imgAlarm, left+1, top+2, 12, 12); }catch (e) {}
+			}
+			// Icon
+			if (event.note !== undefined && this.weekViewIcons) {
+				var start = this.app.getNotesIconParts(event.note);
+				//var patt = /((.|\n|\r)*?)ICON=([a-z0-9_-]{1,20});((.|\n|\r)*)/;
+				//var start = event.note.match(patt);
+				if (start && start[1]) {
+					var icon = start[1];
+						if(icon && this.imgIcons.hasOwnProperty(icon)){try{ctx.drawImage(this.imgIcons[icon], left+13, top+2, 12, 12); }catch (e) {}}
+				}
+			}
+			if (this.weekShowSubject) {
+				ctx.textAlign = oldAlign;
+				ctx.textBaseline = oldBaseline;
+			}
+		}
 	},
 	
 	renderBusyTime: function(whichWeek, whichDay, busy) {
@@ -584,12 +1019,89 @@ var WeekAssistant = Class.create({
 	renderAllDayEvent: function(whichWeek, whichDay, row, allday) {
 		var ctx = this.weeks[whichWeek].ctxAllDay;
 		var marginLeft = 4;
-		var top = 2 + row * 9;
+		var top = 2 + row * this.ALL_DAY_HEIGHT;
 		var left = this.COL_POS[whichDay] + marginLeft;
+		var eventMaxWidth = this.COL_WIDTH[whichDay] - marginLeft - marginLeft;
 		if(!allday.calendarColor){
 			allday.calendarColor = this.calendarsManager.getCalColorStyle (allday.calendarId);	
 		}		
-		ctx.drawImage(this.colors[allday.calendarColor].allday, left, top);
+		ctx.drawImage(this.colors[allday.calendarColor].allday, left, top, eventMaxWidth, this.ALL_DAY_HEIGHT);
+		
+		if (this.enhancedView) {
+			if(this.weekShowSubject) {
+				// Subject
+				ctx.fillStyle = this.colors[allday.calendarColor].text;
+				if(this.enhancedView && this.weekViewShrink == "strong") {
+					ctx.font = "8px Prelude";
+				} else if(this.enhancedView && this.weekViewShrink == "medium") {
+					ctx.font = "9px Prelude";
+				} else {
+					ctx.font = "9px Prelude";
+				}
+				var oldAlign = ctx.textAlign;
+				var oldBaseline = ctx.textBaseline;
+				ctx.textAlign = "left";
+				ctx.textBaseline = "top";
+				
+				var text = allday.subject;
+				if (text !== undefined) {
+					if ( text.charAt(text.length -1) == ")") {
+						try {
+							var start = allday.subject.indexOf("(");
+							if (start > -1) {
+								var end = allday.subject.length;
+								if ((end > start) && ( end - start <= 13)) {
+									var text = allday.subject.substring(start, end-1);
+								}
+							}
+						} catch(e) {}
+						ctx.fillText(text, left, top);
+					} else {
+						var length = text.length;
+						var metrics = ctx.measureText(text);
+						while ((metrics.width > eventMaxWidth) && (length > 0)) {
+							// too large, try one less
+							length--;
+							text = text.substring(0, length);
+							metrics = ctx.measureText(text);
+						}
+						ctx.fillText(text, left, top);
+					}
+				}
+			}
+			// Alarm
+			var testA, xx = false, AA, ZZ = allday.alarm;
+			if(ZZ){
+				for(AA=0;AA<ZZ.length;AA++){
+					testA = ZZ[AA];
+					if(testA &&  testA.alarmTrigger && testA.action === "display" && testA.alarmTrigger.valueType && testA.alarmTrigger.valueType === "DURATION" && testA.alarmTrigger.value && testA.alarmTrigger.value !== "" && testA.alarmTrigger.value !== "none"){
+						xx = true;
+						break;
+					}
+				}
+			}
+			if (xx && this.weekViewIcons) {
+				try{ ctx.drawImage(this.imgAlarm, left+eventMaxWidth-4, top+2, 10, 10); }catch (e) {}
+			}
+			// Icon
+			if (allday.note !== undefined && this.weekViewIcons) {
+				try {
+					var start = allday.note.indexOf("ICON=");
+					if (start > -1) {
+						start += 5;
+						var end = allday.note.indexOf(";");
+						if (end > start) {
+							var icon = allday.note.substring(start, end);
+							if(icon && this.imgIcons.hasOwnProperty(icon)){try{ctx.drawImage(this.imgIcons[icon], left+eventMaxWidth-14, top+2, 10, 10); }catch (e) {}}
+						}
+					}
+				} catch(e) {}
+			}
+			if (this.weekShowSubject) {
+				ctx.textAlign = oldAlign;
+				ctx.textBaseline = oldBaseline;
+			}
+		}
 	},
 
 
@@ -598,10 +1110,14 @@ var WeekAssistant = Class.create({
 		var ctx;
 		var ctxAllDay;
 		this.renderEmptyWeek(whichWeek);
-		if ((data === null) || (data.days === null)) {
+		if (!data || !data.days) {
 			return;
 		}
-
+		
+		if ((whichWeek==this.THIS_WEEK) && (this.enhancedView) && (!this.fromDefaultTap)){
+			this.clearEventsTapHandlers();
+		}
+		
 		// Erase any existing all day events and any selection highlighting
 		if (this.weeks[whichWeek].alldayHeight) {
 			ctx = this.weeks[whichWeek].ctxAllDay;
@@ -621,53 +1137,76 @@ var WeekAssistant = Class.create({
 		    ctxAllDay.fillRect(this.COL_POS[this.selectedCol], 0, this.COL_WIDTH[this.selectedCol], this.weeks[whichWeek].alldayHeight);
 		}	
 
+		var maxD = 7;
+		if(this.enhancedView && this.workTest){
+			maxD = 5;
+		}
+
 		//Figure out how high the allday area should be, and adjust the size
 		var i;	
 		var maxRows = 0;
-		for(i = 0; i < 7; i++){
-			maxRows = Math.max(data.days[i].allDayEvents.length, maxRows);
+		for(i = 0; i < maxD; i++){
+			if(data && data.days[i] && data.days[i].allDayEvents && data.days[i].allDayEvents.length) {
+				maxRows = Math.max(data.days[i].allDayEvents.length, maxRows);
+			}
 		}
 		if (maxRows > 5) {
 			maxRows = 5;
 		}
 			
-		this.weeks[whichWeek].alldayHeight = maxRows ? maxRows * 9 + 3 : 0;
+		this.weeks[whichWeek].alldayHeight = maxRows ? maxRows * this.ALL_DAY_HEIGHT + 3 : 0;
 		this.updateWeekHeight(whichWeek);
+		var eventCount = 0;
 
-		for (var limit, whichDay = 0; whichDay < 7; whichDay++) {
+		for (var limit, whichDay = 0; whichDay < maxD; whichDay++) {
 			var day = data.days[whichDay];
 
 			// All day events
 			var row = 0;
-			for (limit = day.allDayEvents.length, i = 0; i < limit; i++) {
-				this.renderAllDayEvent (whichWeek, whichDay, row, day.allDayEvents[i]);
-				if (row >= 5) {
-					break;
+			if(day && day.allDayEvents) {
+				for (limit = day.allDayEvents.length, i = 0; i < limit; i++) {
+					this.renderAllDayEvent (whichWeek, whichDay, row, day.allDayEvents[i]);
+					if (row >= 5) {
+						break;
+					}
+					row++;
 				}
-				row++;
 			}
 
 			// Busy times
-			for (limit = day.busyTimes.length, i = 0; i < limit; i++) {
-				this.renderBusyTime (whichWeek, whichDay, day.busyTimes[i]);
+			if(day && day.busyTimes) {
+				for (limit = day.busyTimes.length, i = 0; i < limit; i++) {
+					this.renderBusyTime (whichWeek, whichDay, day.busyTimes[i]);
+				}
 			}
-
+			
 			// Events
-			for (limit = day.events.length, i = 0; i < limit; i++) {
-				this.renderEvent (whichWeek, whichDay, day.events[i]);
+			if(day && day.events) {
+				for (limit = day.events.length, i = 0; i < limit; i++) {
+					if (whichWeek == this.THIS_WEEK) {eventCount += 1;}
+					this.renderEvent (whichWeek, whichDay, day.events[i], i);
+				}
 			}
 		}
 
 		// Draw vertical day separator lines in allday area
 		var x = 0;
 		ctxAllDay = this.weeks[whichWeek].ctxAllDay;
-		for (i = 0; i < 6; i++) {
+		for (var i = 0; i < 6; i++) {
 			x += this.COL_WIDTH[i];
 			ctxAllDay.fillStyle = "rgb(160, 160, 160)";
 			ctxAllDay.fillRect(x, 0, 1, this.weeks[whichWeek].alldayHeight);
 			ctxAllDay.fillStyle = "rgb(242, 242, 241)";
 			ctxAllDay.fillRect(x+1, 0, 1, this.weeks[whichWeek].alldayHeight);
 		}
+		
+		if ((whichWeek == this.THIS_WEEK) && (this.enhancedView) && (!this.fromDefaultTap)){
+			if (eventCount > 0){
+				this.eventsTapHandler.setDefaultHandler(this.handleDefaultEventsTap.bind(this), null, null);
+								this.eventsTapHandler.activate();
+				this.evtap.show();
+			}
+		}
 		this.renderStartEndDayLabels(whichWeek);
 	},
 	
@@ -682,8 +1221,9 @@ var WeekAssistant = Class.create({
 
 		var i;
 		this.clearCache();
-		this.eventManager	= new Calendar.EventManager();
+		this.eventManager	= this.app.getEventManager();
 		this.reminders		= this.app.getReminderManager();
+		this.db						= new DatabaseManager();
 
 		this.reminders.observeReminders	("week", this);
 		this.app.observeCurrentDateTime	("week", this);
@@ -706,6 +1246,61 @@ var WeekAssistant = Class.create({
 		this.scrollMakerPos	= this.controller.get ("wv_scroll_marker");
 		this.scrollDataDiv	= this.controller.get ("wv_scroll_data");
 		
+		if(this.enhancedView){
+			var headDiv = this.controller.get("wv_header_container1");
+			var scrimDiv = document.createElement('div');
+			scrimDiv.setAttribute('id', "uber-week-panel-scrim");
+			scrimDiv.setAttribute('class', "palm-scrim menu-panel");
+			scrimDiv.setAttribute('x-mojo-menupanel-scrim', "");
+			
+			var panDiv = document.createElement('div');
+			panDiv.setAttribute('id', "uber-week-mp-cont");
+			panDiv.innerHTML = '<div id="uber-week-menu-panel" class="palm-menu-panel" x-mojo-menupanel="">' +
+				'<div class="palm-menu-panel-wrapper" x-mojo-element="Scroller"><div class="palm-list">' +
+		        	'<div class="palm-row first" id="uber-panel-event"></div>' +
+					'<div class="palm-row last" ><div class="palm-row-wrapper"><div ><table width="100%" ><tr>' +
+								'<td width="25%" style="padding:0px;margin:0px;"><div id="uber-week-mp-back" class="palm-button" x-mojo-tap-highlight="momentary" style="overflow:hidden;padding:0px;margin:0px;" x-mojo-loc=""><-</div></td>' +
+								'<td width="25%" style="padding:0px;margin:0px;"><div id="uber-week-mp-map" class="palm-button secondary disabled" x-mojo-tap-highlight="momentary" style="overflow:hidden;padding:0px;margin:0px;" x-mojo-loc="">'+$L("Map")+'</div></td>' +
+								'<td width="25%" style="padding:0px;margin:0px;"><div id="uber-week-mp-delete" class="palm-button negative" x-mojo-tap-highlight="momentary" style="overflow:hidden;padding:0px;margin:0px;" x-mojo-loc="">'+$L("Delete")+'</div></td>' +
+								'<td width="25%" style="padding:0px;margin:0px;"><div id="uber-week-mp-next" class="palm-button" x-mojo-tap-highlight="momentary" style="overflow:hidden;padding:0px;margin:0px;" x-mojo-loc="">-></div></td>' +
+					'</tr></table></div></div>' +
+				'</div></div></div>';
+			
+			this.controller.get("week_view").insertBefore(scrimDiv, headDiv);
+			var scrollDiv = this.controller.get("wv_scroll_container");
+			this.controller.get("week_view").insertBefore(panDiv, scrollDiv);
+			this.uberMenuPanel = this.controller.get("uber-week-menu-panel");
+			this.uberScrim = this.controller.get("uber-week-panel-scrim");
+			this.uberMenuPanel.hide();
+			this.uberScrim.hide();
+		}
+		
+		
+		if (this.enhancedView && this.workWeekOnly) {
+			this.controller.get("week_view").width = this.WEEK_WIDTH + 'px';
+			this.controller.get("wv_scroll_data").width = this.WEEK_WIDTH*3 + 'px';
+			this.controller.get("wv_scroll_events").width = (this.WEEK_WIDTH*3)+3 + 'px';
+			this.controller.get("wv_scrim_prev").width = this.WEEK_WIDTH + 'px';
+			this.controller.get("wv_scrim_next").width = this.WEEK_WIDTH + 'px';
+			this.controller.get("wv_scrim_next").left = (this.WEEK_WIDTH*2)+2 + 'px';
+			this.controller.get("wv_event_container").width = ((this.WEEK_WIDTH*3)+3) + 'px';
+			this.controller.get('wv_eventsDay0').width = this.WEEK_WIDTH+'px';
+			this.controller.get('events0').width = this.WEEK_WIDTH;
+			this.controller.get('wv_eventsDay1').width = this.WEEK_WIDTH+'px';
+			this.controller.get('wv_eventsDay1').left = (this.WEEK_WIDTH+1)+'px';
+			this.controller.get('events1').width = this.WEEK_WIDTH;
+			this.controller.get('wv_eventsDay2').width = this.WEEK_WIDTH+'px';
+			this.controller.get('wv_eventsDay2').left = ((this.WEEK_WIDTH*2)+1)+'px';
+			this.controller.get('events2').width = this.WEEK_WIDTH;
+			this.controller.get('events1').left = this.WEEK_WIDTH+1;
+			this.controller.get('events2').left = ((this.WEEK_WIDTH*2)+2);
+		}
+		for(var i=0; i<this.userUberCats.length; i++) {
+			var catName = this.userUberCats[i].name;
+			this.imgIcons[catName] = new Image();
+			this.imgIcons[catName].src = "/media/internal/.scrims/ubercalendar/icon-" + catName + ".png";
+		}
+
 		this.weeks = [];
 		this.weeks[this.PREV_WEEK] = {};
 		this.weeks[this.THIS_WEEK] = {};
@@ -721,9 +1316,20 @@ var WeekAssistant = Class.create({
 		this.weeks[this.THIS_WEEK].ctxEvents.font = "14px Prelude Bold";
 		this.weeks[this.NEXT_WEEK].ctxEvents.font = "14px Prelude Bold";
 		
+		if (this.enhancedView && this.weekViewShrink != "none") {
+			if(this.weekViewShrink == "strong") {
+				this.controller.get('events0').height = 450;
+				this.controller.get('events1').height = 450;
+				this.controller.get('events2').height = 450;
+			} else {
+				this.controller.get('events0').height = 550;
+				this.controller.get('events1').height = 550;
+				this.controller.get('events2').height = 550;
+			}
+		}
 		this.selectedCol = -1;
 		this.eventHandler = new TapHandler(this.controller.get('events1'));
-		for (i = 0; i < 7; i++) {
+		for (var i = 0; i < 7; i++) {
 			this.eventHandler.addHandler(this.COL_POS[i], 
 										 0, 
 										 this.COL_POS[i] + this.COL_WIDTH[i],
@@ -746,7 +1352,7 @@ var WeekAssistant = Class.create({
 		this.weeks[this.THIS_WEEK].ctxAllDay = this.weeks[this.THIS_WEEK].all_day_events.getContext('2d');
 		this.weeks[this.NEXT_WEEK].ctxAllDay = this.weeks[this.NEXT_WEEK].all_day_events.getContext('2d');
 		this.allDayEventHandler = new TapHandler(this.weeks[this.THIS_WEEK].all_day_events);
-		for (i = 0; i < 7; i++) {
+		for (var i = 0; i < 7; i++) {
 			this.allDayEventHandler.addHandler(this.COL_POS[i], 
 													0, 
 													this.COL_POS[i] + this.COL_WIDTH[i],
@@ -770,7 +1376,12 @@ var WeekAssistant = Class.create({
 		this.controller.setupWidget ("wv_scroll_events"		, {}							, this.vertScrollerModel);	
 
 //		this.sceneWidth = this.controller.get('wv_scroll_container').getDimensions().width;
-		this.sceneWidth = 320;
+		this.sceneWidth = this.WEEK_WIDTH;
+		// setup UC groups
+		this.userUberCalGroups = [];
+		this.userUberCalGroups = this.app.getUserUberCalGroups();
+		this.uberGroups = this.app.getUberGroups();
+		this.getUCGroupsProps();
 		
 		this.buildViewHeader();
 		this.title = this.controller.get('wv_title');
@@ -797,16 +1408,17 @@ var WeekAssistant = Class.create({
 		this.menuModel =
 		{	visible	:	true
 		,	items	:
-			[	{}
+			[	{label: $L('Event'), icon: 'new-timed', command: 'newtimed'}
 			,	{	label		: $L('Views')
 				,	toggleCmd	: 'week'
 				,	items		:
-					[	{	label: $L('Day')	, icon: 'menu-day'	, command: 'day'	}
+					[	{	label:$L('Agenda')	, icon: 'menu-agenda', command:'agenda'}
+					,	{	label: $L('Day')	, icon: 'menu-day'	, command: 'day'	}
 					,	{	label: $L('Week')	, icon: 'menu-week'	, command: 'week'	}
 					,	{	label: $L('Month')	, icon: 'menu-month', command: 'month'	}
 					]
 				}
-			,	{}
+			,	{label: $L('All day event'), icon: 'new-allday', command: 'newallday'}
 			]
 		};
 
@@ -816,10 +1428,47 @@ var WeekAssistant = Class.create({
 		this.remindersUpdated(); // Update missed reminders menu item
 
 		this.isScrolling = false;
+		
+		//Used to detect gesture area hold
+		this.metaKeyDown = false;
+		this.orangeKeyDown = false;
+		
+		//used to copy Event
+		this.copyEvt = null;
+		this.handleEditEventsCallBack = this.editEventsCallBack.bind(this);
+		this.fromEditEventsCallBack = false;
+		//setup canvas for eventsTap
+		if (this.enhancedView) {
+			// insert canvas element
+			var container = this.controller.get('wv_eventsDay1');
+			evtapcanvas = document.createElement('canvas');
+			evtapcanvas.id = 'eventsTap';
+			evtapcanvas.width  = this.WEEK_WIDTH;
+			if(this.weekViewShrink == "strong") {
+				evtapcanvas.height = 450;
+			} else if(this.weekViewShrink == "medium") {
+				evtapcanvas.height = 550;
+			} else {
+				evtapcanvas.height = 850;
+			}
+			container.appendChild(evtapcanvas);
+			this.evtap = this.controller.get('eventsTap');
+			this.evtapcontext = this.controller.get('eventsTap').getContext('2d');
+			// initially hide events tap canvas
+			Mojo.Dom.hide(this.evtap);
+			//setup events taphandler
+			this.fromDefaultTap = false;
+			this.prevListener = this.handleHeldPrev.bind(this);
+			this.nextListener = this.handleHeldNext.bind(this);
+			this.mapListener = this.handleHeldMap.bind(this);
+			this.heldEvtListener = this.handleHeldEvent.bind(this);
+			this.deleteListener = this.handleHeldDelete.bind(this);
+			this.eventsTapHandler = new TapHandler(this.controller.get('eventsTap'));
+		}
 	}
 
 ,	showJumpTo: function() {
-		this.controller.showDialog ({ template: "shared/jumpto", assistant: new JumptoDialogAssistant (this.controller) });
+		this.controller.showDialog ({ template: "shared/jumpto", assistant: new JumptoDialogAssistant (this.controller, this) });
 	}
 
 ,	syncAllCalendars: function() {
@@ -840,6 +1489,12 @@ var WeekAssistant = Class.create({
 			} else if (event.command == Mojo.Menu.prefsCmd) {
 				Mojo.Event.stop (event);
 				this.controller.stageController.pushScene('prefs');
+			} else if(event.command =="newtimed"){
+				Mojo.Event.stop(event);
+				this.controller.stageController.pushScene('edit', 0, 0, false, this.getCalId()/*calendarId*/,0/*subject*/, false, this.handleEditEventsCallBack);
+			} else if(event.command=="newallday"){
+				Mojo.Event.stop(event);
+				this.controller.stageController.pushScene('edit', 0, 0, true, this.getCalId(),0/*subject*/, false, this.handleEditEventsCallBack);
 			} else if(event.command == Mojo.Menu.helpCmd){
 				this.app.getAppManagerService().launchHelp (this.controller);
 			} else if (event.command == 'sync') {
@@ -855,11 +1510,50 @@ var WeekAssistant = Class.create({
 			} else if (event.command == 'reminders') {
 				Mojo.Event.stop (event);
 				this.controller.stageController.pushScene('reminder-list');
+			} else if (event.command == 'agenda') {
+				Mojo.Event.stop(event);
+				var appId = 'com.palm.app.agendaview';
+				if(this.useAgendaZ){
+					appId = 'com.palm.service.calendar.metaview';
+				}
+				this.controller.serviceRequest('palm://com.palm.applicationManager', {
+					method: 'launch',
+					parameters: {
+						id: appId
+					}
+				});
+				this.menuModel.items[1].toggleCmd = 'week';
+				this.controller.modelChanged(this.menuModel, this);
 			}				
 		}
 		else if(event.type == Mojo.Event.commandEnable && event.command == Mojo.Menu.prefsCmd) {
 			// Enable prefs menuitem for this scene.
 			event.stopPropagation();
+		}  else if (event.type == Mojo.Event.back) {
+			if(this.uberHolding){
+				if(this.uberHoldTimeout){
+					this.controller.window.clearTimeout(this.uberHoldTimeout);
+					this.uberHoldTimeout = 0;
+				}
+				this.uberMenuPanel.hide();
+				//Mojo.Log.error("default tap should close and return");
+				this.uberHolding = false;
+				this.uberFirstTapFromHold = false;
+				event.preventDefault();
+				event.stopPropagation();
+				return;
+			}
+			if(this.uberBackGesture == 'month' || (this.uberBackGesture == 'last' && this.uberLastView == 'month' )) {
+				event.preventDefault();
+				event.stopPropagation();
+				this.handleMonthView();
+			} else if(this.uberBackGesture == 'day' || (this.uberBackGesture == 'last' && this.uberLastView == 'day' )) {
+				event.preventDefault();
+				event.stopPropagation();
+				this.handleDayView();
+			} else if(this.uberBackGesture == 'week' || (this.uberBackGesture == 'last' && this.uberLastView == 'week' )) {
+				// default back gesture
+			}
 		}
 	}
 
@@ -916,7 +1610,19 @@ var WeekAssistant = Class.create({
 
 ,	scrollToDefault: function(animate) {
 		if (this.scroller) {
-			this.scroller.mojo.scrollTo(0, (this.startDayMarkerPos * this.HOUR_HEIGHT - this.weeks[this.THIS_WEEK].alldayHeight) - 20, animate);
+			if(this.enhancedView && this.weekViewShrink !="none") {
+				if(this.weekViewShrink == "strong") {
+					this.scroller.mojo.revealBottom();
+				} else {
+				var allDcorr = (45 - this.weeks[this.THIS_WEEK].alldayHeight - Math.floor(this.HOUR_HEIGHT/8));
+				allDcorr = allDcorr > 3 ? allDcorr : 3 ;
+				this.scroller.mojo.scrollTo(0, (this.startDayMarkerPos * this.HOUR_HEIGHT - this.weeks[this.THIS_WEEK].alldayHeight) - allDcorr, animate);
+				}
+			} else {
+				var allDcorr = (45 - this.weeks[this.THIS_WEEK].alldayHeight - Math.floor(this.HOUR_HEIGHT/8));
+				allDcorr = allDcorr > 3 ? allDcorr : 3 ;
+				this.scroller.mojo.scrollTo(0, (this.startDayMarkerPos * this.HOUR_HEIGHT - this.weeks[this.THIS_WEEK].alldayHeight) - allDcorr, animate);
+			}
 		}
 	},
 
@@ -1019,8 +1725,54 @@ var WeekAssistant = Class.create({
 	
 	activate: function() {
 		this.active = true;
+		// setup UC groups
+		this.userUberCalGroups = [];
+		this.userUberCalGroups = this.app.getUserUberCalGroups();
+		this.uberGroups = this.app.getUberGroups();
+		this.getUCGroupsProps();
+		if(this.enhancedView && this.uberGroups.inUse === true && this.ucGroupWorkWeek !== undefined ){
+			if(this.workWeekOnly !== this.ucGroupWorkWeek){
+				this.workTest = !!this.ucGroupWorkWeek;
+				this.uberSetWidth(this.ucGroupWorkWeek);
+				this.pendingCalendarSettingsUpdate = true;
+			}
+		}
+		this.uberLastView = "week";
+		var cookie = new Mojo.Model.Cookie("BackGesture");
+		try {
+			if(cookie) {
+				var lview = cookie.get();
+				if(lview && lview.lastview) {
+					this.uberLastView = lview.lastview;
+				}
+				cookie.put({lastview: "week"});
+			}
+		} catch (e) {}
+		if ((this.uberLastView != "month") && (this.uberLastView != "day")) {
+			this.uberLastView = "week";
+		}
 		this.eventHandler.activate();
 		this.allDayEventHandler.activate();
+		
+		this.metaKeyDown = false;
+		// eventsTap handler & KeyHandler only activate if enhancedview
+		if (this.enhancedView) {
+			if(this.fromEditEventsCallBack == true) { this.app.observeCurrentDateTime	("week", this);}
+			this.eventsTapHandler.activate();
+			// key handlers for event meta tap and event canvas
+			this.keyUpHandler = this.handleKeyUp.bind(this);
+			this.controller.listen(this.controller.sceneElement, Mojo.Event.keyup, this.keyUpHandler);
+		
+			this.keyDownHandler = this.handleKeyDown.bind(this);
+			this.controller.listen(this.controller.sceneElement, Mojo.Event.keydown, this.keyDownHandler);
+			this.miniHandler = this.handleMini.bind(this);
+			this.controller.listen(this.controller.sceneElement, Mojo.Event.stageActivate, this.miniHandler);
+			this.controller.get ('uber-week-mp-back').observe(Mojo.Event.tap, this.prevListener);
+			this.controller.get ('uber-week-mp-next').observe(Mojo.Event.tap, this.nextListener);
+			this.controller.get ('uber-week-mp-map').observe(Mojo.Event.tap, this.mapListener);
+			this.controller.get ('uber-panel-event').observe(Mojo.Event.tap, this.heldEvtListener);
+			this.controller.get ('uber-week-mp-delete').observe(Mojo.Event.tap, this.deleteListener);
+		}
 
 		// Tap JumpTo:
 		this.controller.get('wv_view_header').observe(Mojo.Event.tap, this.showJumpTo);
@@ -1049,10 +1801,29 @@ var WeekAssistant = Class.create({
 
 	deactivate: function(){
 		this.active = false;
-		
+		this.metaKeyDown = false;
 		this.eventHandler.deactivate();
 		this.allDayEventHandler.deactivate();
 
+		//deactivate eventsTap & key handlers
+		if (this.enhancedView) {
+			if(this.eventsTapHandler) {this.eventsTapHandler.deactivate();}
+			// key handlers for event meta tap and event canvas
+			this.controller.stopListening(this.controller.sceneElement, Mojo.Event.keyup, this.keyUpHandler);
+			this.controller.stopListening(this.controller.sceneElement, Mojo.Event.keydown, this.keyDownHandler);
+			this.controller.stopListening(this.controller.sceneElement, Mojo.Event.stageActivate, this.miniHandler);
+			this.controller.get ('uber-week-mp-back').stopObserving(Mojo.Event.tap, this.prevListener);
+			this.controller.get ('uber-week-mp-next').stopObserving(Mojo.Event.tap, this.nextListener);
+			this.controller.get ('uber-week-mp-map').stopObserving(Mojo.Event.tap, this.mapListener);
+			this.controller.get ('uber-panel-event').stopObserving(Mojo.Event.tap, this.heldEvtListener)
+			this.controller.get ('uber-week-mp-delete').stopObserving(Mojo.Event.tap, this.deleteListener);
+			if(this.uberHoldTimeout){
+				this.controller.window.clearTimeout(this.uberHoldTimeout);
+				this.uberHoldTimeout = 0;
+			}
+		}
+		
+
 		this.controller.get ('wv_view_header')		.stopObserving (Mojo.Event.tap, this.showJumpTo);
 		this.controller.get ('wv_calendar_source')	.stopObserving (Mojo.Event.tap, this.showCalendarPicker);
 
@@ -1063,6 +1834,446 @@ var WeekAssistant = Class.create({
 		this.controller.get				("wv_scroll_container").mojo.removeMovementListener	(this.onMove);
 	},
 	
+	// *** EVENT HANDLERS ***
+	
+	handleKeyUp: function(event) {
+		// getsure area up
+		if (event.originalEvent.metaKey || event.originalEvent.keyCode === 231) {
+		//Mojo.Log.info("handleKeyUp detected gesture up key");
+			this.metaKeyDown = false;
+		}
+		// Check for Orange key
+		if (event.originalEvent.altKey || event.originalEvent.keyCode === 129) {
+    	//Mojo.Log.info("handleKeyUp detected ORANGE key");
+			this.orangeKeyDown = false;
+ 		}		
+	},
+	
+	handleKeyDown: function(event) {
+		// getsure area down
+		if (this.active && (event.originalEvent.metaKey || event.originalEvent.keyCode === 231)) {
+    	//Mojo.Log.info("handleKeyUp detected gesture key");
+			this.metaKeyDown = true;
+		}
+		// Check for Orange key
+		if (event.originalEvent.altKey || event.originalEvent.keyCode === 129) {
+    	//Mojo.Log.info("handleKeyUp detected ORANGE key");
+			this.orangeKeyDown = true;
+ 		}		
+	},
+	
+	copiedEvent: function(response) {
+		//copied event saved open in edit scene
+		if(response.results[0].id && response.results[0].rev) {
+			this.copyEvt._id = response.results[0].id;
+			this.copyEvt._rev = response.results[0].rev;
+		}
+		if(this.copyEvt) {
+			if(response.results[0].id == this.copyEvt._id || this.copyEvt._id == undefined || this.copyEvt._id.match(response.results[0].id)) {
+	  
+				// NOTE: Event Ids are strings NOT longs
+				if (this.copyEvt._id == undefined)	this.copyEvt._id = response._id + "";	// Do NOT Localize
+				this.controller.stageController.pushScene('edit', this.copyEvt._id, new Date(this.copyEvt.dtstart), false, this.copyEvt.calendarId, this.copyEvt.subject, false, this.handleEditEventsCallBack);
+			}
+		}
+	},
+	
+	handleEventsHold: function(event, left, top, width, height, whichDay, eIdx, tapEvent) {
+		//Mojo.Event.stop(tapEvent);
+		//Mojo.Log.error("Holding Event!!!!!!!" + (event && event.subject) + " , day: " + whichDay + " , idx: " + eIdx);
+		this.uberMenuPanel.show();
+		this.uberHolding = true;
+		this.uberHeldEvent = false;
+		this.uberHeldDay = whichDay;
+		this.uberHeldIdx = eIdx;
+		this.uberFirstTapFromHold = true;
+		if(left !== null){this.clearSelectedEventsTap(left, top, width, height);}
+		if(event){
+			var tEvt = {}, item, rtdate;
+			item = event;
+			this.uberHeldEvent = event;
+			if(item._id) {
+				tEvt._id = item._id;
+			}
+			if(item.currentLocalStart || item.dtstart) {
+				var formatObj = {};
+				rtdate = new Date(item.currentLocalStart || item.dtstart);
+				// formatString = "EEE MMM d";
+				formatObj.date = "medium";
+				formatObj.weekday = "medium";
+				formatObj.dateComponents = "md"
+				var templateModel = {};
+				var template = new Template($L("#{dateStr}"));
+				//var todayStr= Mojo.Format.formatRelativeDate(rtdate.clearTime(), {date: "short"}).capitalize();
+				//templateModel.todayStr = todayStr;
+				templateModel.dateStr = Mojo.Format.formatDate(rtdate, formatObj);
+				var dateTxt = template.evaluate(templateModel);
+				if(!item.allDay) {
+					
+					var h = rtdate.getHours();
+					var m = rtdate.getMinutes();
+					tEvt.startT = (h<10 ? '0'+h: h) + ':' + (m<10 ? '0'+m : m);
+				} else if (item.allDay === true) {
+					tEvt.startT = $L("all ");
+				}
+			}
+			if(item.subject) {
+				tEvt.subject = dateTxt + " - " + item.subject;
+			}
+			if(item.location && item.location !== "") {
+				tEvt.location = item.location;
+				this.controller.get("uber-week-mp-map").removeClassName("disabled");
+			} else {
+				this.controller.get("uber-week-mp-map").addClassName("disabled");
+			}
+			if(item.calendarId) {
+				var calColor = this.calendarsManager.getCalColorStyle(item.calendarId);
+				tEvt.bgcolor = this.uberColors[calColor];
+			}
+			if(item.currentLocalEnd || item.dtend) {
+				if(!item.allDay) {
+					rtdate = new Date(item.currentLocalEnd || item.dtend);
+					var h = rtdate.getHours();
+					var m = rtdate.getMinutes();
+					tEvt.endT = (h<10 ? '0'+h: h) + ':' + (m<10 ? '0'+m : m);
+				} else if (item.allDay === true) {
+					tEvt.endT = $L("day ");
+				}
+			}
+			if(item.note) {
+				var wholeNote = item.note !== "\n" ? item.note : "";
+				var patt = /((.|\n|\r)*?)ICON=([a-z0-9_-]{1,20});((.|\n|\r)*)/;
+				if(wholeNote && wholeNote !== "\n" && wholeNote.length > 0) {
+					var result = wholeNote.match(patt);
+					if(result && result[3]) {
+						tEvt.cat = result[3];
+						if(tEvt.cat){
+							tEvt.catFormatted = 'url(/media/internal/.scrims/ubercalendar/icon-' + tEvt.cat + '.png) no-repeat center right;'
+						}
+						tEvt.note = result[1] + result[4];
+					} else {
+						tEvt.note = wholeNote;
+					}
+				}
+			}
+			var tEvtHtml = Mojo.View.render({object: tEvt, template: 'shared/ubertemplateitem'});
+			this.controller.get('uber-panel-event').update(tEvtHtml);
+		}
+		if(!this.uberHoldTimeout){
+			this.uberHoldTimeout = this.controller.window.setTimeout(function(){this.uberHeldEvent = false;this.uberHolding=false;this.uberMenuPanel.hide();}.bind(this), 5000);
+		} else {
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = this.controller.window.setTimeout(function(){this.uberHeldEvent = false;this.uberHolding=false;this.uberMenuPanel.hide();}.bind(this), 5000);
+		}
+	},
+	
+	findUberNextEvent: function(want){
+		if(this.uberHeldEvent && this.uberHeldDay !== undefined && this.uberHeldIdx !== undefined && want !== undefined){
+			var ended, data, day, beginWeekNoTime, aLen, eLen, maxD, nDay, nIdx;
+			var event;
+			beginWeekNoTime = this.getFirstDayOfWeek(this.app.getCurrentDateTime()).set({hour: 0, minute: 0, second: 0, millisecond: 0});
+			data = this.getFromCache(beginWeekNoTime.getTime());
+			nDay = this.uberHeldDay;
+			day = data.days[nDay];
+			aLen = day.allDayEvents.length;
+			eLen = day.events.length;
+			maxD = this.weekTest ? 5 : 7;
+			var needNewDay = (aLen + eLen) < 2;//true = only 1 event that day
+			if(!needNewDay) {
+				if(this.uberHeldEvent.allDay){
+					if(want === "prev"){
+						if(this.uberHeldIdx -1 <0){
+							needNewDay = true;
+						} else {
+							nIdx = this.uberHeldIdx -1;
+							event = day.allDayEvents[nIdx];
+						}
+					} else {// want next
+						if(aLen > this.uberHeldIdx+1){
+							nIdx = this.uberHeldIdx+1;
+							event = day.allDayEvents[nIdx];
+						} else { //check events
+							if(eLen > 0){
+								nIdx = 0;
+								event = day.events[nIdx];
+							} else {
+								needNewDay = true;
+							}
+						}
+					}
+					if(event){
+						var params = {event: event, whichDay: nDay, eIdx: nIdx};
+						return params;
+					}
+				} else {//events
+					if(want === "prev"){
+						if(this.uberHeldIdx -1 <0){//check all days
+							if(aLen === 0){
+								needNewDay = true;
+							} else {
+								nIdx = aLen -1;
+								event = day.allDayEvents[nIdx];
+							}
+						} else {
+							nIdx = this.uberHeldIdx -1;
+							event = day.events[nIdx];
+						}
+					} else {// want next
+						if(eLen > this.uberHeldIdx+1){
+							nIdx = this.uberHeldIdx+1;
+							event = day.events[nIdx];
+						} else {
+							needNewDay = true;
+						}
+					}
+					if(event){
+						var params = {event: event, whichDay: nDay, eIdx: nIdx};
+						return params;
+					}
+				}
+			}
+			
+			if(needNewDay){ //next or prev day
+				do {
+					if(want === "next"){//next should go to next all day event
+						nDay += 1;
+						if(nDay >= maxD){//no next this week
+							ended = true;
+							break;
+						}
+					} else {
+						nDay -= 1;
+						if(nDay < 0){//no prev this week
+							ended = true;
+							break;
+						}
+					}
+					day = data.days[nDay];
+					aLen = day.allDayEvents.length;
+					eLen = day.events.length;
+				} while(aLen + eLen <1);
+				if(!ended){
+					if(want === "next"){
+						if(aLen > 0){
+							event = day.allDayEvents[0];
+						} else {
+							event = day.events[0];
+						}
+						nIdx = 0;
+					} else {
+						if(eLen < 1){
+							nIdx = aLen-1;
+							event = day.allDayEvents[nIdx];
+						} else {
+							nIdx = eLen-1;
+							event = day.events[nIdx];
+						}
+					}
+					var params = {event: event, whichDay: nDay, eIdx: nIdx};
+					return params;
+				} else {// no event to be found
+					Mojo.Log.error("No next or previous event found");
+					return false;
+				}
+			}
+		}
+	},
+	
+	handleHeldPrev: function(){
+		if(this.uberHoldTimeout){
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = 0;
+		}
+		var args = this.findUberNextEvent("prev");
+		if(args){
+			this.handleEventsHold(args.event, null, null, null, null, args.whichDay, args.eIdx, null);
+		}
+	},
+	
+	handleHeldNext: function(){
+		if(this.uberHoldTimeout){
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = 0;
+		}
+		var args = this.findUberNextEvent("next");
+		if(args){
+			this.handleEventsHold(args.event, null, null, null, null, args.whichDay, args.eIdx, null);
+		}
+	},
+	
+	handleHeldEvent: function(){
+		if(this.uberHoldTimeout){
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = 0;
+		}
+		this.uberMenuPanel.hide();
+		//Mojo.Log.error("held event - launch edit");
+		this.uberHolding = false;
+		this.uberFirstTapFromHold = false;
+		if(this.uberHeldEvent){
+			this.handleEventsTap(this.uberHeldEvent, false);
+		}
+	},
+	
+	handleHeldMap: function(){
+		if(this.uberHoldTimeout){
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = 0;
+		}
+		this.uberMenuPanel.hide();
+		//Mojo.Log.error("held map - launch map");
+		this.uberHolding = false;
+		this.uberFirstTapFromHold = false;
+		if(this.uberHeldEvent && this.uberHeldEvent.location && this.uberHeldEvent.location !==""){
+			this.app.getAppManagerService().launchMaps (this.controller, this.uberHeldEvent.location, false);
+		}
+		return;
+	},
+	
+	handleHeldDelete: function(){
+		if(this.uberHoldTimeout){
+			this.controller.window.clearTimeout(this.uberHoldTimeout);
+			this.uberHoldTimeout = 0;
+		}
+		this.uberMenuPanel.hide();
+		//Mojo.Log.error("held delete ");
+		this.uberHolding = false;
+		this.uberFirstTapFromHold = false;
+		if(this.uberHeldEvent){
+			this.fromDefaultTap = false;
+			this.eventToBeDeleted = this.uberHeldEvent;
+			this.deletedeventId = this.uberHeldEvent._id;
+			this.gotEventInlineDelete(this.uberHeldEvent);
+		}
+	},
+	
+	handleEventsTap: function(event, tapEvent) {
+		//copied event saved open in edit scene
+		if(tapEvent){Mojo.Event.stop(tapEvent);}
+		if(this.uberHolding){//hold fires tap so make sure we're not from that
+			if(this.uberFirstTapFromHold){
+				this.uberFirstTapFromHold = false;
+				return;
+			} else {
+				this.uberHolding = false;
+				if(this.uberHoldTimeout){
+					this.controller.window.clearTimeout(this.uberHoldTimeout);
+					this.uberHoldTimeout = 0;
+					this.uberMenuPanel.hide();
+				}
+			}
+		}
+		this.fromDefaultTap = false;
+		if (this.orangeKeyDown == true) {
+			//create new from old
+			var start = new Date();
+			start.set({	minute: 0, second: 0, millisecond: 0 });
+			var startTS = start.getTime(); //set it up on today's current hour
+			var duration = event.dtend - event.dtstart;
+			var endTS = startTS + duration;
+			this.orangeKeyDown = false;
+			this.copyEvt = Object.clone(event);
+			this.copyEvt.calendarId = event.calendarId;
+			this.copyEvt._id = undefined;
+			this.copyEvt.dtstart = startTS;
+			this.copyEvt.startTimestamp = startTS;
+			this.copyEvt.dtend = startTS + duration;
+			this.copyEvt.endTimestamp = startTS + duration;
+			if(this.copyEvt.parentId) {this.copyEvt.parentId = undefined;}
+			if(!this.copyEvt.tzId){
+				this.copyEvt.tzId = this.app.getTimezoneName();
+			}
+			var newEvent = JSON.parse(JSON.stringify(this.copyEvt))
+			this.db.createEvent(newEvent, this.copiedEvent.bind(this), function(response) {Mojo.Log.error(response.errorText)});
+		} else if(this.metaKeyDown == true || tapEvent.metaKey === true) {
+				// Confirm with the user they want to delete the event
+				//Mojo.Log.info("handleEventsTap: meta key + tap = Delete event " + Object.toJSON(event));
+				// Retrieve the event from the calendar service so we can figure
+				// out whether it's recurring or not
+				this.eventToBeDeleted = event;
+				this.deletedeventId = event._id;
+				// Reset the metaKeyDown to handle the case the user lets go
+				// of the meta key when the Delete confirmation dialog is up
+				this.metaKeyDown = false;
+				this.gotEventInlineDelete(event);
+		} else {
+			if(event._id) {
+			this.fromEditEventsCallBack = true;
+			var idString = event._id+"-"+event.currentLocalStart+"-"+event.currentLocalEnd;
+			this.controller.stageController.pushScene('edit', idString, new Date(event.dtstart), false, event.calendarId, event.subject, false, this.handleEditEventsCallBack);
+			}
+		}
+	},
+	
+	editEventsCallBack: function() {
+		// something happened in edit scene render week
+		this.fromDefaultTap = false;
+		var beginWeekNoTime = this.getFirstDayOfWeek(this.app.getCurrentDateTime()).set({hour: 0, minute: 0, second: 0, millisecond: 0});
+		var week = this.getFromCache(beginWeekNoTime.getTime());
+		this.renderWeek(this.THIS_WEEK, week);
+		this.fromEditEventsCallBack = true;
+	},
+	
+	editFromTemplate: function(event, editingTemplate) {
+		// going from template to edit new event
+		this.fromEditEventsCallBack = true;
+		this.controller.stageController.pushScene('edit', event._id, new Date(event.dtstart), event.allDay, event.calendarId, event.subject, false, this.handleEditEventsCallBack, editingTemplate);
+	},
+	
+	handleDefaultEventsTap: function(event, x, y) {
+		// no eventsTap handler in this space, find col run tapHandler
+		Event.stop(event);
+		if(this.uberHolding){
+			if(this.uberHoldTimeout){
+				this.controller.window.clearTimeout(this.uberHoldTimeout);
+				this.uberHoldTimeout = 0;
+				this.uberMenuPanel.hide();
+			}
+			this.uberMenuPanel.hide();
+			//Mojo.Log.error("default tap should close and return");
+			this.uberHolding = false;
+			this.uberFirstTapFromHold = false;
+			return;
+		}
+		if (this.metaKeyDown == true) {
+			// nothing to copy here reset metakeydown
+			this.metaKeyDown = false;
+		}
+		if (this.orangeKeyDown == true) {
+			// nothing to copy here reset metakeydown
+			this.orangeKeyDown = false;
+		}
+		if (x); {
+			var col = this.whichDayCol(x);
+			this.fromDefaultTap = true;
+			this.showSelectedHandler(col);
+			this.tapHandler(col);
+			this.selectedCol = -1;
+		}
+	},
+	
+	handleMini: function() {
+		this.metaKeyDown = false;
+	},
+	
+	showSelectedEventsTap: function(left, top, width, height) {
+		// eventsTap handler highlight event
+		if ((left) && (top) && (width) && (height)) {
+			// draw shade on event
+			var selectedColor = "rgba(2, 2, 2, 0.25)";
+			this.evtapcontext.fillStyle = selectedColor;
+			this.evtapcontext.fillRect(left, top, width, height);
+		}
+	},
+	
+	clearSelectedEventsTap: function(left, top, width, height) {
+		// no eventsTap handler, clear highlight day tapHandler
+		if ((left) && (top) && (width) && (height)) {
+			// clear shade on event
+			this.evtapcontext.clearRect(left, top, width, height);
+		}
+	},
+	
 	showSelectedHandler: function(col) {
 		this.selectedCol = col;
 		
@@ -1079,7 +2290,66 @@ var WeekAssistant = Class.create({
 		this.renderWeek(this.THIS_WEEK, week);
 	},
 	
+	// Handles taps for events
+	gotEventInlineDelete: function(event) {
+		//Mojo.Log.info("gotEventInlineDelete");
+		var targetEvent = event;
+		// If the user is trying to delete a new event (cancelling the new event) 
+		// [new event's parentId is undefined]
+		// or
+		// if the event is NOT a recurring event, show the standard delete warning
+		if ((!targetEvent.rrule || !targetEvent.rrule.freq) && !targetEvent.parentId){
+			this.controller.showDialog({
+				template: 'shared/confirm-deleteevent',
+				assistant: new DeleteEventConfirmDialogAssistant(this, targetEvent, targetEvent.dtstart),
+				preventCancel: true
+			});
+		} 
+		else {
+			// If the event is a recurring event, show the warning allowing users to
+			// delete the series, the single event, or cancel
+			this.controller.showDialog({
+				template: 'shared/confirm-deleterecurringevent',
+				assistant: new DeleteEventConfirmDialogAssistant(this, targetEvent, targetEvent.currentLocalStart),
+				preventCancel: true
+			});
+		}
+		
+		// Re-render the event (un-tapped)
+		this.eventToBeDeleted = null;
+		this.editEventsCallBack();
+	},
+	
+	gotEventInlineDeleteFailed: function(response) {
+		this.eventToBeDeleted = null;
+		this.editEventsCallBack();
+	},
+	
+	deletedEvent: function(response) {
+		if (response.returnValue === false) {
+			Mojo.Log.error("Failed to delete event: %j", response);
+			return;
+		}
+				
+		// Remove the reminder for this event
+		if (this.deletedEventId !== undefined) {
+			this.app.getReminderManager().closeRemindersByEventId([this.deletedEventId]);
+		}
+	},
+	
 	tapHandler: function(col) {
+		// see if meta tap is active
+		if (this.metaKeyDown == true) {
+			// should not do anything here with a meta + tap
+			this.metaKeyDown = false;
+			//return;
+		}
+		// see if orange key is active
+		if (this.orangeKeyDown == true) {
+			// should not do anything here with a orange key + tap
+			this.orangeKeyDown = false;
+			//return;
+		}
 		var dayofweek= this.getFirstDayOfWeek (this.app.getCurrentDateTime());
 		dayofweek.addDays(col);
 			
@@ -1110,14 +2380,46 @@ var WeekAssistant = Class.create({
 		Mojo.Event.stop (event);
 
 		var listItems = this.calendarsManager.buildCalendarsMenu (true /*includeAll*/, true /*includeReadOnly*/, true /*includeExcludedFromAll*/);
- 
+		
+		// UC groups items
+		if(this.userUberCalGroups && this.userUberCalGroups.length > 0) {
+			var viewOptionsItem = listItems.splice(-1,1);
+			var len = this.userUberCalGroups.length;
+			if(this.ucGroupsFirst){
+				var allCals = listItems.splice(0,1);
+				for(var i=len-1; i>-1; i--) {
+					var grp = this.userUberCalGroups[i];
+					if(grp && grp.rId && grp.groupname) {
+						listItems.unshift( {label: grp.groupname, command: "rId:" + grp.rId, secondaryIcon: 'menu_all'} );
+					}
+				}
+				listItems.unshift( {label: $L("UberCalendar Groups")} );
+				listItems.unshift({label: $L("All calendars"),
+									command: 'all',
+									secondaryIcon: 'menu_all'
+								});
+			} else {
+				listItems.push( {label: $L("UberCalendar Groups")} );
+				for(var i=0; i<len; i++) {
+					var grp = this.userUberCalGroups[i];
+					if(grp && grp.rId && grp.groupname) {
+						listItems.push( {label: grp.groupname, command: "rId:" + grp.rId, secondaryIcon: 'menu_all'} );
+					}
+				}
+			}
+			listItems.push({
+				label: $L("Calendar View Options..."),
+				command: "viewOptions"
+			});
+		}
+		
 	    this.controller.popupSubmenu(
 		{   items			: listItems
 		,	manualPlacement	: true
 		,	onChoose		: this.onCalendarPicked
 //		,	placeNear		: event.target
 		,	popupClass		: "cal-selector-popup"
-		,	toggleCmd		: this.calendarsManager.getCurrentCal()
+		,	toggleCmd		: this.app.uberToggleGroupsCmd(this.uberGroups.inUse, "rId:" + this.uberGroups.rId)
 	    });
 	}
 
@@ -1126,9 +2428,35 @@ var WeekAssistant = Class.create({
 
 		if (value == "viewOptions"){
 			this.controller.stageController.pushScene ("prefs-options");
+			this.fromEditEventsCallBack=true;
 			return;
 		}
-
+		
+		//uc groups setup
+		if(value.indexOf("rId:") !== -1) {
+			var idx = value.indexOf(":") + 1;
+			rID = value.slice(idx);
+			this.app.setUberGroups(rID);
+			this.uberGroups = {inUse: true, rId: rID};
+			value = 'all';
+		} else {
+			this.app.setUberGroups(false);
+			this.uberGroups = {inUse: false, rId: ""};
+			this.ucGroupWorkWeek = false;
+		}
+		if(this.enhancedView && this.uberGroups.inUse === true){
+			this.getUCGroupsProps();
+			if(this.ucGroupWorkWeek !== undefined){
+				this.workTest = !!this.ucGroupWorkWeek;
+				this.uberSetWidth(this.ucGroupWorkWeek);
+			}
+		} else if(this.enhancedView && this.uberGroups.inUse === false){
+			this.workTest = !!this.workWeekOnly;
+			this.uberSetWidth(this.workWeekOnly);
+		} else {
+			this.workTest = false;
+		}
+		
 		this.calendarsManager.setCurrentCal (value);
 		this.clearCache();
 		this.updateAll();
@@ -1142,11 +2470,15 @@ var WeekAssistant = Class.create({
 
 		var firstDayOfWeek	= new Date(week);
 		var prefs			= this.prefsManager.getPrefs();
-
-		if (prefs && firstDayOfWeek.getDay() != (prefs.startOfWeek - 1)) {
+		
+		if (this.enhancedView && this.workTest && firstDayOfWeek.getDay() != 1) {
+			firstDayOfWeek.moveToDayOfWeek (1, -1);
+		} else if (this.enhancedView && this.workTest && firstDayOfWeek.getDay() == 1) {
+			return firstDayOfWeek;
+		} else if (prefs && firstDayOfWeek.getDay() != (prefs.startOfWeek - 1)) {
 			firstDayOfWeek.moveToDayOfWeek ((prefs.startOfWeek - 1), -1);
 		}
-
+		//Mojo.Log.error('week assistant:  firstday of week ---- ' + firstDayOfWeek);
 		return firstDayOfWeek;
 	},
 
@@ -1156,20 +2488,45 @@ var WeekAssistant = Class.create({
 		var prefs			= this.prefsManager.getPrefs();
 		var lastDay			= 6;
 
-		if (prefs && prefs.startOfWeek - 1 !== 0) {
+		if (this.enhancedView && this.workTest) {
+			lastDay = 0;
+		} else if (prefs && prefs.startOfWeek - 1 !== 0) {
 			lastDay = (prefs.startOfWeek - 1) - 1;
 		}
 
 		if (lastDayOfWeek.getDay() != lastDay) {
 			lastDayOfWeek.moveToDayOfWeek(lastDay);
 		}
-
+		//Mojo.Log.error('week assistant:  lastday of week ---- ' + lastDayOfWeek);
 		return lastDayOfWeek;
 	},
 	
 	getFromCache: function(weekDate) {
 		return WeekAssistant.weekCache.get(this.keyFromDate(weekDate));
 	},	
+	getCalId :function(){
+		var currentCal	= this.calendarsManager.getCurrentCal();
+		var defaultCalId= currentCal;
+
+		if (currentCal === "all") {
+			// Create an event in the calendar specified by the defaultCalId preference
+			defaultCalId= this.prefsManager.getDefaultCalendar();
+			var manager	= this.calendarsManager;
+
+			if (defaultCalId === 0) {
+				defaultCalId = manager.getLocalCalendarId();
+			}
+
+			// Check to see if the calendarId is a valid one
+			if (manager.getCalName(defaultCalId) === undefined) {
+				// The default calendar doesn't exist anymore so let's just create it
+				// in Local
+				defaultCalId = manager.getLocalCalendarId();
+			}
+		}
+
+		return defaultCalId;
+	},
 	
 	isCacheEntrySubscribed: function(weekDate) {
 		return WeekAssistant.cacheSubscribed.get(this.keyFromDate(weekDate));
@@ -1219,12 +2576,12 @@ var WeekAssistant = Class.create({
 		// TODO: Extract this and all other views' reminder handling to common component:
 		// i.e. reminder-assistant*.js, new app.menu.js
 		if (this.reminders.getNumReminders() === 0) {
-			if (this.reminderMenuItemId == this.appMenuModel.items[4].id) {
-				this.appMenuModel.items.splice (4, 1);
+			if (this.reminderMenuItemId == this.appMenuModel.items[5].id) {
+				this.appMenuModel.items.splice (5, 1);
 				this.controller.modelChanged (this.appMenuModel);
 			}
-		} else if (this.reminderMenuItemId != this.appMenuModel.items[4].id) {
-			this.appMenuModel.items.splice (4, 0,
+		} else if (this.reminderMenuItemId != this.appMenuModel.items[5].id) {
+			this.appMenuModel.items.splice (5, 0,
 			{	command	: 'reminders'
 			,	id		: this.reminderMenuItemId
 			,	label	: $L('Missed reminders...')
diff --git a/usr/palm/applications/com.palm.app.calendar/app/models/calendar-prefs-manager.js b/usr/palm/applications/com.palm.app.calendar/app/models/calendar-prefs-manager.js
index a06a493..7071186 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/models/calendar-prefs-manager.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/models/calendar-prefs-manager.js
@@ -43,16 +43,22 @@ var CalendarPrefsManager = Class.create ({
 
 
 	loadFromDB: function() {
-		this.loadRequest = this.db.getCalendarPrefs (this.onLoadFromDB, this.onLoadFromDBFailed);
+		this.loadRequest = this.db.getCalendarPrefs (this.onLoadFromDB, this.onLoadFromDBFailed, true);
 	},
 
 
 	onLoadFromDB: function (response, request) {
+		if(response.fired) {
+			this.loadRequest = this.db.getCalendarPrefs (this.onLoadFromDB, this.onLoadFromDBFailed, true);
+		
+			return;
+		}
+		
 		Mojo.Log.info("getcalendarPrefs Success: %j", response);
 
 		// Release the db service request:
-		this.loadRequest.cancel();
-		this.loadRequest = undefined;
+		//this.loadRequest.cancel();
+		//this.loadRequest = undefined;
 		
 		var results = response && response.results;
 		var resultsLength = results && results.length;
@@ -88,8 +94,9 @@ var CalendarPrefsManager = Class.create ({
 			//delete the spares			
 			Foundations.Data.DB.del(idsToDelete);
 		}
-			
-			
+		if(this.prefs.blinkNotification == undefined) {
+			this.prefs.blinkNotification = true;
+		}
 		//Check to make sure the user didn't change country, affecting start of week since last time we saved prefs
 		var startOfWeek = Mojo.Format.getFirstDayOfWeek()+1;
 		
@@ -109,8 +116,8 @@ var CalendarPrefsManager = Class.create ({
 		Mojo.Log.error ("PrefsManager: getCalendarsPrefs service call failed: %j", response);
 
 		// Release the db service request:
-		this.loadRequest.cancel();
-		this.loadRequest = undefined;
+		//this.loadRequest.cancel();
+		//this.loadRequest = undefined;
 
 		this.setDefaults();
 	},
@@ -132,6 +139,8 @@ var CalendarPrefsManager = Class.create ({
 		,	startOfWeek					: startOfWeek
 		,	startTimeOfDay				: -226799992
 		,	userChangedStartOfWeek		: false
+		,	blinkNotification			: true
+		,	uberAlarmDura				: '0.5'
 		};
 
 		// Cache the db service request to prevent if from being garbage collected:
@@ -167,7 +176,7 @@ var CalendarPrefsManager = Class.create ({
 		this.prefs._rev = results.rev;
 
 		// Update preference change observers:
-		this.notifyObservers();
+		//this.notifyObservers();
 	},
 
 	
diff --git a/usr/palm/applications/com.palm.app.calendar/app/models/calendars-manager.js b/usr/palm/applications/com.palm.app.calendar/app/models/calendars-manager.js
index becc081..ae2d740 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/models/calendars-manager.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/models/calendars-manager.js
@@ -474,6 +474,21 @@ var CalendarsManager = Class.create (
 		return cal.syncSource;
 	},
 	
+	getRawUsername: function(calId) {
+		var cal = this.getCal(calId);
+		var acct = cal && this.rawAccounts[cal.accountId];
+		if(cal && cal.syncSource === "Local"){
+			return undefined;
+		}
+		if(acct === undefined){
+			return undefined;
+		}
+		
+		if(acct && acct.username){
+			return acct.username;
+		}
+	},
+	
 	getCalIcon: function(calId) {
 		var cal = this.getCal(calId);
 		return cal && this.getCalAccountIcon(cal.accountId);
@@ -733,6 +748,52 @@ var CalendarsManager = Class.create (
 			}
 		}
 	},
+	
+	getAdvReqCalList: function(){
+		var tempList = [];
+		var accounts = _.values(this.rawAccounts);
+		//console.error("Accounts: (" + accounts.length + ")" + JSON.stringify(accounts));
+		
+		if (accounts) {
+			var syncingAccounts = accounts.filter(function (account) {
+				var EAS = false;
+				if(account.capabilityProviders && account.capabilityProviders.length){
+					var len = account.capabilityProviders.length;
+					for(var i=0;i<len;i++){
+						if(account.capabilityProviders[i] && account.capabilityProviders[i].implementation){
+							EAS = account.capabilityProviders[i].implementation.indexOf("com.palm.eas") !== -1;
+							if(EAS === true) {break;}
+						}
+					}
+				}
+				return account.provider && account.provider.sync && !EAS;
+			});
+	
+			var acct, obj = {}, sAlen = syncingAccounts.length;
+			for(var j=0;j<sAlen;j++){
+				acct = syncingAccounts[j];
+				obj = {
+					_id: acct._id,
+					alias: acct.alias,
+					provider: acct.provider,
+					accountName: acct.accountName,
+					username: acct.username
+				};
+				if(acct.provider && acct.provider.icon && acct.provider.icon.loc_32x32) {
+					// There is an icon in this account's template just for calendars
+					obj.icon = acct.provider.icon.loc_32x32;
+				}else {
+					var accountTemplate = acct && this.accountTemplates[acct.templateId];
+					if (accountTemplate && accountTemplate.icon && accountTemplate.icon.loc_32x32) {
+						obj.icon =  accountTemplate.icon.loc_32x32;
+					}
+				}
+				//console.error("AdvReqsList num: " + j + ", info " + JSON.stringify(obj));
+				tempList.push(obj);
+			}
+		}
+		return tempList;
+	},
 
 	syncAllCalendars: function(controller) {
 		if (controller) {
@@ -755,9 +816,12 @@ var CalendarsManager = Class.create (
 		console.log("Attempting to sync account: " + JSON.stringify(account));
 		var activity = new Foundations.Control.Activity(
 			"sync " + account._id,									// name
-			"Background sync activity for account " + account._id	// description
+			"Background sync activity for account " + account._id,	// description
+			false // !isBackground i.e. run in foreground to start right away
 		);
 		activity.setUserInitiated(true);
+		//activity.setForeground(true);
+		activity.setReplace(true);
 		activity.setCallback(account.provider.sync, {accountId: account._id});
 		activity.start().then(function (future) {
 			var result = future.result;
diff --git a/usr/palm/applications/com.palm.app.calendar/app/models/database.manager.js b/usr/palm/applications/com.palm.app.calendar/app/models/database.manager.js
index fcc3ba9..e02c80c 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/models/database.manager.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/models/database.manager.js
@@ -20,14 +20,15 @@ var DatabaseManager = Class.create ({
 				});
 	},
 	
-	getCalendarPrefs:function(successCB,failureCB){
+	getCalendarPrefs:function(successCB,failureCB,watchChanges){
 		Mojo.Log.info("**********In getCalendarPrefs");
 		return new Mojo.Service.Request(DatabaseManager.identifier , {
 			method: "find",
 			parameters: {
 					query:{
 						from:DatabaseManager.calendarPrefsTable
-					}
+					},
+					watch: watchChanges
 			},
 			onSuccess: successCB,
 			onFailure: failureCB
@@ -230,6 +231,65 @@ var DatabaseManager = Class.create ({
 			
 	},
 	
+	clearEventsFromDeletedCalendar: function(calId, callBack){
+		//from edit scene undefined calType from a removed account, find and delete them
+		var query = {	"select": ["_id", "subject"]
+					,	"from": DatabaseManager.eventTable
+					,	"where":[{"prop": "calendarId", "op": "=", "val": calId}]
+					};
+		
+		var future = Foundations.Data.DB.find(query);
+		var eventIds = [];
+		
+		future.then(
+			function(){
+				var result = future.result;
+				var delEvents = result.results;
+				var numEvents = delEvents && delEvents.length;
+				for(var i = 0 ; i < numEvents; i++){
+					var event = delEvents[i];
+					eventIds.push(event._id);
+					console.error("found to be del: " + event.subject + ", id: " + event._id);			
+				}
+				future.result = {returnValue: true};
+			},
+			function(){
+				//If the query failed, just move the parent.  Children will be orphaned.
+				var exception = future.exception;
+				future.result = {returnValue: true};
+			}
+		);
+		
+		future.then(function (){
+			// here we delete
+			//console.error("In delete step!!!!");
+			var result = future.result;
+			// var delEventsOp = {
+				// method: "del",
+				// params: {
+					// "ids": eventIds,
+				// }
+			// };
+			console.error("Deleting: " + eventIds.length + " undefined events");
+			return new Mojo.Service.Request(DatabaseManager.identifier , {
+				method: "batch",
+				parameters: {"operations": [
+								{method: "del",
+									params: {
+										"ids": eventIds,
+										"purge": true
+									}
+							}]
+				},
+				onSuccess: callBack,
+				onFailure: callBack
+			});
+			//return Foundations.Data.DB.execute("batch", {operations:[delEventsOp]});
+		});
+		//callBack(future);
+		return;
+	},
+	
 	//Used for adding an exception to a parent, and creating the exception child event.
 	updateParentAddChild: function(parentSlice, childEvent, successCB, failureCB){
 		Mojo.Log.info("$$$$$$$$$$$$ In updateParentAddChild %j, %j", parentSlice, childEvent);
@@ -368,7 +428,12 @@ var DatabaseManager = Class.create ({
 					"ids": eventIds
 				}
 			};
-		
+			//make sure there are no eventIds in the cleanedEvents
+			for(var i=0; i<cleanedEvents.length; i++) {
+				if(cleanedEvents[i] && cleanedEvents[i]._id) {
+					cleanedEvents[i]._id = undefined;
+				}
+			}
 			//Add copies of the event and any children, now with the new kind.
 			var putEventsOp = {
 				method: "put",
diff --git a/usr/palm/applications/com.palm.app.calendar/app/models/reminder-manager.js b/usr/palm/applications/com.palm.app.calendar/app/models/reminder-manager.js
index 3eaf78f..a5b291f 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/models/reminder-manager.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/models/reminder-manager.js
@@ -8,13 +8,211 @@ var ReminderManager = Class.create ({
 	initialize: function() {
 		this.reminders = {};
 		this.observers = {};
+		this.snoozedList = [];
+		this.excludedCals = [];
 		this.displayObservers = {};
 		this.liveScenes = {};
+		this.perCalAlarms = false;
+		this.alarmsFollowGroups = false;
+		this.showReminderDashboard = true;
+		this.stopAutoClose = true;
+		this.snzListCookie = new Mojo.Model.Cookie("snoozedList");
+		this.excCalsCookie = new Mojo.Model.Cookie("excCalAlarms");
+		try {
+			if(this.snzListCookie) {
+				var snzedlistcookie = this.snzListCookie.get();
+				if (snzedlistcookie) {
+					if(snzedlistcookie.snoozedlist) {
+						this.snoozedList = snzedlistcookie.snoozedlist;
+					}
+				}
+			}
+			if(this.excCalsCookie) {
+				var excedcalscookie = this.excCalsCookie.get();
+				if (excedcalscookie) {
+					if(excedcalscookie.exccalslist) {
+						this.excludedCals = excedcalscookie.exccalslist;
+					}
+				}
+			}
+		} catch (e) { Mojo.Log.error( "RM bad cookie get init" + e.errorText) }
+		this.snoozeCookie = new Mojo.Model.Cookie("snoozeCookie");
+		if (this.snoozeCookie) {
+			var snzcookie = this.snoozeCookie.get();
+			if (snzcookie) {			
+				if(snzcookie.showReminderDashboard !== undefined) {
+					this.showReminderDashboard = snzcookie.showReminderDashboard;
+				} else {
+					this.showReminderDashboard = true;
+				}
+				if(snzcookie.stopAutoClose !== undefined)	{
+					this.stopAutoClose = snzcookie.stopAutoClose;
+				} else {
+					this.stopAutoClose = true;
+				}
+				if(snzcookie.perCalAlarms !== undefined)	{
+					this.perCalAlarms = snzcookie.perCalAlarms;
+				} else {
+					this.perCalAlarms = false;
+				}
+				if(snzcookie.alarmsFollowGroups !== undefined)	{
+					this.alarmsFollowGroups = snzcookie.alarmsFollowGroups;
+				} else {
+					this.alarmsFollowGroups = false;
+				}
+			}
+		}
+		if(this.alarmsFollowGroups){
+			this.excludedCals = this.setupAlarmsFollowGroups();
+		}
 	},
 	
 	cleanup: function(){		
 	},
 	
+	readSnoozedList: function () {
+		this.snoozedList = [];
+		this.excludedCals = [];
+		if(this.snzListCookie) {
+			var snzedlistcookie = this.snzListCookie.get();
+			if (snzedlistcookie) {
+				if(snzedlistcookie.snoozedlist) {
+					this.snoozedList = snzedlistcookie.snoozedlist;
+				}
+			}
+		}
+		if(this.excCalsCookie) {
+			var excedcalscookie = this.excCalsCookie.get();
+			if (excedcalscookie) {
+				if(excedcalscookie.snoozedlist) {
+					this.excludedCals = excedcalscookie.exccalslist;
+				}
+			}
+		}
+	},
+	
+	setupAlarmsFollowGroups: function (){
+		var excludes = [];
+		try {
+			var uberGrpsCookie = new Mojo.Model.Cookie("uberGrpsCookie");
+			var rId, uberGrps = {};
+			if(uberGrpsCookie) {
+				var uberGrps = uberGrpsCookie.get();
+				if(uberGrps && uberGrps.inUse !== undefined && uberGrps.inUse === true && uberGrps.rId) {
+					rId = uberGrps.rId;
+					if(rId){
+						var userCalGrpsCookie = new Mojo.Model.Cookie("ucGroupsCookie");
+						var userCalGrps = [];
+						if(userCalGrpsCookie) {
+							var calGrps = userCalGrpsCookie.get();
+							if(calGrps) {
+								if(calGrps.usercalgroups && calGrps.usercalgroups.length > 0 ) {
+									userCalGrps = calGrps.usercalgroups;
+									if(userCalGrps && userCalGrps.length > 0 &&  userCalGrps[0] && userCalGrps[0].rId !== undefined) {
+										return userCalGrps;
+									} else {
+										userCalGrps = undefined;
+									}
+								}
+							}
+						} else { return excludes;}
+						if(userCalGrps && userCalGrps.length > 0){
+							var includes;
+							for(var i=0; i<userCalGrps.length; i++){
+								if(rId === userCalGrps[i].rId){
+									includes = userCalGrps[i].includes;
+									break;
+								}
+							}
+							if(includes && includes.length > 0){
+								var app, calsMgr;
+								app = getAppAssistant();
+								app && calsMgr = app.getCalendarsManager();
+								if(calsMgr){
+									var tempCalModel = calsMgr.getCalendarsModel();
+									var numAcc = tempCalModel.length;
+									for(var i = 0; i< numAcc; i++) {
+										var calendars = tempCalModel[i];
+										var numCal = calendars.length;
+										for(var j=0; j < numCal; j++) {
+											var cal = calendars[j];
+											if(includes.indexOf(cal.id) === -1){
+												excludes.push(cal.id);
+											}
+										}
+									}
+								}
+							}
+						}
+					}
+				}
+			}
+		} catch (e) { Mojo.Log.error( "RM bad cookie get init groups alarm follows groups" + e.errorText); }
+		Mojo.Log.error( "RM init groups alarm follows groups excludes::: " + excludes);
+		return excludes;
+	},
+	
+	saveSnoozedList: function () {
+		if(this.snzListCookie) {
+			this.snzListCookie.put({snoozedlist: this.snoozedList});
+		}
+	},
+	
+	findSnoozedListItem: function (eId) {
+		var evtId = eId;
+		var snzdList = this.snoozedList;
+		if(snzdList.length !== 0) {
+			for(var idx = 0; idx < snzdList.length; idx++) {
+				if(snzdList[idx].eventId == evtId) {
+					return snzdList[idx].lastSnoozedTS;
+				}
+			}
+		} else {
+			return -1;
+		}
+	},
+	
+	updateExcCals: function(exCals){
+		this.excludedCals = [];
+		if(exCals && exCals.length > 0){
+			for(var i=0, len = exCals.length; i < len; i++){
+				if(exCals[i] && exCals[i] != undefined){
+					this.excludedCals.push(exCals[i]);
+				}
+			}
+		} else {
+			this.excludedCals = [];
+		}
+		Mojo.Log.error("reminders manager :::::::::::: " + this.excludedCals);
+	},
+	
+	updateSnoozedListItem: function(eId, snoozeTS, deleteIt) {
+		if(this.snoozedList.length === 0) {
+			if(snoozeTS) {
+				this.snoozedList.push({eventId: eId, lastSnoozedTS: snoozeTS});
+			} else if(deleteIt === true) {
+				return;
+			}
+		} else {
+			for(var idx=0; idx < this.snoozedList.length; idx++) {
+				if(eId == this.snoozedList[idx].eventId) {
+					if(snoozeTS){
+						this.snoozedList[idx].lastSnoozedTS = snoozeTS;
+					} else if(deleteIt === true) {
+						this.snoozedList.splice(idx, 1);
+					}
+				} else {
+					if(snoozeTS) {
+						this.snoozedList.push({eventId: eId, lastSnoozedTS: snoozeTS});
+					} else if(deleteIt === true) {
+						return;
+					}
+				}
+			}
+		}
+		this.saveSnoozedList();
+	},
+	
 	logReminders: function(){
 		Mojo.Log.info("==========================================================START");
 		var i = 0;
@@ -36,7 +234,7 @@ var ReminderManager = Class.create ({
 		}
 
 		var remindersLength = reminders.length;
-		var reminder;
+		var reminder, cleanRem = [], toBeClosedIds = [];
 		
 		if(remindersLength === 0){
 			return;
@@ -60,15 +258,42 @@ var ReminderManager = Class.create ({
 			}
 			this.checkForReplacement(reminder);
 			Mojo.Log.info("========= RM: addReminders: adding "+reminder._id);
-			this.reminders[reminder._id] = reminder;
+			if((this.perCalAlarms || this.alarmsFollowGroups) && this.excludedCals && this.excludedCals.length > 0){
+				Mojo.Log.error("reminders manager :  testing:"+reminder.subject+", id: " + reminder.calendarId + ",   indexOf:  " +this.excludedCals.indexOf(reminder.calendarId)+ ",  :excl cals: " + this.excludedCals);
+				if(this.excludedCals.indexOf(reminder.calendarId) !== -1){
+					toBeClosedIds.push(reminder);
+				} else {
+					cleanRem.push(reminder);
+					this.reminders[reminder._id] = reminder;
+				}
+			} else {
+				this.reminders[reminder._id] = reminder;
+			}
+		}
+		if((this.perCalAlarms || this.alarmsFollowGroups) && this.excludedCals && this.excludedCals.length > 0){
+			if(cleanRem){
+				//reminders = [];
+				reminders = cleanRem;
+			}
+			if(toBeClosedIds && toBeClosedIds.length > 0){
+				for(var i=0;i<toBeClosedIds.length;i++){
+					this.updateSnoozedListItem(toBeClosedIds[i].eventId, 0, true);
+					delete this.reminders[toBeClosedIds[i]];
+					PalmCall.call("palm://com.palm.service.calendar.reminders", "onDismiss", 
+						{"reminderId": toBeClosedIds[i]._id, "eventId": toBeClosedIds[i].eventId, "startTime": toBeClosedIds[i].startTime});
+				}
+			}
+			remindersLength = reminders.length;
 		}
-		
 		//assume that if we've received something to add, we have something to show.  And whatever it is, it's in the
 		//list we just got.
-		if(remindersLength === 1){
+		if(remindersLength === 0){
+			reminder = undefined;
+			this.notifyDisplayObservers();
+			//reminder = this.findAnotherReminder("show");
+		} else if(remindersLength === 1){
 			reminder = reminders[0];
-		}
-		else{			
+		} else {			
 			reminder = this.whichReminderToShow(reminders);	
 		}
 		
@@ -160,6 +385,9 @@ var ReminderManager = Class.create ({
 		var reminderIdsLength = reminderIds.length;				
 		for(var i = 0; i < reminderIdsLength; i++){
 			Mojo.Log.info("========= RM: removeReminders: deleting "+reminderIds[i]);	
+			if(this.reminders && this.reminders[reminderIds[i]] && this.reminders[reminderIds[i]].eventId && this.reminders[reminderIds[i]].eventId != undefined && this.reminders[reminderIds[i]].eventId != null ) {
+				this.updateSnoozedListItem(this.reminders[reminderIds[i]].eventId, 0, true);
+			}
 			delete this.reminders[reminderIds[i]];
 		}		
 		this.notifyObservers();
@@ -171,24 +399,54 @@ var ReminderManager = Class.create ({
 	removeAllReminders: function(){
 		this.reminders = {};		
 		this.notifyObservers();		
+		this.snoozedList = [];
+		this.saveSnoozedList();
 	},
 	
 	//called by the reminder assistant
 	//sets the state of the reminder to snoozed, launches the service to update the snooze time, and 
 	//displays the next reminder
-	snoozeReminder: function(reminder){
+	snoozeReminder: function(reminder, snz, autoClose){
 		Mojo.Log.info("========= RM: snoozeReminder: in");
 		reminder.state = ReminderManager.SNOOZED;
 		Mojo.Log.info("========= RM: snoozeReminder: overwriting "+reminder._id);
 		this.reminders[reminder._id] = reminder;
+		//snoozeTS is in millisecs
+		var snoozeTS = snz;
+		var autoCloseT = autoClose;
+		if(snoozeTS != undefined && snoozeTS != null) {
+			if(autoCloseT != undefined && autoCloseT != null) {
+				if(snoozeTS != 1000) { //1000 is the repeat notification
+					this.updateSnoozedListItem(reminder.eventId, snoozeTS, false);
+				}
+				PalmCall.call("palm://com.palm.service.calendar.reminders", "onSnooze", {"reminderId": reminder._id, "snoozeDuration": snoozeTS, "autoCloseTime": autoCloseT});
+			} else {
+				if(snoozeTS != 1000) { //1000 is the repeat notification
+					this.updateSnoozedListItem(reminder.eventId, snoozeTS, false);
+				}
+				PalmCall.call("palm://com.palm.service.calendar.reminders", "onSnooze", {"reminderId": reminder._id, "snoozeDuration": snoozeTS});
+			}
+		} else {
 				
-		PalmCall.call("palm://com.palm.service.calendar.reminders", "onSnooze", {"reminderId": reminder._id});
+			PalmCall.call("palm://com.palm.service.calendar.reminders", "onSnooze", {"reminderId": reminder._id});
+		}
 		
 		var nextReminder = this.findAnotherReminder("show");
 		this.displayReminder(nextReminder);
 		Mojo.Log.info("========= RM: snoozeReminder: out");
 	},
 	
+	playAlarmSound: function(rem) {
+		var reminder = rem;
+		if (this.stopAutoClose === true) {
+			reminder.autoCloseTime = parseInt(reminder.autoCloseTime, 10) + 24*60*60*1000; // snooze time + 1 day
+			reminder.autoCloseTime = reminder.autoCloseTime.toString();
+			this.snoozeReminder(reminder, 1000, reminder.autoCloseTime);
+		
+		} else {
+			this.snoozeReminder(reminder, 1000);
+		}
+	},
 	//called by the reminder assistant
 	//removes the reminder from the hash, launches the service to dismiss the reminder, and 
 	//displays the next reminder
@@ -334,7 +592,7 @@ var ReminderManager = Class.create ({
 		for (var item in this.reminders) {
 			if (this.reminders.hasOwnProperty(item) && this.reminders[item]) {
 				reminder = this.reminders[item];
-				if(reminder.state == ReminderManager.HIDDEN){
+				if(reminder.state == ReminderManager.HIDDEN || reminder.state == ReminderManager.SHOWING){
 					reminderList.push(reminder);
 				}	
 			}
@@ -480,9 +738,11 @@ var ReminderManager = Class.create ({
 
 		var sound;
 		var useSound = false;
+		var uberAlarmDura = 500;
 		var prefsMgr = getAppAssistant().getPrefsManager();
 		var prefs = prefsMgr.getPrefs();
 		var options = prefsMgr.getAlarmSoundOptions();
+		uberAlarmDura = prefs.uberAlarmDura ? parseFloat(prefs.uberAlarmDura)*1000 : 500;
 		
 		//due to previous implementations, it's possible that in the db, alarmSoundOn is a string ("1", "2", etc.) 
 		//OR a boolean (true, false), so let's convert it to a number, because switch statements use a strict equality test ( 2 != "2")
@@ -534,6 +794,7 @@ var ReminderManager = Class.create ({
 			,	height					: height
 			}; 
 			params [(useSound ? "sound" : "soundclass")] = sound;
+			if(soundclass === "vibrate") {params["duration"] = uberAlarmDura + "";}
 			Mojo.Log.info("========= RM: displayReminder: creating reminder assistant stage");
 			Mojo.Controller.getAppController().createStageWithCallback (params, pushReminderScene.bind (this, reminder, true), "popupalert");	
 		}
@@ -621,3 +882,4 @@ var ReminderManager = Class.create ({
 ReminderManager.HIDDEN = 1;
 ReminderManager.SNOOZED = 2;
 ReminderManager.SHOWING = 3; 
+ReminderManager.fromDash = false;
diff --git a/usr/palm/applications/com.palm.app.calendar/app/models/system-luna-service.js b/usr/palm/applications/com.palm.app.calendar/app/models/system-luna-service.js
index 75cd6c9..6a99a34 100644
--- a/usr/palm/applications/com.palm.app.calendar/app/models/system-luna-service.js
+++ b/usr/palm/applications/com.palm.app.calendar/app/models/system-luna-service.js
@@ -23,6 +23,17 @@ var SystemMojoService = Class.create( {
 			onSuccess: callback
 		});
 	},
+	
+	getTimeZoneValues: function(callback) {
+		var request = new Mojo.Service.Request(SystemMojoService.identifier, {
+			method: 'getPreferenceValues',
+			parameters: {"key":"timeZone"}, 
+			onSuccess: callback,
+			onFailure: callback
+		});
+		return request;
+	},
+	
 	getSystemTime: function(callback) {
 		if(Mojo.Host.current === Mojo.Host.mojoHost) {
 			// Mock service response.
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/prefs-options/ubercalgroupitem.html b/usr/palm/applications/com.palm.app.calendar/app/views/prefs-options/ubercalgroupitem.html
new file mode 100644
index 0000000..d271aea
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/prefs-options/ubercalgroupitem.html
@@ -0,0 +1,25 @@
+<div id="ubercalgroup#{-rId}" class="calendar-row">
+	<div  style="height:200px; width:80%" x-mojo-element="Scroller" id="ubercalscroller#{-rId}" >
+	<div class="palm-row-wrapper">
+		<div class="palm-group">
+			<div class="palm-group-title truncating-text" x-mojo-loc="">#{-groupname}</div>
+			<div class="palm-row" id="ubercalgroupbtn#{-rId}" >
+				<div id="ubercalgroup-text#{-rId}" x-mojo-element="TextField" style="overflow: hidden; max-height:30px;"></div>
+			</div>
+			<div class="palm-row-wrapper" >
+				<div class="palm-row">
+				<div id="uber-cal-workweek-toggle#{-rId}" x-mojo-element="ToggleButton" ></div>
+				<div class="title" x-mojo-loc="">#{-workWeekTitle}</div>
+				</div>
+			</div>
+			<div class="palm-row-wrapper" >
+			<div class="palm-row">
+			<div class="palm-list">
+				<div id="ubercallist#{-rId}" class="pav-calendars-list" x-mojo-element="IndexedList"></div>
+			</div>
+			</div>
+			</div>
+		</div>
+	</div>
+	</div>
+</div>
\ No newline at end of file
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/prefs-options/ubercalitem.html b/usr/palm/applications/com.palm.app.calendar/app/views/prefs-options/ubercalitem.html
new file mode 100644
index 0000000..5cf1995
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/prefs-options/ubercalitem.html
@@ -0,0 +1,5 @@
+<div class="palm-row">
+<div class="palm-row-wrapper" >
+	<div id="uber-cal-list-toggle" x-mojo-element="ToggleButton"></div>
+	<div class="title" x-mojo-loc="">#{-name}</div>
+</div></div>
\ No newline at end of file
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/shared/uber-timezone.html b/usr/palm/applications/com.palm.app.calendar/app/views/shared/uber-timezone.html
new file mode 100644
index 0000000..eb42d73
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/shared/uber-timezone.html
@@ -0,0 +1,16 @@
+<div id="palm-dialog-content" class="palm-dialog-content">
+	<div class="dialog-message" id="uber-tz-msg" x-mojo-loc="">
+		Current Timezone:
+	</div>
+	<div class="palm-dialog-separator"></div>
+	<div  x-mojo-element="Scroller" id="TZscroller" >
+		<div id="uber-timezone-cont" class="palm-list" style="margin-top:-10px; padding:5px; max-height:230px">
+			<div x-mojo-element="FilterField" id="uberTimezonefilterField" class="filterFieldClass"></div>
+			<div id="uber-timezone-list" x-mojo-element="IndexedList"></div>
+		</div>
+	</div>
+</div>
+
+<div class="palm-dialog-buttons">                                              
+	<div id="Cancel" class="palm-button dismiss" x-mojo-tap-highlight="momentary" style="overflow:hidden" x-mojo-loc="">Cancel</div>
+</div>
\ No newline at end of file
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/shared/uber-tz-listcontainer.html b/usr/palm/applications/com.palm.app.calendar/app/views/shared/uber-tz-listcontainer.html
new file mode 100644
index 0000000..81e8009
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/shared/uber-tz-listcontainer.html
@@ -0,0 +1,8 @@
+<div class="palm-group" style="margin-left:-5px; margin-right:5px; padding-left:10px; padding-right:5px">
+	<div id="uber-timezone-grptitle" class="palm-group-title">
+		<span x-mojo-loc=''></span> 
+	</div>
+	<div class="palm-list">
+		#{-listElements}
+	</div>
+</div>
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubercaladvreqitem.html b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubercaladvreqitem.html
new file mode 100644
index 0000000..89ee3fe
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubercaladvreqitem.html
@@ -0,0 +1,88 @@
+<div id="uber-cal-advreq#{-Id}" class="palm-list" >
+		<div class="palm-row #{listplace}" id="#{-Id}uber-cal-advreq-btn" x-mojo-tap-highlight="momentary">
+			<div class="palm-row-wrapper">
+				<img class="account-icon" src="#{icon}"/>
+				<div class="domain-text">#{alias}</div>
+				<div class="login-text truncating-text">#{username}</div>
+			</div>
+		</div>
+		<div id="uber-cal-advreq-drawer#{-Id}" class="drawer" x-mojo-element="Drawer" >
+			<div class="palm-list" >
+			<div class="palm-row first" >
+				<div class="palm-row-wrapper">
+				<div id="uber-cal-advreq-onoff#{-Id}" x-mojo-element="ToggleButton" ></div>
+				<div class="title" x-mojo-loc="">#{-advReqTitle}</div>
+				</div>
+			</div>
+			<div class="palm-row" >
+				<div class="palm-row-wrapper">
+				<div id="uber-cal-advreq-contacts#{-Id}" x-mojo-element="ToggleButton" ></div>
+				<div class="title" x-mojo-loc="">#{-advReqConTitle}</div>
+				</div>
+			</div>
+			<div class="palm-row" >
+				<div class="palm-row-wrapper">
+				<div id="uber-cal-advreq-wifi#{-Id}" x-mojo-element="ToggleButton" ></div>
+				<div class="title" x-mojo-loc="">#{-advReqWifiTitle}</div>
+				</div>
+			</div>
+			<div class="palm-row" >
+				<div class="palm-row-wrapper">
+				<div id="uber-cal-advreq-cell#{-Id}" x-mojo-element="ToggleButton" ></div>
+				<div class="title" x-mojo-loc="">#{-advReq3gTitle}</div>
+				</div>
+			</div>
+			<div class="palm-row" >
+				<table width="100%" ><tr>
+				<div class="palm-row-wrapper">
+					<td width="60%" style="overflow:hidden"><div class="title" x-mojo-loc="">#{-advReqBattTitle}</div></td>
+					<td width="40%"><div id="uber-cal-advreq-batt#{-Id}" x-mojo-element="IntegerPicker" ></div></td>
+				</tr></table></div>
+			</div>
+			<div class="palm-row" >
+				<div class="palm-row-wrapper">
+					<div id="uber-cal-advreq-interval#{-Id}" x-mojo-element="ListSelector" class="left" > </div>
+					
+				</div>
+			</div>
+			<div class="palm-row" >
+				<div class="palm-row-wrapper">
+				<div id="uber-cal-advreq-charging#{-Id}" x-mojo-element="ToggleButton" ></div>
+				<div class="title" x-mojo-loc="">#{-advReqChargingTitle}</div>
+				</div>
+			</div>
+			<div class="palm-row" >
+				<div class="palm-row-wrapper">
+				<div id="uber-cal-advreq-docked#{-Id}" x-mojo-element="ToggleButton" ></div>
+				<div class="title" x-mojo-loc="">#{-advReqDockedTitle}</div>
+				</div>
+			</div>
+			<div class="palm-row" id="#{-Id}uber-cal-advreq-timebtn" x-mojo-tap-highlight="momentary">
+				<div class="palm-row-wrapper">
+				<div id="uber-cal-advreq-allday#{-Id}" x-mojo-element="ToggleButton" ></div>
+				<div class="title" x-mojo-loc="">#{-advReqAllDayTitle}</div>
+				</div>
+			</div>
+			<div class="palm-list" >
+			<div id="uber-cal-timedrawer#{-Id}" class="drawer" x-mojo-element="Drawer" >
+				
+				<div class="palm-row first" >
+					<div class="palm-row-wrapper">
+					
+					<div class="" id="uber-cal-advreq-starttime#{-Id}" x-mojo-element="TimePicker"></div>          
+					
+					</div>
+				</div>
+				<div class="palm-row last" >
+					<div class="palm-row-wrapper">
+					
+					<div class="" id="uber-cal-advreq-endtime#{-Id}" x-mojo-element="TimePicker"></div>          
+					
+					</div>
+				</div>
+				
+			</div>
+			</div>
+			</div>
+		</div>
+</div>
\ No newline at end of file
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubercat-emptylist.html b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubercat-emptylist.html
new file mode 100644
index 0000000..f721577
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubercat-emptylist.html
@@ -0,0 +1 @@
+Empty
\ No newline at end of file
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubercat-item.html b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubercat-item.html
new file mode 100644
index 0000000..0740083
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubercat-item.html
@@ -0,0 +1,10 @@
+<div class="palm-row-wrapper" >
+	<div class="palm-row">
+		<div class="textfield" >
+			<table width="100%"><tr style="margin-top:0;">
+			<td width="10%" style="margin-left:0px; padding:0;"> <div width="20" height="40" ><img src="#{-nameFormatted}"/></div></td>
+			<td width="90%"><input type="text" value="#{name}" maxlength="20" style="background:transparent; margin-left:-5px; padding:0;" /> </td>
+			</tr></table>
+		</div>
+	</div>
+</div>
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubercat-list-container.html b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubercat-list-container.html
new file mode 100644
index 0000000..ee75a9d
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubercat-list-container.html
@@ -0,0 +1,5 @@
+<div class="palm-group unlabeled">
+	<div class="palm-list">
+		#{-listElements} 
+	</div>
+</div>
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertemplateemptylist.html b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertemplateemptylist.html
new file mode 100644
index 0000000..f721577
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertemplateemptylist.html
@@ -0,0 +1 @@
+Empty
\ No newline at end of file
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertemplateitem.html b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertemplateitem.html
new file mode 100644
index 0000000..1aa3533
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertemplateitem.html
@@ -0,0 +1,10 @@
+<div class="palm-row-wrapper"  style="padding:0; margin:2; height:43px"  x-mojo-gesture='Mojo.Gesture.HorizontalDrag'>
+	<div class="palm-row"  style="padding:0; margin:2; height:43px" x-mojo-tap-highlight="momentary" >
+		<div >
+			<table width="100%" height="30px"><tr style="margin-top:0; height:30px">
+			<td width="10%" height="30px" style="margin-left:-5px; padding:0; background-color:#{-bgcolor}"> <div  style="font:12px bold prelude;">#{-startT}</div><div  style="font:12px bold prelude;">#{-endT}</div></td>
+			<td width="90%" height="30px"style="background:#{-catFormatted}"><div  style="font:14px bold prelude;max-width:235px; margin-left:5px; padding:0px;overflow:hidden;white-space:nowrap; text-overflow: ellipsis;">#{-subject}</div><div  style="max-width:120px;font:10px prelude; margin-left:5px; padding:0px;overflow:hidden;white-space:nowrap; text-overflow: ellipsis; float:left;">#{-location}</div><div  style="max-width:140px;font:10px prelude; margin-left:5px; padding:0px;overflow:hidden;white-space:nowrap; text-overflow: ellipsis; float:right">#{-note}</div> </td>
+			</tr></table>
+		</div>
+	</div>
+</div>
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertemplatelistcontainer.html b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertemplatelistcontainer.html
new file mode 100644
index 0000000..8e5536f
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertemplatelistcontainer.html
@@ -0,0 +1,5 @@
+<div class="palm-group unlabeled" style="margin-left:-5px; margin-right:5px; padding-left:10px; padding-right:5px">
+	<div class="palm-list">
+		#{-listElements} 
+	</div>
+</div>
diff --git a/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertz-item.html b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertz-item.html
new file mode 100644
index 0000000..4c076f1
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/app/views/shared/ubertz-item.html
@@ -0,0 +1,10 @@
+<div class="palm-row" x-mojo-gesture='Mojo.Gesture.HorizontalDrag' x-mojo-tap-highlight='momentary'>
+	<div class="palm-row-wrapper">	
+		<div class="title">
+			<span class="timezone-country"style="font:18px bold prelude">#{Country}</span><div class="timezone-city"style="font:16px bold prelude">#{City}</div>
+			<div class="preview"style="font:14px bold prelude">
+			#{-DescriptionFormatted} 
+			</div>
+		</div>
+	</div>
+</div>
diff --git a/usr/palm/applications/com.palm.app.calendar/javascripts/confirm-deleteevent.js b/usr/palm/applications/com.palm.app.calendar/javascripts/confirm-deleteevent.js
index 2244af7..d01c5a2 100644
--- a/usr/palm/applications/com.palm.app.calendar/javascripts/confirm-deleteevent.js
+++ b/usr/palm/applications/com.palm.app.calendar/javascripts/confirm-deleteevent.js
@@ -22,6 +22,7 @@ var DeleteEventConfirmDialogAssistant = Class.create({
 	
 	setup : function(widget) {
 		this.widget = widget;
+		
 		if((!this.event.rrule || !this.event.rrule.freq) && !this.event.parentId)
 		{
 			//deleting recurring series is the same as deleting a non recurring event
@@ -29,7 +30,19 @@ var DeleteEventConfirmDialogAssistant = Class.create({
 		} 
 		else
 		{
+			var cancelDiv = this.sceneAssistant.controller.get('Cancel');
+			var singleDiv = this.sceneAssistant.controller.get('Single');
+			singleDiv.setAttribute("class", "palm-button secondary");
+			var buttonDiv = this.sceneAssistant.controller.get('Cancel').parentNode;
+			var thisFutureBtn = this.sceneAssistant.controller.document.createElement("div");
+			thisFutureBtn.setAttribute("id", "ThisFuture");
+			thisFutureBtn.setAttribute("class", "palm-button negative");
+			thisFutureBtn.setAttribute("x-mojo-tap-highlight", "momentary");
+			thisFutureBtn.setAttribute("x-mojo-loc",'""');
+			thisFutureBtn.innerHTML = $L("Delete this and future events");
+			buttonDiv.insertBefore(thisFutureBtn, cancelDiv);
 			this.sceneAssistant.controller.get('Series').addEventListener(Mojo.Event.tap, this.handleSeries.bindAsEventListener(this));
+			this.sceneAssistant.controller.get('ThisFuture').addEventListener(Mojo.Event.tap, this.handleThisAndFuture.bindAsEventListener(this));
 			this.sceneAssistant.controller.get('Single').addEventListener(Mojo.Event.tap, this.handleSingle.bindAsEventListener(this));
 		}
 		this.sceneAssistant.controller.get('Cancel').addEventListener(Mojo.Event.tap, this.handleCancel.bindAsEventListener(this));
@@ -64,6 +77,29 @@ var DeleteEventConfirmDialogAssistant = Class.create({
 		}
 	},
 	
+	handleThisAndFuture: function() {
+		//set the end date to this events end timestamp - 1 day
+		var endtimestamp = new Date(this.event.dtend);
+		var time = new Date(this.date);
+		if(this.date === this.event.dtstart) {
+			//first event same as series
+			this.handleSeries();
+			return;
+		}
+		//this.rruleUtils.addException(this.event, new Date(this.date));
+		time.setHours(endtimestamp.getHours());
+		time.setMinutes(endtimestamp.getMinutes());
+		time.setSeconds(endtimestamp.getSeconds());
+		this.event.isRecurringForever = false;
+		if(this.event.rrule.count) {this.event.rrule.count = undefined;}
+		this.event.rrule.until= time.addDays(-1).getTime();
+		if (this.event) {
+			this.widget.mojo.close();
+			var callback = this.sceneAssistant.deletedEvent.bind(this.sceneAssistant);
+			this.db.updateEvent(this.event, callback, callback);
+		}
+	},
+	
 	handleCancel:function(){
 		this.widget.mojo.close();
 	}
diff --git a/usr/palm/applications/com.palm.app.calendar/javascripts/datejs/week.js b/usr/palm/applications/com.palm.app.calendar/javascripts/datejs/week.js
new file mode 100644
index 0000000..501c299
--- /dev/null
+++ b/usr/palm/applications/com.palm.app.calendar/javascripts/datejs/week.js
@@ -0,0 +1,44 @@
+Date.prototype.getWeek = function() {
+	var date = new Date(this);
+	var year = date.getFullYear();
+	var month = date.getMonth();
+	var day = date.getDate();
+	
+	var when = new Date(year,month,day);
+	var newYear = new Date(year,0,1);
+	var modDay = newYear.getDay();
+
+	if(this.startDay != 1)
+		if (modDay == 0) modDay=6; else modDay--;
+
+	var daynum = ((Date.UTC(year,when.getMonth(),when.getDate(),0,0,0) -
+		Date.UTC(year,0,1,0,0,0)) /1000/60/60/24) + 1;
+
+	if (modDay < 4 ) {
+		var weekno = Math.floor((daynum+modDay-1)/7)+1;
+	}
+	else {
+		var weekno = Math.floor((daynum+modDay-1)/7);
+	
+		if (weekno == 0) {
+			year--;
+		
+			var prevNewYear = new Date(year,0,1);
+			var prevmodDay = prevNewYear.getDay();
+			if (prevmodDay == 0) prevmodDay = 6; else prevmodDay--;
+			if (prevmodDay < 4) weekno = 53; else weekno = 52;
+		}
+	}
+
+	return weekno;
+};
+
+Date.prototype.getISO8601Week = function() {
+	var d = new Date(this);
+	d.setUTCDate(d.getUTCDate() - (d.getUTCDay() + 6) % 7 + 3);
+	var ms = d.valueOf();
+	d.setUTCMonth(0, 4);
+	var w = Math.round((ms - d.valueOf()) / 604800000) + 1;
+	if (w <= 9) { w = "0" + w; }
+	return w;
+};
diff --git a/usr/palm/applications/com.palm.app.calendar/javascripts/jumpto.js b/usr/palm/applications/com.palm.app.calendar/javascripts/jumpto.js
index bd33683..01273e8 100644
--- a/usr/palm/applications/com.palm.app.calendar/javascripts/jumpto.js
+++ b/usr/palm/applications/com.palm.app.calendar/javascripts/jumpto.js
@@ -9,40 +9,720 @@
 
 var JumptoDialogAssistant = Class.create (
 
-{	initialize: function (controller) {
+{	initialize: function (controller, sceneAssistant) {
 		this.app		= getAppAssistant();
 		this.controller	= controller;
-	}
+		this.sceneAssistant = sceneAssistant;
+		this.calendarsManager	= this.app.getCalendarsManager();
+		this.prefsManager		= this.app.getPrefsManager();
+		this.eventManager		= this.app.getEventManager();
+	},
 
-,	setup : function (widget) {
+	colors: {"cal-color-blue": "rgba(145,211,234,0.5)",
+		"cal-color-green": "rgba(140,240,140,0.5)",
+		"cal-color-yellow": "rgba(232,227,124,0.5)",
+		"cal-color-gray": "rgba(194,194,194,0.5)",
+		"cal-color-orange": "rgba(251,180,116,0.5)",
+		"cal-color-pink": "rgba(245,156,188,0.5)",
+		"cal-color-red": "rgba(255,151,151,0.5)",
+		"cal-color-purple": "rgba(217,183,255,0.5)",
+		"cal-color-teal": "rgba(114,223,210,0.5)"},
+	
+	// From monthview (Feb is fixed up by hand as necessary)
+	// We try to avoid the DateJS stuff because it's indescribably slow.
+	_monthDays: [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ],
+	
+	rdayNames: function() {
+		var stday = 0;
+		if(this.startOfWeek==null || this.startOfWeek == 'undefined')
+			this.startOfWeek = 1;
+		stday = this.startOfWeek - 1;
+		var tday = new Date();
+		tday.moveToDayOfWeek(stday);
+		for (var i = 0; i < 7; i++) {
+			this._rdNames[i] = Mojo.Format.formatDate(tday, "E");
+			tday.addDays(1);
+		}
+	},
+	
+	isLeapYear: function(year) {
+		if (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0)) {
+			return true;
+		}
+			
+		return false;
+	},
+	radvanceWk: function(wk, month, year, maxwkn) {
+		var wkn = parseInt(wk, 10);
+		if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+			var maxwkn = this.weekModulusNum;
+		}
+		if((wkn > 8) && (wkn < maxwkn)) {
+			return (wkn + 1);
+		} else if((wkn <= 8) && (wkn < maxwkn)) {
+			wkn +=1;
+			var zd = '0';
+			return zd + wkn.toString();
+		} else if(wkn == maxwkn || wkn > maxwkn) {
+			var zd = '01';
+			return zd;
+		}
+	},
+	
+	// draw month function, expects numbers 0 based month
+	canvasRM: function(month, year, context) {
+		// date object
+		var rmon = new Date(year, month, 1);
+		
+		//setup number of days, 1st day(day of week), week number, number of weeks
+		var rd1dayOfMon = rmon.getDay();
+		var rwkNum = this.useISOweekNum === true ? rmon.getISO8601Week() : rmon.getWeekOfYear(this.prefStartDoW);
+		var maxwkn = this.useISOweekNum === true ? new Date((month != 0 ? year : year -1), 11, 28).getISO8601Week() : new Date((month != 0 ? year : year -1), 11, 28).getWeekOfYear(this.prefStartDoW);
+		maxwkn = maxwkn == 0 ? 53 : maxwkn;
+		rwkNum = rwkNum == 0 ? maxwkn : rwkNum;
+		if(this.weekNumOffset !== undefined && this.weekNumOffset !=0) {
+			var wkNum = parseInt(rwkNum,10) + this.weekNumOffset;
+			rwkNum = wkNum > maxwkn ? (wkNum - maxwkn) : wkNum;
+			rwkNum = rwkNum < 10 ? '0' + rwkNum : rwkNum;
+		}
+		if(this.weekModulusNum != undefined && this.weekModulusNum <= 52 && this.weekModulusNum != 1) {
+			rwkNum = (parseInt(rwkNum, 10) % this.weekModulusNum);
+			rwkNum = rwkNum !== 0 ? rwkNum : this.weekModulusNum;
+			rwkNum = rwkNum < 10 ? '0' + rwkNum : rwkNum;
+		}
+		var r1offset = rd1dayOfMon - (this.startOfWeek - 1);
+		if (r1offset < 0) {r1offset += 7;}  //num of days of prev mon
+		if(this.isLeapYear(year)) {
+			this._monthDays[1] = 29;
+		} else {
+			this._monthDays[1] = 28;
+		}
+		this.RM[context].maxdays = this._monthDays[month];		
+		//setup fonts and spacing
+		this.mthctx[context].fillStyle = "rgb(0, 0, 0)";
+		this.mthctx[context].font = "bold 14px Prelude";
+		this.mthctx[context].textAlign = "left";
+		this.mthctx[context].textBaseline = "top";
+		var top = 2;
+		var leftmargin = 2;
+		var left = 0 + leftmargin;
+		var txt = "";
+		this.colHW = 30;
+		var maxW = 30;
+		this.topCor = 42 + (this.colHW/2); //top margin + half-cell
+		this.leftCor = this.colHW;
+		this.RM[context].fstDayLidx = r1offset;
+		this.RM[context].fstDayTidx = 1;
+		// setup title and week header
+		var titleTxt = Mojo.Format.formatDate(rmon, $L("MMM yyyy"));
+		this.mthctx[context].strokeText(titleTxt, left + 90, top);
+		this.mthctx[context].textAlign = "center";
+		for (var i = 0; i < 7; i++) {
+			txt = this._rdNames[i];
+			left = (i * this.colHW) + this.leftCor + 13;//13 is for font &txt to ctr
+			top = 22;
+			this.mthctx[context].strokeText(txt, left, top);	
+		}
+		this.mthctx[context].fillStyle = "rgb(104, 104, 104)";
+		this.mthctx[context].font = "14px Prelude";
+		this.mthctx[context].textAlign = "left";
+		this.mthctx[context].textBaseline = "alphabetic";
+		for (var j = 0; j < 6; j++) {
+			txt = rwkNum;
+			left = leftmargin;
+			top = (j * this.colHW) + this.topCor + 3; // 3 is for font correction
+			this.mthctx[context].strokeText(txt, left, top);
+			rwkNum = this.radvanceWk(rwkNum, month, year, maxwkn);
+		}
+		//iterate through the date rows
+		var num = 1;
+		this.mthctx[context].fillStyle = "rgb(0, 0, 0)";
+		this.mthctx[context].font = "bold 14px Prelude";
+		this.mthctx[context].textAlign = "center";
+		for (var j=0; j<6; j++) {
+			if (num > this.RM[context].maxdays) {
+				break; }
+			top = (j * this.colHW) + this.topCor + 3;
+			for (var i=0; i<7; i++) {
+				if (j==0 && i ==0) {i = r1offset;}
+				txt = num;
+				left =  (i * this.colHW) + this.leftCor + 13;
+				this.mthctx[context].strokeText(txt, left, top);
+				num +=1;
+				if (num > this.RM[context].maxdays) {
+					break; }
+			}
+		}
+	},
+	
+	RMnextM: function(index) {
+		this.RM[index].month = this.RM[index - 1].month;
+		this.RM[index].year = this.RM[index - 1].year;
+		if(this.RM[index].month == 11) {
+			this.RM[index].month = 0;
+			this.RM[index].year += 1;
+		} else {
+			this.RM[index].month += 1;
+		}
+	},
+	
+	RMprevM: function(index) {
+		this.RM[index].month = this.RM[index + 1].month;
+		this.RM[index].year = this.RM[index + 1].year;
+		if(this.RM[index].month == 0) {
+			this.RM[index].month = 11;
+			this.RM[index].year -= 1;
+		} else {
+			this.RM[index].month -= 1;
+		}
+	},
+	
+	// determin calendar order for the canvas's
+	orderRM: function( stDate, eDate) {
+		//check first
+		if(stDate.getTime() > eDate.getTime) {
+			Mojo.Log.error ("start after end");
+			return;
+		}
+		for(var i=0; i<6; i++) {
+			this.RM[i] = {};
+			this.RM[i].month = "";
+			this.RM[i].year = "";
+			this.RM[i].fstDayLidx = 1;
+			this.RM[i].fstDayTidx = 1;
+			this.RM[i].maxdays = 1;
+		}
+		// date objects
+		var curD = new Date();
+		var curMY = {month: curD.getMonth(), year: curD.getFullYear() };
+		var stMY = {month: stDate.getMonth(), year: stDate.getFullYear() };
+		var eMY = {month: eDate.getMonth(), year: eDate.getFullYear() };
+		// do prev - prev - dateModel.date next - next - next
+		this.RM[2].month = stMY.month;
+		this.RM[2].year = stMY.year;
+		this.RMprevM(1);
+		this.RMprevM(0);
+		this.RMnextM(3);
+		this.RMnextM(4);
+		this.RMnextM(5);
+		// call canvasRM
+		for(var k=0; k<6; k++){
+			this.canvasRM(this.RM[k].month, this.RM[k].year, k);
+		}
+		// record for next time comparisons
+		this.RMlast.stMY = stMY;
+		this.RMlast.eMY = eMY;
+		this.RMlast.curMY = curMY;
+	},
+	
+	risRendered: function( year, month) {
+		for(var i=0; i<6; i++) {
+			if((this.RM[i].month == month) && (this.RM[i].year == year)) {
+				return i;
+			}
+		}
+		return -1;
+	},
+	
+	//mark days in calendar
+	markDay: function(rdate, imgsrc, color, rx, ry, rwt, rht) {
+		// determine which month, year, date
+		if (rdate instanceof Date == true) { 
+			var whatMn = rdate.getMonth();
+			var whatYr = rdate.getFullYear();
+			var whatDt = rdate.getDate();
+		} else if(rdate !== undefined) {
+			this.rtdate = new Date(rdate);
+			var whatMn = this.rtdate.getMonth();
+			var whatYr = this.rtdate.getFullYear();
+			var whatDt = this.rtdate.getDate();
+		}
+		var rmimgsrc = imgsrc;
+		var idx = this.risRendered(whatYr, whatMn);
+		if(idx == -1) { return; }
+		var fstDayLidx = this.RM[idx].fstDayLidx;
+		var fstDayTidx = this.RM[idx].fstDayTidx;
+		var rRow = Math.floor((whatDt + fstDayLidx -1) / 7);
+		var col = (whatDt + fstDayLidx - 1) % 7;
+		var itop = (rRow * this.colHW) + 40;
+		var ileft = (col * this.colHW) + this.colHW;
+		itop = (ry !== undefined) ? itop + ry : itop;
+		ileft = (rx !== undefined) ? ileft + rx : ileft;
+		if (rmimgsrc !== undefined) {
+			this.mthctx[idx].drawImage(rmimgsrc, ileft, itop, (rwt !== undefined)? rwt : this.colHW,(rht !== undefined)? rht : this.colHW);
+		} else if(color !== undefined) {
+			this.mthctx[idx].fillStyle = color;
+			this.mthctx[idx].fillRect(ileft, itop, this.colHW-2, this.colHW-2);
+		} else {
+			this.mthctx[idx].fillStyle = "rgba(232,227,124,0.5)";
+			this.mthctx[idx].fillRect(ileft, itop, this.colHW-2, this.colHW-2);
+		}
+	},
+	
+	rmEval: function() {
+		this.RMlast.stD = this.dateModel.date;
+		this.RMlast.eD = this.dateModel.date;
+		return;
+	},
+
+	getUCGroupsProps: function() {
+		// check for UC groups
+		if(this.uberGroups && this.uberGroups.inUse === true && this.userUberCalGroups && this.userUberCalGroups.length > 0 && this.userUberCalGroups[0].rId !== undefined) {
+			var rID = this.uberGroups.rId;
+			if(rID) {
+				var len = this.userUberCalGroups.length;
+				var idx;
+				for(var i=0; i < len; i++){
+					if(rID === this.userUberCalGroups[i].rId) {
+						var idx = i;
+						break;
+					}
+				}
+				if(idx !== undefined && this.userUberCalGroups[idx].includes && this.userUberCalGroups[idx].includes.length >0) {
+					this.ucGroupIdx = idx;
+				}
+			}
+		} else {
+			this.ucGroupIdx = undefined;
+		}
+	},
+	
+	getTemplateEvents: function() {
+		var startTS = Date.UTC(2030, 0, 1, 0, 0, 0, 0);
+		var endTS = Date.UTC(2030, 0, 2, 0, 0, 0, 0);
+		var range =
+		{	start		: startTS
+		,	end			: endTS
+		,	tzId		: this.app.getTimezoneName()
+		,	excludeList	: this.calendarsManager.getExcludeFromAllList()		
+		};
+		var calendarId	= this.calendarsManager.getCurrentCal();
+		// check for UC groups
+		if(this.uberGroups && this.uberGroups.inUse === true && this.ucGroupIdx !== undefined) {
+			var idx = this.ucGroupIdx;
+			if(idx !== undefined && this.userUberCalGroups && this.userUberCalGroups.length > 0 && this.userUberCalGroups[idx].includes && this.userUberCalGroups[idx].includes.length >0) {
+				var ucIncludes = this.userUberCalGroups[idx].includes;
+				calendarId = 'all';
+			}
+		}
+		
+		if (calendarId == "all") {												// When in "View All" mode
+			calendarId = null;													// disable calendar filtering
+			range.excludeList =this.app.buildUberExcludes(ucIncludes);	// except for excluded calendars.
+		} else {
+			range.calendarId = calendarId;										// otherwise enable calendar filtering.
+		}
+		this.eventManager.getEventsInRange (range, this.getTemplateEventsCallback.bind(this));
+	},
+	
+	getTemplateEventsCallback: function (resp) {
+		this.uberTemplateEvents = [];
+		var days = resp.days;
+		var startTS = Date.UTC(2030, 0, 1, 0, 0, 0, 0);
+		var len = days.length ? days.length : 0;
+		for(var i=0; i<len; i++) {
+			if(days[i] && days[i].date && (days[i].events.length || days[i].allDayEvents.length)) {
+				days[i].events.each(function(item) {
+					if(!item.rrule) {
+						this.uberTemplateEvents.push(item);
+					}
+				}, this);
+				days[i].allDayEvents.each(function(item) {
+					if(!item.rrule) {
+						this.uberTemplateEvents.push(item);
+					}
+				}, this);
+			}
+		}
+		//sorting and combining webos split events over local midnight boundary
+		var tempList = this.uberTemplateEvents.sortBy(function(a) { var patt=/[^+]{2,}/;var atxt = patt.exec(a._id) + "";return atxt.toLowerCase(); });
+		var filtList = [];
+		var len = this.uberTemplateEvents.length;
+		var lastMatch;
+		for(var i=1; i<len; i++){
+			var sec = tempList[i];
+			var first = tempList[i -1];
+			var idx1 = i-1;
+			var idx2 = i;
+			var refStartTS = Date.UTC(2030, 0, 1, 0,0,0,0);
+			var refEndTS = Date.UTC(2030, 0, 2,0,0,0,0);
+			if(sec._id === first._id) {
+				var start1 = first.dtstart;
+				var end1 = first.dtend;
+				var start2 = sec.dtstart;
+				var end2 = sec.dtend;
+				if(start1 < start2) { //first is the dtstart of event
+					first.dtend = sec.dtend;
+					if((first.dtstart >= refStartTS && first.dtstart <= refEndTS) ||
+						(first.dtend >= refStartTS && first.dtend <= refEndTS)) {
+						filtList.push(first);// clean off any events that don't start or end on 1.1.2030 UTC
+					}
+					lastMatch = i;
+				} else {			// sec is start
+					first.dtstart = sec.dtstart;
+					if((first.dtstart >= refStartTS && first.dtstart <= refEndTS) ||
+						(first.dtend >= refStartTS && first.dtend <= refEndTS)) {
+						filtList.push(first);
+					}
+					lastMatch = i;
+				}
+			} else {
+				if((first.dtstart >= refStartTS && first.dtstart <= refEndTS) ||
+					(first.dtend >= refStartTS && first.dtend <= refEndTS) ) {
+					if(!lastMatch || lastMatch !== i-1) { //first was not matched before
+						filtList.push(first);
+					}
+				}
+				if((i === len-1) && ((sec.dtstart >= refStartTS && sec.dtstart <= refEndTS) ||
+					(sec.dtend >= refStartTS && sec.dtend <= refEndTS))) {				
+					filtList.push(sec);
+				}
+			}
+		}
+		if(filtList && filtList.length) { //sort by start timestamps
+			tempList = filtList.clone();
+			tempList = tempList.sortBy(function(a) {return a.dtstart});
+		}
+		if(tempList && tempList.length) { 
+			this.uberTemplateEvents = tempList.clone();
+		}
+		var subList = [];
+		var len = this.uberTemplateEvents.length;
+		for(var i=0; i < len; i++) {
+			var item = this.uberTemplateEvents[i];
+			//push to list
+			var tEvt = {};
+			tEvt.idx = i;
+			if(item._id) {
+				tEvt._id = item._id;
+			}
+			if(item.subject) {
+				tEvt.subject = item.subject;
+			}
+			if(item.location) {
+				tEvt.location = item.location;
+			}
+			if(item.calendarId) {
+				var calColor = this.calendarsManager.getCalColorStyle(item.calendarId);
+				tEvt.bgcolor = this.colors[calColor];
+			}
+			if(item.dtstart) {
+				if(!item.allDay) {
+					this.rtdate = new Date(item.dtstart);
+					var h = this.rtdate.getUTCHours();
+					var m = this.rtdate.getUTCMinutes();
+					tEvt.startT = (h<10 ? '0'+h: h) + ':' + (m<10 ? '0'+m : m);
+				} else if (item.allDay === true) {
+					tEvt.startT = $L("all ");
+				}
+			}
+			if(item.dtend) {
+				if(!item.allDay) {
+					this.rtdate = new Date(item.dtend);
+					var h = this.rtdate.getUTCHours();
+					var m = this.rtdate.getUTCMinutes();
+					tEvt.endT = (h<10 ? '0'+h: h) + ':' + (m<10 ? '0'+m : m);
+				} else if (item.allDay === true) {
+					tEvt.endT = $L("day ");
+				}
+			}
+			if(item.note) {
+				var wholeNote = item.note !== "\n" ? item.note : "";
+				var patt = /((.|\n|\r)*?)ICON=([a-z0-9_-]{1,20});((.|\n|\r)*)/;
+				if(wholeNote && wholeNote !== "\n" && wholeNote.length > 0) {
+					var result = wholeNote.match(patt);
+					if(result && result[3]) {
+						tEvt.cat = result[3];
+						tEvt.note = result[1] + result[4];
+					} else {
+						tEvt.note = wholeNote;
+					}
+				}
+			}
+			subList.push(tEvt);
+		}
+		if(subList.length !== 0) {
+			this.uberTemplates = subList.clone();
+			this.uberTemplateModel.items = this.uberTemplates;
+			this.controller.modelChanged(this.uberTemplateModel, this);
+		}
+	},
+	
+	getTemplateEventsFailCallback: function(e){
+		Mojo.Log.error("failed to get template events: " + e.errorText);
+	},
+	
+	setup : function (widget) {	
 		this.widget				= widget;
 		this.onTimePicked		= this.onTimePicked	.bind (this);
 		this.dateListener		= this.onJumpTo		.bind (this, 'Date');	//do not localize
 		this.todayListener		= this.onJumpTo		.bind (this, 'Today');	//do not localize
 		this.cancelTapHandler	= this.onCancel		.bind (this);
-
+		this.db = new DatabaseManager();
 		this.dateModel	= { date: this.app.getCurrentDateTime() };
-		this.controller.setupWidget ('jumpto-picker', { label: $L('DATE') }, this.dateModel);
-	}
+		//this.controller.setupWidget ('jumpto-picker', { label: $L('DATE') }, this.dateModel);
+		this.prefs		= this.prefsManager.getPrefs();
+		this.weekModulusNum = 1;
+		this.weekNumOffset = 0;
+		this.useISOweekNum = false;
+		this.prefStartDoW = 0;
+		this.gotoEditFromTemplate = true;
+		this.weekCookie = new Mojo.Model.Cookie('WeekViewEnhanced');
+		if (this.weekCookie) {
+			var weekcookie = this.weekCookie.get();
+			if(weekcookie) {
+				if(weekcookie.weeknumoffset !== undefined) {
+						this.weekNumOffset = parseInt(weekcookie.weeknumoffset, 10);
+				} else {
+						this.weekNumOffset = 0;
+				}
+				if(weekcookie.weekmodulusnum !== undefined) {
+						this.weekModulusNum = parseInt(weekcookie.weekmodulusnum, 10);
+				} else {
+						this.weekModulusNum = 1;
+				}
+				if (weekcookie.useisoweeknum !== undefined) {
+					this.useISOweekNum = weekcookie.useisoweeknum;
+				} else {
+					this.useISOweekNum = false;
+				}
+				if (weekcookie.prefsstartofweek !== undefined) {
+					this.prefStartDoW = parseInt(weekcookie.prefsstartofweek, 10) -1;
+				} else {
+					this.prefStartDoW = 0;
+				}
+				if (weekcookie.gotoeditfromtemplate !== undefined) {
+					this.gotoEditFromTemplate = weekcookie.gotoeditfromtemplate;
+				} else {
+					this.gotoEditFromTemplate = true;
+				}
+			}
+		}
+		// setup canvas & drawer
+		var parentDiv = this.controller.get("palm-dialog-content");
+		parentDiv.setAttribute("class", "palm-list");
+		parentDiv.innerHTML = '<div class="palm-dialog-content" style="margin-bottom:3px">' +
+				'<div class="palm-dialog-buttons" style="margin-left:10px; margin-top:-20px; margin-bottom:-8px; padding:0; width:90%" id="jp_uber_radiobutton" x-mojo-element="RadioButton"></div>' +
+				'<div class="palm-dialog-separator"></div></div>' + 
+			'<div  x-mojo-element="Scroller" id="JPscroller" >' +
+				'<div id="JP-template-cont" class="palm-list" style="margin-top:-20px; padding:5px; max-height:230px">' +
+					'<div x-mojo-element="FilterField" id="uberTemplatefilterField" class="filterFieldClass"></div>' + 
+					'<div id="jp-template-list" x-mojo-element="IndexedList"></div></div>' +
+				'<div id="JPcanvasDiv" style="margin-top:-5px" class="palm-list">' +
+					'<div id="JPscrol" style="height:220px;" x-mojo-element="Scroller"><div id="JPscrolct" style="position:relative;width:1566;height:220px;">' +
+						'<div id="JPmonth_0" class="JPmv" style="position:absolute;display:block;width:240px;left:40px;border-right:1px solid black;border-left:1px solid black;">' +
+						'<canvas id="JPleft0" width="240" height="220" left="0"></canvas>' +
+						'</div><div id="JPmonth_1" class="JPmv" style="position:absolute;display:block;width:240px;left: 281px;border-right:1px solid black;">' +
+						'<canvas id="JPleft1" width="240" height="220"></canvas>' +
+						'</div><div id="JPmonth_2" class="JPmv" style="position:absolute;display:block;width:240px;left: 522px;border-right:1px solid black;">' +
+						'<canvas id="JPleft2" width="240" height="220"></canvas>' +
+						'</div><div id="JPmonth_3" class="JPmv" style="position:absolute;display:block;width:240px;left: 763px;border-right:1px solid black;">' +
+						'<canvas id="JPright0" width="240" height="220"></canvas>' +
+						'</div><div id="JPmonth_4" class="JPmv" style="position:absolute;display:block;width:240px;left: 1004px;border-right:1px solid black;">' +
+						'<canvas id="JPright1" width="240" height="220"></canvas>' +
+						'</div><div id="JPmonth_5" class="JPmv" style="position:absolute;display:block;width:240px;left: 1245px;border-right:1px solid black;">' +
+						'<canvas id="JPright2" width="280" height="220"></canvas></div>' +
+					'</div></div>' +
+				'</div>' + 
+			'</div>' + 
+			'<div class="palm-dialog-content">' +
+				'<div class="palm-dialog-separator"></div> <div class="dialog-message" style="margin-top:-5px; margin=bottom:-5px; padding:0"><div id="jumpto-picker" x-mojo-element="DatePicker"></div></div>' +
+			'</div>';
+		
+		// template section
+		this.uberTemplateAttrs = {
+			itemTemplate:'shared/ubertemplateitem', 
+			listTemplate:'shared/ubertemplatelistcontainer',
+			formatters: {
+					cat: function(value, model) { 
+						return 'url(/media/internal/.scrims/ubercalendar/icon-' + model.cat + '.png) no-repeat center right;';
+					}
+				},
+			swipeToDelete:true, 
+			emptyTemplate:'shared/ubertemplateemptylist'
+		};
+		this.controller.setupWidget("JPscroller",{mode: 'vertical'});
+		this.uberTemplates = [{subject: $L("No Templates Found")}];
+		this.uberTemplateModel = {listTitle: "templates", items:this.uberTemplates};
+		this.uberTemplatesList = this.controller.get('jp-template-list');
+		this.controller.setupWidget('jp-template-list', this.uberTemplateAttrs, this.uberTemplateModel);
+		this.uberTemplateFilterHandler = this.handleUberTemplateFilter.bind(this);
+		this.controller.setupWidget('uberTemplatefilterField',
+						this.filtAttrs = {filterFieldHeight: 40},
+						this.filtModel={disabled: false} 
+		);
+		this.uberTemplateDeleteHandler = this.handleUberTemplateDelete.bind(this);
+		// date time pickers 
+		this.controller.setupWidget('jumpto-picker', {label: $L('DATE')}, this.dateModel);
+		var btnrow = this.controller.get("Cancel").parentNode;
+		btnrow.setAttribute("style", "margin-top:-10px; margin-bottom:-5px");
+		btnrow.removeChild(btnrow.firstChild);
+		btnrow.removeChild(btnrow.firstChild);
+		btnrow.removeChild(btnrow.firstChild);
+		btnrow.innerHTML ='<table width="100%" style="margin-top:-20px; margin-bottom:-10px"><tr><td width="33%"><div id="Date" class="palm-button" x-mojo-tap-highlight="momentary" style="overflow:hidden" x-mojo-loc="">Date</div></td>' +
+						'<td width="33%"><div id="Today" class="palm-button" style="overflow:hidden" x-mojo-tap-highlight="momentary" x-mojo-loc="">Today</div></td>' +
+						'<td width="33%"><div id="Cancel" class="palm-button dismiss" x-mojo-tap-highlight="momentary" style="overflow:hidden" x-mojo-loc="">Cancel</div></td></tr></table>';
+		var dateBtn = this.controller.get("Date");
+		var todayBtn = this.controller.get("Today");
+		var cancBtn = this.controller.get("Cancel");
+		dateBtn.innerHTML = $L("Date");
+		todayBtn.innerHTML = $L("Today");
+		cancBtn.innerHTML = $L("Cancel");
+		// drawer & scroller setup
+		this.controller.setupWidget("JPscrol",{mode: 'horizontal-snap'}, {snapElements: {x:[this.controller.get("JPmonth_0"), this.controller.get("JPmonth_1"), this.controller.get("JPmonth_2"), this.controller.get("JPmonth_3"), this.controller.get("JPmonth_4"), this.controller.get("JPmonth_5")]}});
+		this.controller.setupWidget("jp_uber_radiobutton",
+			this.uberRadioAttrs = {
+				choices: [
+					{label: $L("Jump To"), value: 1},
+					{label: $L("Templates"), value: 2}
+				]
+			},
+			this.uberRadioModel = {
+				value: 1,
+				disabled: false
+			}
+		); 
+		
+		// setup month canvas context
+		this.redlineSplit = this.controller.get("JPmonth_2");
+		this.mthctx = [];
+		this.left0 = this.controller.get("JPleft0");
+		this.mthctx[0] = this.left0.getContext('2d');
+		this.left1 = this.controller.get("JPleft1");
+		this.mthctx[1] = this.left1.getContext('2d');
+		this.left2 = this.controller.get("JPleft2");
+		this.mthctx[2] = this.left2.getContext('2d');
+		this.right0 = this.controller.get("JPright0");
+		this.mthctx[3] = this.right0.getContext('2d');
+		this.right1 = this.controller.get("JPright1");
+		this.mthctx[4] = this.right1.getContext('2d');
+		this.right2 = this.controller.get("JPright2");
+		this.mthctx[5] = this.right2.getContext('2d');
+		// setup vars
+		this.startOfWeek = this.prefs.startOfWeek;
+		this._rdNames = [];
+		this.RMlast = {};
+		this.RM = [];
+		this.topCor = "";
+		this.leftCor = "";
+		this.rtdayimg = new Image();
+		this.rtdayimg.src = "./images/week-current-day.png";
+		this.rmdoRec = false;
+		this.rdayNames();
+		this.rmEval();
+		this.orderRM(this.RMlast.stD, this.RMlast.eD);
+		this.stImg = new Image();
+		this.stImg.src = "./images/day-allday-event-green-center.png";
+		this.eImg = new Image();
+		this.eImg.src = "./images/day-allday-event-red-center.png";
+		this.dImg = new Image();
+		this.dImg.src = "./images/day-event-green.png";
+		this.rImg = new Image();
+		this.rImg.src = "./images/day-event-yellow.png";
+		this.rmScroller = this.controller.get('JPscrol');
+		this.rtDate = new Date();
+		this.rmcalHold = false;
+		this.rmUpdate = false;
+	},
 
-,	activate: function() {
+	activate: function() {
 		this.dateModel.date	= this.app.getCurrentDateTime();
+		this.userUberCalGroups = [];
+		this.userUberCalGroups = this.app.getUserUberCalGroups();
+		this.uberGroups = this.app.getUberGroups();
+		this.getUCGroupsProps();
+		this.getTemplateEvents();
+		this.filtModel.disabled=true;
+		this.controller.modelChanged(this.filtModel, this);
 		this.controller.modelChanged (this.dateModel);
+		this.controller.get('JP-template-cont').hide();
+
 
 		this.controller.get ('jumpto-picker')	.observe			(Mojo.Event.propertyChange,this.onTimePicked);			
 		this.controller.get ('Date')			.addEventListener	(Mojo.Event.tap, this.dateListener);
 		this.controller.get ('Today')			.addEventListener	(Mojo.Event.tap, this.todayListener);
 		this.controller.get ('Cancel')			.addEventListener	(Mojo.Event.tap, this.cancelTapHandler);
-	}
+		this.uberRadioButtonHandler = this.handleUberRadioButton.bindAsEventListener(this); 
+		this.controller.listen('jp_uber_radiobutton', Mojo.Event.propertyChange,this.uberRadioButtonHandler);
+		this.markDay(new Date(), this.rtdayimg);
+		this.markDay(this.RMlast.stD, this.stImg , null/*color*/,0/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		this.markDay(this.RMlast.eD, this.eImg , null/*color*/, this.colHW-2/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		this.rmScrollTo(this.RMlast.stD)
+		this.uberTemplateTapHandler = this.handleUberTemplateTap.bind(this);
+		this.controller.listen(this.controller.get("jp-template-list"), Mojo.Event.listTap, this.uberTemplateTapHandler);
+		this.controller.listen(this.controller.get("jp-template-list"), Mojo.Event.listDelete, this.uberTemplateDeleteHandler);
+		
+		//tap handlers
+		this.calTapHandler = this.handleCalTap.bind(this);
+		this.calHoldHandler = this.handleCalHold.bind(this);
+		Mojo.Event.listen(this.left0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.left1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.left2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.right0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.right1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.right2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.listen(this.left0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.left1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.left2, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.right0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.right1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.listen(this.right2, Mojo.Event.hold, this.calHoldHandler);
+	},
 
-,	deactivate: function() {
+	deactivate: function() {
 		this.controller.get ('jumpto-picker')	.stopObserving			(Mojo.Event.propertyChange, this.onTimePicked);
 		this.controller.get ('Date')			.removeEventListener	(Mojo.Event.tap, this.dateListener);
 		this.controller.get ('Today')			.removeEventListener	(Mojo.Event.tap, this.todayListener);
 		this.controller.get ('Cancel')			.removeEventListener	(Mojo.Event.tap, this.cancelTapHandler);
-	}
+		this.controller.stopListening(this.controller.get("jp-template-list"), Mojo.Event.listTap, this.uberTemplateTapHandler);
+		this.controller.stopListening(this.controller.get("jp-template-list"), Mojo.Event.listDelete, this.uberTemplateDeleteHandler);
+		this.controller.stopListening('jp_uber_radiobutton', Mojo.Event.propertyChange,this.uberRadioButtonHandler);
+		Mojo.Event.stopListening(this.left0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.left1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.left2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.right0, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.right1, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.right2, Mojo.Event.tap, this.calTapHandler);
+		Mojo.Event.stopListening(this.left0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.left1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.left2, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.right0, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.right1, Mojo.Event.hold, this.calHoldHandler);
+		Mojo.Event.stopListening(this.right2, Mojo.Event.hold, this.calHoldHandler);
+		this.controller.get('uberTemplatefilterField').mojo.close();
+		Mojo.Event.stopListening(this.controller.get("uberTemplatefilterField"),Mojo.Event.filter, this.uberTemplateFilterHandler);
+	},
+
+	rmHandleUpdate: function() {
+		// date picker model changed do redraw
+		for(var i = 0;i<6; i++) {
+			this.mthctx[i].clearRect(0, 0, 240,220);
+		}
+		this.rmEval();
+		this.orderRM(this.RMlast.stD, this.RMlast.eD);
+		this.markDay(new Date(), this.rtdayimg);
+		this.markDay(this.RMlast.stD, this.stImg , null/*color*/, 1/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		this.markDay(this.RMlast.eD, this.eImg , null/*color*/, this.colHW-2/*x adjust*/,null/*y adjust*/ ,2 /*wd adjust*/,this.colHW /*ht adjust*/);
+		this.rmScrollTo(this.RMlast.stD);
+	},
+	
+	rmScrollTo: function(x) {
+		if (x instanceof Date == true) { 
+			var whatMn = x.getMonth();
+			var whatYr = x.getFullYear();
+			var idx = this.risRendered(whatYr, whatMn);
+		} else if(x >= 0 && x <= 6) {
+			var idx = x;
+		}
+		//idx = idx * 241;
+		//idx = -idx -14;
+		this.controller.get('JPscrol').mojo.setSnapIndex(idx, true);
+	},
 
-,	onCancel: function (event) {
+	onCancel: function (event) {
+		this.controller.get('jp-template-list').mojo.setLength(this.uberTemplates.length);
+		this.controller.get('jp-template-list').mojo.noticeUpdatedItems(0, this.uberTemplates);
+		this.controller.get('uberTemplatefilterField').mojo.close();
 		this.widget.mojo.close();
 	}
 
@@ -54,6 +734,7 @@ var JumptoDialogAssistant = Class.create (
 		this.widget.mojo.close();
 
 		// Set the day to the one chosen by the user
+		this.controller.get('uberTemplatefilterField').mojo.close();
 		if (whereTo == 'Today'){
 			this.app.setCurrentDateTime (new Date(), false /*dontNotify*/, true /*scrollToDefault*/);
 
@@ -63,10 +744,241 @@ var JumptoDialogAssistant = Class.create (
 
 		// Run the transition
 		myTransition.run (function(){ Mojo.Log.info("intra-scene transition complete!"); });
-	}
+	},
+	
+	deletedTemplateCallback: function(item) {
+		// delete the event from the event arrays & model
+		this.uberTemplateModel.items.splice(this.uberTemplateModel.items.indexOf(item), 1)
+		this.uberTemplateEvents.splice(item.idx, 1);
+		//this.uberTemplates.splice(item.idx, 1);
+	},
+	
+	handleUberTemplateDelete: function(event) {
+		if(!event.item || event.item._id === undefined || event.item.idx === undefined) {
+			Mojo.Log.error("Delete template error:  no event id")
+			return;
+		}
+		var _id = event.item._id;
+		var idx = event.item.idx;
+		var tEvent = Object.clone(this.uberTemplateEvents[idx]);
+		if ((!tEvent.rrule || tEvent.rrule == "") && tEvent.parentId <=0){
+			// no recurrent schedule
+			var series = false;
+			var date = tEvent.dtstart;
+		} else {
+			var series = true;
+			var date = null;
+		}
+		//delete the event
+		this.db.deleteEvent( _id, this.deletedTemplateCallback.bind(this, event.item), this.setEventsFailCallback);
+	},
+	
+	handleUberTemplateFilter: function(event) {
+		if(event.filterString == "" || !event.filterString) {
+			this.controller.get('jp-template-list').mojo.setLength(this.uberTemplates.length);
+			this.controller.get('jp-template-list').mojo.noticeUpdatedItems(0, this.uberTemplates);
+			this.controller.get('uberTemplatefilterField').mojo.close();
+			return;
+		}
+		var str = event.filterString;
+		str= str.toLowerCase();
+		var subList = [];
+		this.uberTemplates.each(function(item) {
+			if(item.subject && item.subject.toLowerCase().indexOf(str)>= 0) {
+				subList.push(item);
+			} else if(item.location && item.location.toLowerCase().indexOf(str)>= 0) {
+				subList.push(item);
+			} else if(item.cat && item.cat.toLowerCase().indexOf(str)>= 0) {
+				subList.push(item);
+			} else if(item.note && item.note.toLowerCase().indexOf(str)>= 0) {
+				subList.push(item);
+			}
+		}, this);
+		if(subList.length === 0) {
+			subList= [{subject: $L("No Templates Found")}];
+		}
+		this.controller.get('uberTemplatefilterField').mojo.setCount(subList.length);
+		this.controller.get('jp-template-list').mojo.setLength(subList.length);
+		this.controller.get('jp-template-list').mojo.noticeUpdatedItems(0, subList);
+	},
+	
+	setEventCallBack: function(response) {
+		// Close the dialog
+		this.controller.get('uberTemplatefilterField').mojo.close();
+		this.widget.mojo.close();
+		// jumpto event date
+		this.app.setCurrentDateTime(this.changedDate);
+		
+		if(response.results[0].id && response.results[0].rev) {
+			this.targetEvent._id = response.results[0].id;
+			this.targetEvent._rev = response.results[0].rev;
+		}
+		
+		if(this.gotoEditFromTemplate && this.sceneAssistant.editFromTemplate) {
+			this.sceneAssistant.editFromTemplate(this.targetEvent, this.editingTemplate);
+		}
+	},
+	
+	setEventsFailCallback: function(e){
+		Mojo.Log.error("failed to set new event: " + e.errorText);
+	},
+	
+	handleUberTemplateTap: function(event) {
+		if(event.originalEvent.down.altKey === true) {
+			// editing a template, go to edit scene from sceneAs
+			var startTS = new Date(2030,0,1,0,0,0,0).getTime();
+			var refTS = Date.UTC(2030, 0, 1, 0, 0, 0, 0);
+			this.targetEvent = Object.clone(this.uberTemplateEvents[event.item.idx]);
+			var templateStartTS = this.targetEvent.dtstart;
+			var templateEndTS = this.targetEvent.dtend;
+			var allDay = this.targetEvent.allDay;
+			this.targetEvent.originalstartTimestamp = this.targetEvent.dtstart;
+			if(allDay === true) {
+				this.targetEvent.dtstart = startTS;
+				this.targetEvent.startTimestamp = startTS;
+				this.targetEvent.dtend = startTS + 23*60*60*1000 + 59*60*1000 + 59*1000;
+				this.targetEvent.endTimestamp = startTS + 23*60*60*1000 + 59*60*1000 + 59*1000;
+			} else {
+				this.targetEvent.dtstart = startTS + (templateStartTS - refTS);
+				this.targetEvent.startTimestamp = startTS + (templateStartTS - refTS);
+				this.targetEvent.dtend = startTS + (templateEndTS - refTS);
+				this.targetEvent.endTimestamp = startTS + (templateEndTS - refTS);
+			}
+			this.gotoEditFromTemplate = true;
+			this.editingTemplate = true;
+			var eventToUpdate = JSON.parse(JSON.stringify(this.targetEvent));
+			this.db [ "updateEvent"]
+				(	eventToUpdate
+				,	this.setEventCallBack.bind(this)
+				,	this.setEventsFailCallback
+				);
+		} else {
+			// tapped a template need to create a new event
+			this.editingTemplate = false;
+			var startTS = this.dateModel.date.clearTime().getTime();
+			var refTS = Date.UTC(2030, 0, 1, 0, 0, 0, 0);
+			this.targetEvent = Object.clone(this.uberTemplateEvents[event.item.idx]);
+			var templateStartTS = this.targetEvent.dtstart;
+			var templateEndTS = this.targetEvent.dtend;
+			var allDay = this.targetEvent.allDay;
+			this.targetEvent._id = undefined; // reset so it's a new event
+			if(this.targetEvent.parentId) {this.targetEvent.parentId = undefined;} 
+			if(allDay === true) {
+				this.targetEvent.dtstart = startTS;
+				this.targetEvent.startTimestamp = startTS;
+				this.targetEvent.dtend = startTS + 23*60*60*1000 + 59*60*1000 + 59*1000;
+				this.targetEvent.endTimestamp = startTS + 23*60*60*1000 + 59*60*1000 + 59*1000;
+			} else {
+				this.targetEvent.dtstart = startTS + (templateStartTS - refTS);
+				this.targetEvent.startTimestamp = startTS + (templateStartTS - refTS);
+				this.targetEvent.dtend = startTS + (templateEndTS - refTS);
+				this.targetEvent.endTimestamp = startTS + (templateEndTS - refTS);
 
-,	onTimePicked: function (event) {
+			}
+			// set event
+			var eventToUpdate = JSON.parse(JSON.stringify(this.targetEvent));
+			this.db [ "createEvent"]
+				(	eventToUpdate
+				,	this.setEventCallBack.bind(this)
+				,	this.setEventsFailCallback
+				);
+		}
+	},
+	
+	handleUberRadioButton: function(event) {
+		// hide or show
+		if(event.value === 2) {
+			this.filtModel.disabled=false;
+			this.controller.modelChanged(this.filtModel, this);
+			this.controller.get('JPscrol').hide();
+			this.controller.get('JP-template-cont').show();
+			Mojo.Event.listen(this.controller.get("uberTemplatefilterField"),Mojo.Event.filter, this.uberTemplateFilterHandler);
+		} else {
+			this.filtModel.disabled=true;
+			this.controller.modelChanged(this.filtModel, this);			this.controller.get('JPscroller').mojo.revealTop();
+			this.controller.get('JPscrol').show();
+			this.controller.get('JP-template-cont').hide();
+			this.controller.get('JPscrol').mojo.setSnapIndex(0, false);
+			this.rmScrollTo(this.RMlast.stD);
+		}
+	},
+
+	onTimePicked: function (event) {
 		//Mojo.Log.info("picked time"+event.value);
 		this.changedDate = event.value;
-	}
+		if(!this.rmUpdate){
+			this.rmHandleUpdate();
+		} else {
+			this.rmUpdate = false;
+		}
+	},
+	
+		//Calendar Tap Handlers
+	handleCalHold: function(event) {
+		// set the hold var, send to tap handler
+		this.rmcalHold = true;
+		this.handleCalTap(event);
+	},
+	
+	handleCalTap: function(event) {
+		Mojo.Event.stop(event);
+		var x = event.down.offsetX;
+		var y = event.down.offsetY;
+		//get rid of tap areas not in calendar day area
+		if(x <= 30 || y <= 40 || x>= 241) {
+			this.rmcalHold = false;
+			return;
+		}
+		var rmcan = event.target.id;
+		switch (rmcan) {
+			case 'JPleft0':
+				var rmindex = 0;
+				break;
+			case 'JPleft1':
+				var rmindex = 1;
+				break;
+			case 'JPleft2':
+				var rmindex = 2;
+				break;
+			case 'JPright0':
+				var rmindex = 3;
+				break;
+			case 'JPright1':
+				var rmindex = 4;
+				break;
+			case 'JPright2':
+				var rmindex = 5;
+				break;
+		}
+		// get first day index month year
+		if (x && y && (rmindex !== undefined)) {
+			var calx = x - 30;
+			var caly = y - 40;
+			var cald1idx = this.RM[rmindex].fstDayLidx;
+			var calcol = Math.floor(calx/this.colHW);
+			var calrow = Math.floor(caly/this.colHW);
+			var caldate = ((calrow * 7) + calcol +1) - cald1idx;
+			if((caldate > this.RM[rmindex].maxdays) || (caldate <= 0)) {
+				// tapped an area with invalid date
+				this.rmcalHold = false;
+				return;
+			}
+			var calmon = this.RM[rmindex].month;
+			var calyear = this.RM[rmindex].year;
+			if((calyear !== undefined) && (calmon !== undefined) && (caldate !== undefined)) {
+				// setting end date
+				var jpTo = new Date(calyear, calmon, caldate, 12);
+				this.dateModel.date = jpTo;
+				this.rmUpdate = !this.rmcalHold;
+				this.controller.modelChanged(this.dateModel);
+				Mojo.Event.send(this.controller.get('jumpto-picker'), Mojo.Event.propertyChange, {value: this.dateModel.date} )
+				if(this.rmcalHold === false) {
+					this.onJumpTo('Date', event);
+				} else {
+					this.rmcalHold = false;	
+				}
+			}
+		}
+		return;
+	},
 });
\ No newline at end of file
diff --git a/usr/palm/applications/com.palm.app.calendar/javascripts/recurrence-warning.js b/usr/palm/applications/com.palm.app.calendar/javascripts/recurrence-warning.js
index 20fee62..23d1ea1 100644
--- a/usr/palm/applications/com.palm.app.calendar/javascripts/recurrence-warning.js
+++ b/usr/palm/applications/com.palm.app.calendar/javascripts/recurrence-warning.js
@@ -17,7 +17,19 @@ var RecurrenceWarning = Class.create({
 	
 	setup : function(widget) {
 		this.widget = widget;
+		var cancelDiv = this.sceneAssistant.controller.get('Cancel');
+		var singleDiv = this.sceneAssistant.controller.get('Single');
+		singleDiv.setAttribute("class", "palm-button secondary");
+		var buttonDiv = this.sceneAssistant.controller.get('Cancel').parentNode;
+		var thisFutureBtn = this.sceneAssistant.controller.document.createElement("div");
+		thisFutureBtn.setAttribute("id", "ThisFuture");
+		thisFutureBtn.setAttribute("class", "palm-button");
+		thisFutureBtn.setAttribute("x-mojo-tap-highlight", "momentary");
+		thisFutureBtn.setAttribute("x-mojo-loc",'""');
+		thisFutureBtn.innerHTML = $L("Change this and future");
+		buttonDiv.insertBefore(thisFutureBtn, cancelDiv);
 		this.sceneAssistant.controller.get('Series').addEventListener(Mojo.Event.tap, this.handleSeries.bindAsEventListener(this));
+		this.sceneAssistant.controller.get('ThisFuture').addEventListener(Mojo.Event.tap, this.handleThisAndFuture.bindAsEventListener(this));
 		this.sceneAssistant.controller.get('Single').addEventListener(Mojo.Event.tap, this.handleSingle.bindAsEventListener(this));
 		this.sceneAssistant.controller.get('Cancel').addEventListener(Mojo.Event.tap, this.handleCancel.bindAsEventListener(this));
 		
@@ -36,6 +48,14 @@ var RecurrenceWarning = Class.create({
 		
 		
 	},
+	
+	handleThisAndFuture: function(event) {
+		Mojo.Log.info("in handle this and future");
+		this.widget.mojo.close();
+		Event.stop(event);
+		this.sceneAssistant.saveThisAndFuture();
+	},
+	
 	handleSingle: function(event) {
 		//Mojo.Log.info("************handling single");
 		this.widget.mojo.close();		
@@ -53,4 +73,521 @@ var RecurrenceWarning = Class.create({
 		Event.stop(event);
 	}		
 	
+});
+
+var UberTimezoneConverter = Class.create({
+	
+	initialize: function(controller, sceneAssistant, tz, timeStamp, uberZones) {
+		this.app = getAppAssistant();
+		this.sceneAssistant = sceneAssistant;
+		this.systemService = this.app.getSystemService();
+		this.controller = controller;
+		this.timeStamp = timeStamp;
+		var uZones = uberZones.clone();
+		this.eventTimezone = tz;
+		if(uZones && uZones.length >0){
+			this.uberTzIds = [];
+			var len = uZones.length;
+			for(var i=0; i< len; i++){
+				var obj = {}, str, txt, result, patt = /\//;
+				str = obj.ZoneID = uZones[i].tz;
+				result = str.split(patt);
+				if(result && result.length === 2){
+					txt = $L(result[0]) + "/" + $L(result[1]);
+					obj.Description =  txt;
+				} else if (result && (result.length === 1 || result.length > 2)){
+					obj.Description =  $L(str);
+				}
+				obj.needMore = uZones[i].tz ? false : true;
+				this.uberTzIds.push(obj);
+			}
+			this.uberTzIds.push({Description:$L("Tap to retrieve more timezones"), needMore: true});
+		}
+		
+	},
+	
+	getTimeZoneList: function() {		
+		//this.timeZoneQuery = this.timeZoneQuery.bind(this);
+		this.getTimeZoneValuesReq = this.systemService.getTimeZoneValues(this.timeZoneQuery.bind(this));
+	},
+	
+	timeZoneQuery: function(payload) {
+		if(!payload.timeZone){
+			return;
+		}
+		var len = payload.timeZone.length;
+		for (var i = 0; i < len; i++) {
+			var obj = {};
+			var tZone = payload.timeZone[i];
+			obj.Country = $L(tZone.Country);
+			obj.City = $L(tZone.City);
+			obj.CountryAndCity = $L(tZone.Country) +' '+ $L(tZone.City);
+			obj.Description = $L(tZone.Description);
+			obj.ZoneID = tZone.ZoneID;
+			obj.needMore = false;
+			this.tzList.push(obj);
+		}
+		this.tzList.sort(this.compareCountry.bind(this));
+		this.tzListModel.items = this.tzList;
+		this.controller.modelChanged(this.tzListModel, this);
+		this.filtModel.disabled=false;
+		this.controller.modelChanged(this.filtModel, this);
+		this.controller.get('uber-timezone-grptitle').innerHTML = '<span x-mojo-loc="">' + $L("Choose the nearest major city") + '</span>';
+		Mojo.Event.listen(this.controller.get("uberTimezonefilterField"),Mojo.Event.filter, this.uberTimezoneFilterHandler);
+		this.controller.get('uberTimezonefilterField').mojo.setCount(this.tzList.length);
+		this.controller.get('uber-timezone-list').mojo.setLength(this.tzList.length);
+		this.controller.get('uber-timezone-list').mojo.noticeUpdatedItems(0, this.tzList);
+	},
+	
+	compareCountry: function(a,b) {
+		var nameA = a.CountryAndCity.toLocaleLowerCase();
+		var nameB = b.CountryAndCity.toLocaleLowerCase();
+		return nameA.localeCompare(nameB);
+	},
+	
+	handleUberTimezoneFilter: function(event) {
+		if(event.filterString == "" || !event.filterString) {
+			this.controller.get('uber-timezone-list').mojo.setLength(this.tzList.length);
+			this.controller.get('uber-timezone-list').mojo.noticeUpdatedItems(0, this.tzList);
+			//this.controller.get('uberTimezonefilterField').mojo.close();
+			return;
+		}
+		var matching, lowerFilter;
+		var filterString = event.filterString;
+		if (filterString) {
+			lowerFilter = filterString.toLocaleLowerCase();
+			function matchesName (tzone) {
+				return tzone.Country.toLocaleLowerCase().startsWith(lowerFilter) || tzone.City.toLocaleLowerCase().startsWith(lowerFilter) || tzone.Description.toLocaleLowerCase().include(lowerFilter);
+			}
+			matching = this.tzList.findAll(matchesName);
+		} else {
+			matching = this.tzList;
+		}
+		this.tzListModel.items = matching;	
+		this.controller.get('uber-timezone-list').mojo.noticeUpdatedItems(0, matching);		
+		this.controller.get('uber-timezone-list').mojo.setLength(matching.length);
+		this.controller.get('uberTimezonefilterField').mojo.setCount(matching.length);
+	},
+	
+	setup : function(widget) {
+		this.widget = widget;
+		this.controller.get('Cancel').innerHTML = $L('Cancel');
+		this.tzList = [];
+		this.tzListAttrs = {
+			itemTemplate:'shared/ubertz-item',
+			listTemplate:'shared/uber-tz-listcontainer',
+			formatters: {
+					Description: function(value, model) {
+						return model.Description;
+					}
+			}
+		};
+		this.controller.setupWidget("TZscroller",{mode: 'vertical'});
+		this.tzListModel = {listTitle: 'timezones', items: this.uberTzIds};
+		this.controller.setupWidget('uber-timezone-list', this.tzListAttrs, this.tzListModel);
+		this.newTS = this.timeStamp;
+		var msgDiv = this.controller.get('uber-tz-msg');
+		var result, txt, patt = /\//;
+		result = this.eventTimezone.split(patt);
+		if(result && result.length === 2){
+			txt = $L(result[0]) + "/" + $L(result[1]);
+		} else if (result && (result.length === 1 || result.length > 2)){
+			txt =  $L(this.eventTimezone);
+		}
+		msgDiv.innerHTML = $L('Current Timezone') + ': ' + txt;
+		this.uberTimezoneFilterHandler = this.handleUberTimezoneFilter.bind(this);
+		this.controller.setupWidget('uberTimezonefilterField',
+						this.filtAttrs = {filterFieldHeight: 40},
+						this.filtModel={disabled: true} 
+		);
+		
+	},
+	
+	handleTimezoneListTap: function(event){
+		if(event.item && event.item !== undefined){
+			if(event.item.needMore){ // timezone not there retrieve more
+				this.getTimeZoneList();
+				return;
+			} else { // don't need more just do the conversion
+				this.setPickedTimezone(event.item.ZoneID);
+			}
+		}
+		this.widget.mojo.close();
+	},
+	
+	activate: function(){
+		this.uberTimezoneTapHandler = this.handleTimezoneListTap.bind(this);
+		this.controller.listen(this.controller.get("uber-timezone-list"), Mojo.Event.listTap, this.uberTimezoneTapHandler);
+		this.cancelTapHandler=this.onCancel.bind(this);
+		this.controller.get ('Cancel').addEventListener(Mojo.Event.tap, this.cancelTapHandler);
+		var grpDiv = this.controller.get('uber-timezone-grptitle');
+		grpDiv.innerHTML = '<span x-mojo-loc="">' + $L("Timezones in calendars") + '</span>';
+	},
+	
+	deactivate: function(){
+		this.controller.stopListening(this.controller.get("uber-timezone-list"), Mojo.Event.listTap, this.uberTimezoneTapHandler);
+		this.controller.get ('Cancel').removeEventListener(Mojo.Event.tap, this.cancelTapHandler);
+		if(this.filtModel.disabled === false){
+			this.controller.get('uberTimezonefilterField').mojo.close();
+			Mojo.Event.stopListening(this.controller.get("uberTimezonefilterField"),Mojo.Event.filter, this.uberTimezoneFilterHandler);
+		}
+	},
+	
+	onCancel: function (event) {
+		this.controller.get('uber-timezone-list').mojo.setLength(this.tzList.length);
+		this.controller.get('uber-timezone-list').mojo.noticeUpdatedItems(0, this.tzList);
+		if(this.filtModel.disabled === false){
+			this.controller.get('uberTimezonefilterField').mojo.close();
+		}
+		this.widget.mojo.close();
+	},
+	
+	//have to load timezone selected if it was not in the original listing
+	setPickedTimezone: function(tzId) {
+		var year = new Date(this.timeStamp).getFullYear();
+		var tzFuture = this.sceneAssistant.tzMgr.loadTimezones([tzId], [year]);
+		tzFuture.then(this, function(future) {
+			future.getResult();
+			
+				// timezone loaded;
+				this.newTS = this.sceneAssistant.tzMgr.convertTime(this.timeStamp, tzId,this.eventTimezone);
+				// set the time and close
+				this.sceneAssistant.convertedTS = this.newTS && this.newTS;
+				if(this.filtModel.disabled === false){
+					this.controller.get('uberTimezonefilterField').mojo.close();
+				}
+				this.widget.mojo.close();
+				this.sceneAssistant.uberConverterCallBack();
+			
+		});
+		
+		return tzFuture;
+	}
+});
+
+var UberAdvancedCopy = Class.create({
+
+	initialize: function(controller, sceneAssistant, persObj) {
+		this.app = getAppAssistant();
+		this.sceneAssistant = sceneAssistant;
+		this.controller = controller;
+		this.personObj = persObj;
+		this.setupPickedArray();
+		this.parsePerObj();
+	},
+	
+	setupPickedArray: function setupPickedArray(){
+		var arr = [];
+		arr[0] = {field: "note", replace: false, data:""};
+		arr[1] = {field: "loc", replace: false, data:""};
+		arr[2] = {field: "subject", replace: false, data:""};
+		this.pickedArray = arr;
+	},
+	
+	findType: function findType(type){
+		if(!!type){
+			var loc;
+			switch(type){
+							case "type_home":
+							loc = $L("HOME");
+							break;
+							
+							case "type_work":
+							loc = $L("WORK");
+							break;
+							
+							case "type_mobile":
+							loc = $L("MOBILE");
+							break;
+							
+							case "type_other":
+							default:
+							loc = $L("OTHER");
+							break;
+			}
+			return loc;
+		}
+		return false;
+	},
+	
+	parsePerObj: function (){
+		if(this.personObj && this.personObj != undefined){
+			this.personDataArray = [];
+			var contact = this.personObj;
+			var obj, lname, fname, item, txt, fields = ["name", "emails", "phoneNumbers", "urls", "notes", "addresses", "organization"];
+			for(var prop in this.personObj){
+				
+				if(this.personObj.hasOwnProperty(prop)){
+					if(fields.indexOf(prop) !== -1){
+						
+						obj = {}, item = {}, txt ="";
+						obj = this.personObj[prop];
+						//console.error(" person obj changed ::::::::::::: " + prop + ": " + JSON.stringify(obj));
+						if(prop === "name"){
+							item.label = "";
+							item.field = "";
+							txt = (obj.givenName || "");
+							txt += txt !== "" ? " " + (obj.familyName || "") : (obj.familyName || ""); 
+							if(txt){
+								item.data = txt;
+								this.personDataArray.unshift(item);
+							}
+						} else if(prop === "organization"){
+							item.label = "";
+							item.field = "";
+							txt = (obj.name || ""); 
+							if(txt){
+								item.data = txt;
+								this.personDataArray.push(item);
+							}
+						} else if(prop === "notes"){
+							var len = obj && obj.length;
+							if(len && len > 0){
+								for(var i =0;i < len; i++){
+									item = {};
+									item.field = "";
+									txt = "";
+									if(obj[i]){
+										item.label = "";
+										txt = (obj[i] || ""); 
+										if(txt){
+											item.data = txt;
+											this.personDataArray.push(item);
+										}
+									}
+								}
+							}
+						} else if(prop === "addresses"){
+							var len = obj && obj.length;
+							if(len && len > 0){
+								for(var i =0;i < len; i++){
+									item = {};
+									item.field = "";
+									txt = "";
+									if(obj[i].type != undefined ) { 
+										if(obj[i].streetAddress || obj[i].locality || obj[i].country || obj[i].region || obj[i].postalCode) {
+											var txt = obj[i].streetAddress ? obj[i].streetAddress : "";
+											txt += obj[i].locality ? (txt !== "" ? ", " : "") + obj[i].locality : "";
+											txt += obj[i].region ? (txt !== "" ? ", " : "") + obj[i].region : "";
+											txt += obj[i].postalCode ? (txt !== "" ? ", " : "") + obj[i].postalCode : "";
+											txt += obj[i].country ? (txt !== "" ? ", " : "") + obj[i].country  : "";
+										}
+										
+										item.label = this.findType(obj[i].type);
+										if(txt){
+											item.data = txt;
+											this.personDataArray.push(item);
+										}
+									}
+								}
+							}
+						} else {
+							var len = obj && obj.length;
+							if(len && len > 0){
+								for(var i =0;i < len; i++){
+									item = {};
+									item.field = "";
+									txt = "";
+									item.label = this.findType(obj[i].type) || "";
+									txt = obj[i].value;
+									if(txt){
+										item.data = txt;
+										this.personDataArray.push(item);
+									}
+								}
+							}
+						}
+					}
+				}
+			}
+		}
+	},
+	
+	setup : function(widget) {
+		this.widget = widget;
+		var tzList = this.controller.get('uber-timezone-cont');
+		var tzScroller = this.controller.get('TZscroller');
+		var hgt = '360px', devinfoHeight = Mojo.Environment.DeviceInfo.screenHeight;
+		if(devinfoHeight){
+			if(devinfoHeight == 400){
+				hgt = '280px';
+			}
+		}
+		tzScroller.setAttribute('style', "height:"+hgt+";");
+		tzScroller.removeChild(tzList);
+		tzScroller.innerHTML = '<div class="palm-group"><div class="palm-group-title" x-mojo-loc="">' + $L('check to replace, clear to append') + '</div>' +
+									'<div class="palm-row single"><div class="palm-row-wrapper">' +
+									'<table width="100%" style="margin-left:-20px;">	<tr ><td width="30%" nowrap="nowrap"><div ><div id="adv-copy-subject" x-mojo-element="CheckBox" class="icon left" style:"padding:0px; margin:0px -10px 0px -10px;"></div><div style="font:10px prelude; overflow:hidden;padding-top:15px;" x-mojo-loc="">' + $L('Subject')+ '</div></div></td>' +
+										'<td width="30%" nowrap="nowrap"><div><div id="adv-copy-location" x-mojo-element="CheckBox" class="icon left" style:"padding=2px; margin:2px;></div><div style="font:10px prelude; overflow:hidden;padding-top:15px;" x-mojo-loc="">' + $L('Location')+ '</div></div></td>' +
+										'<td width="30% right="0px"" nowrap="nowrap" style="margin-left:30px;"><div><div id="adv-copy-note" x-mojo-element="CheckBox" class="icon left" style:"padding=2px; margin:2px;></div><div style="font:10px prelude; overflow:hidden;padding-top:15px;" x-mojo-loc="">' + $L('Note')+ '</div></div></td>' +
+									'</tr></table></div></div>' +
+								'</div>';
+		
+		if(this.personDataArray && this.personDataArray.length > 0){
+			var item, len = this.personDataArray.length;
+			for(var i=0;i<len;i++){
+				item = {};
+				item = this.personDataArray[i];
+				var newDiv1 = document.createElement('div');
+				newDiv1.setAttribute('class', "palm-row");
+				newDiv1.innerHTML =  '<div class="palm-row-wrapper">' + 
+						'<table width="100%"><tr><td width="70%" ><div id="'+i+'_person_obj_item_txt" style="font:12px prelude; overflow:hidden;max-width:100%">' + (item.label != "" ? item.label + ": " + item.data : item.data)+ '</div></td>' +
+							'<td width="30%" nowrap="nowrap"><div id="'+i+'_person_obj_item_button" style="overflow:hidden;max-width:100%;" class="palm-button" x-mojo-tap-highlight="momentary" x-mojo-loc="">'+ $L('Not in use') +  '</div></td>' +
+						'</tr></table></div>';
+				tzScroller.appendChild(newDiv1);
+				//this.controller.setupWidget(i+'_person_obj_item_button', {},{label:"", disabled:false});
+			}
+		}
+		var parentDiv = this.controller.get('Cancel').parentNode;
+		parentDiv.innerHTML = '<table width="100%" style="margin-top:-20px; margin-bottom:-10px"><tr><td width="50%"><div id="Cancel" class="palm-button dismiss" x-mojo-tap-highlight="momentary" style="overflow:hidden" x-mojo-loc="">' + $L("Cancel") + '</div></td>' +
+				'<td width="50%"><div id="Done" class="palm-button affimative" x-mojo-tap-highlight="momentary" style="overflow:hidden" x-mojo-loc="">' + $L('Done') + '</div></td></tr></table>';
+		
+		this.controller.setupWidget("TZscroller",{mode: 'vertical'});
+		var msgDiv = this.controller.get('uber-tz-msg');
+		msgDiv.innerHTML = $L('Contact data');
+		this.subjectModel = {value: this.pickedArray[2].replace};
+		this.locModel = {value: this.pickedArray[1].replace};
+		this.noteModel = {value: this.pickedArray[0].replace};
+		this.checkBoxAttr = {modelProperty: 'value'	};
+		this.controller.setupWidget('adv-copy-subject',this.checkBoxAttr,this.subjectModel);
+		this.controller.setupWidget('adv-copy-location',this.checkBoxAttr,this.locationModel);
+		this.controller.setupWidget('adv-copy-note',this.checkBoxAttr,this.noteModel);
+		
+	},
+	
+	activate: function(){
+		//this.pickedFieldIndex = null;
+		this.cancelTapHandler=this.onCancel.bind(this);
+		this.controller.get ('Cancel').addEventListener(Mojo.Event.tap, this.cancelTapHandler);
+		this.doneTapHandler=this.onDone.bind(this);
+		this.controller.get ('Done').addEventListener(Mojo.Event.tap, this.doneTapHandler);
+		this.controller.listen('adv-copy-subject', Mojo.Event.propertyChange, this.chooseSubjectEdit.bind(this));
+		this.controller.listen('adv-copy-location', Mojo.Event.propertyChange, this.chooseLocationEdit.bind(this));
+		this.controller.listen('adv-copy-note', Mojo.Event.propertyChange, this.chooseNotesEdit.bind(this));
+		if(this.personDataArray && this.personDataArray.length > 0){
+			var name, btn, len = this.personDataArray.length;
+			this.advButtonTapHandler = this.handleAdvButtonTap.bind(this);
+			for(var i=0;i<len;i++){
+				btn = this.controller.get((i+'_person_obj_item_button'));
+				btn.addEventListener(Mojo.Event.tap, this.advButtonTapHandler);
+			}
+		}
+	},
+	
+	deactivate: function(){
+		this.controller.get ('Cancel').removeEventListener(Mojo.Event.tap, this.cancelTapHandler);
+		this.controller.get ('Done').removeEventListener(Mojo.Event.tap, this.doneTapHandler);
+		this.controller.stopListening('adv-copy-subject', Mojo.Event.propertyChange, this.chooseSubjectEdit.bind(this));
+		this.controller.stopListening('adv-copy-location', Mojo.Event.propertyChange, this.chooseLocationEdit.bind(this));
+		this.controller.stopListening('adv-copy-note', Mojo.Event.propertyChange, this.chooseNotesEdit.bind(this));
+		if(this.personDataArray && this.personDataArray.length > 0){
+			var name, len = this.personDataArray.length;
+			for(var i=0;i<len;i++){
+				btn = this.controller.get((i+'_person_obj_item_button'));
+				btn.removeEventListener(Mojo.Event.tap, this.advButtonTapHandler);
+			}
+		}
+	},
+	
+	onCancel: function (event) {
+		Event.stop(event);
+		this.widget.mojo.close();
+	},
+	
+	onDone: function (event){
+		Event.stop(event);
+		this.updatePickedArray();
+		this.sceneAssistant.uberAdvCopyDone(this.pickedArray);
+		this.widget.mojo.close();
+	},
+	
+	handleAdvButtonTap: function(e){
+		//Mojo.Log.error("Handle adv copy button::::::::: " + Object.keys(e));
+		//Mojo.Log.error("Handle adv copy button::::::::: " + (e.srcElement.id) + " num:: " + parseInt(e.srcElement.id, 10));
+		this.pickedIdx = null;
+		if(e.srcElement.id){
+			this.pickedIdx = parseInt(e.srcElement.id, 10);
+			var items = [
+				{label: $L("Not in use"), command: 0}
+				,{label: $L("Subject"), command: 1}
+				,{label: $L("Location"), command:2}
+				,{label: $L("Note"), command:3}
+			];
+			
+			this.controller.popupSubmenu({
+					onChoose: this.fieldChosen.bind(this),
+					items: items,
+					placeNear: this.controller.get(e.srcElement.id)
+					});
+		}
+		Event.stop(e);
+		return;
+	},
+	
+	fieldsArray: [$L('Not in use'), $L('Subject'), $L('Location'), $L('Note')],
+	
+	fieldChosen: function fieldChosen(idx){
+		//Mojo.Log.error("field chosen ::::::::: " + (idx) + " , pickedIdx: " + this.pickedIdx);
+		if(idx !== undefined && this.pickedIdx !== undefined && this.pickedIdx !== null){
+			var row = this.pickedIdx;
+			var idex = parseInt(idx, 10);
+			if(idex === 0){
+				this.personDataArray[row].field = "notInUse";
+			} else if(idex === 1){
+				this.personDataArray[row].field = "subject";
+			} else  if(idex === 2){
+				this.personDataArray[row].field = "loc";
+			} else  if(idex === 3){
+				this.personDataArray[row].field = "note";
+			}
+			this.updatePickedArray();
+			this.controller.get(row+'_person_obj_item_button').innerHTML = this.fieldsArray[idex];
+			
+		}
+		return true;
+	},
+	
+	updatePickedArray: function updatePickedArray(){
+		var txt, itemSub = "", itemLoc = "", itemNote = "", obj = {}, len;
+		len = this.personDataArray && this.personDataArray.length;
+		if(len && len > 0){
+			for(var i = 0; i < len; i++){
+				obj = {};
+				obj = this.personDataArray[i] && this.personDataArray[i];
+				if(obj.field && obj.field != undefined && obj.field !== "notInUse" && obj.data && obj.data != undefined && obj.data !== ""){
+					switch(obj.field){
+						case "note":
+						itemNote += (itemNote !== "" )? " " + obj.data : obj.data;
+						break;
+						
+						case "subject":
+						itemSub += (itemSub !== "" )? " " + obj.data : obj.data;
+						break;
+						
+						case "loc":
+						itemLoc += (itemLoc !== "" )? " " + obj.data : obj.data;
+						break;
+					}
+					//Mojo.Log.error("gen picked object ::::::" + itemSub + " :::::: loc : " + itemLoc + "note::::::: " + itemNote);
+				}
+			}
+			
+		}
+		this.pickedArray[0].data = itemNote;
+		this.pickedArray[1].data = itemLoc;
+		this.pickedArray[2].data = itemSub;
+		//Mojo.Log.error("gen picked array ::::::::::::: " + JSON.stringify(this.pickedArray));
+	},
+	
+	chooseSubjectEdit: function chooseSubjectEdit(event){
+		this.pickedArray[2].replace = event.value;
+	},
+	
+	chooseLocationEdit: function chooseLocationEdit(event){
+		this.pickedArray[1].replace = event.value;
+	},
+	
+	chooseNotesEdit: function chooseNotesEdit(event){
+		this.pickedArray[0].replace = event.value;
+	},
 });
\ No newline at end of file
diff --git a/usr/palm/applications/com.palm.app.calendar/sources.json b/usr/palm/applications/com.palm.app.calendar/sources.json
index 8488b5b..d933c8b 100644
--- a/usr/palm/applications/com.palm.app.calendar/sources.json
+++ b/usr/palm/applications/com.palm.app.calendar/sources.json
@@ -12,6 +12,7 @@
 ,	{	"source": "javascripts\/accountLocalizations.js"}
 ,	{	"source": "javascripts\/confirm-deleteevent.js"	}
 ,	{	"source": "javascripts\/formatting-utils.js"	}
+,	{	"source": "javascripts\/datejs\/week.js"	}
 
 ,	{	"source": "app\/models\/busy.free.manager.js"		}
 ,	{	"source": "app\/models\/calendar.event.js"			}
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/calendar.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/calendar.css
index ad129f8..e0b9bee 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/calendar.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/calendar.css
@@ -60,6 +60,17 @@ body {
 .palm-menu-icon.edit {
 		background-image: url(../images/menu-icon-compose.png);
 }
+.palm-menu-icon.new-timed{
+		background-image: url(../images/menu-icon-newevent.png);
+}
+
+.palm-menu-icon.new-allday {
+		background-image: url(../images/menu-icon-today.png);
+}
+
+.palm-menu-icon.menu-agenda {
+		background-image: url(/media/internal/.scrims/ubercalendar/menu-icon-agenda.png);
+}
 
 .palm-menu-icon.today {
 		background-image: url(../images/menu-icon-today.png);
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/datetime.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/datetime.css
index d49522c..c31a700 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/datetime.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/datetime.css
@@ -101,7 +101,44 @@ div.list-separator 		{
 .item_selected {
 		font-weight: bold;
 }				
-
+#DPscrol {
+	height:220px;
+}
+#DPscrolct {
+	position: relative;
+	width:1566;
+	height: 220px;
+}
+.DPmv {
+	position: absolute;
+	display: block;
+	width: 240px;
+}
+#DPmonth_0 {
+	left: 40px;
+	border-right:1px solid black;
+	border-left:1px solid black;
+}
+#DPmonth_1{
+	left: 281px;
+	border-right:1px solid black;
+}
+#DPmonth_2 {
+	left: 522px;
+	border-right:1px solid black;
+}
+#DPmonth_3 {
+	left: 763px;
+	border-right:1px solid black;
+}
+#DPmonth_4 {
+	left: 1004px;
+	border-right:1px solid black;
+}
+#DPmonth_5 {
+	left: 1245px;
+	border-right:1px solid black;
+}
 
 #dtl_allday_cb .checkbox {
 	margin-right:0px;
@@ -115,6 +152,50 @@ div.list-separator 		{
 .calendar-dtl-timedate .icon.timedate {
 	background: url(../images/calendar-dtl/timedate-icon.png) center center no-repeat;
 }
+.popCanvas .palm-button
+{
+background-image:url('../images/notification-large-calendar.png');
+}
+.popCanvas .palm-button.selected
+{
+background-image:url('../images/notification-large.png');
+}
+.popCanvas .palm-button {
+	padding: 10px 0px 0px 0px;
+	width: 50px;
+	height: 50px;
+	vertical-align: bottom;
+	margin-top: 0px;
+	margin-left: 0px;
+	margin-right: 0px;
+	margin-bottom: 0px;
+	overflow: hidden;
+   -webkit-border-image: none; 
+}
+.popTimezone .palm-button
+{
+background-image:url('../images/calendar-dtl/timedate-icon.png');
+background-position: center top;
+background-repeat: repeat-y;
+}
+.popTimezone .palm-button.selected
+{
+background-image:url('../images/calendar-dtl/timedate-icon-press.png');
+background-position: center top;
+background-repeat: repeat-y;
+}
+.popTimezone .palm-button {
+	padding: 10px 0px 0px 0px;
+	width: 50px;
+	height: 60px;
+	vertical-align: bottom;
+	margin-top: 0px;
+	margin-left: 0px;
+	margin-right: 0px;
+	margin-bottom: 0px;
+	overflow: hidden;
+   -webkit-border-image: none; 
+}
 
 /*Reduce top and bottom padding to fit more on the screen*/
 
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/day.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/day.css
index 33e0a75..a353341 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/day.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/day.css
@@ -244,6 +244,12 @@ Copyright 2009 Palm, Inc.  All rights reserved.
 	overflow: hidden;
 }
 
+.alldayeventsListshrink {
+	position: relative;
+	top: 0px;
+	width: 100%;
+	overflow: hidden;
+}
 
 /* CALENDAR EVENTS SECTION */
 #dv_event_container {
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/edit.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/edit.css
index b95f937..22dead2 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/edit.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/edit.css
@@ -50,7 +50,27 @@ Copyright 2009 Palm, Inc.  All rights reserved.
 	width: 150px;
 	height: 40px;
 }
-
+#uberIconButton {
+	height:40px;
+	font-size: 14px;
+	width:150px;
+}
+#edit-uber-icon-picker 
+{
+background:url('../images/day-event-info.png') center no-repeat;
+}
+#edit-uber-icon-picker {
+	padding: 0px;
+	width: 35px;
+	height: 35px;
+	vertical-align: center;
+	margin-top: 0px;
+	margin-left: -1px;
+	margin-right: 5px;
+	margin-bottom: 0px;
+	border-width:5px;
+	-webkit-border-image:url('../images/date-picker-images/background-focused-shadow.png') 46% stretch;
+}
 #calendarButton {
 	font-size: 14px;
 	width: 90%;
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/event-colors.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/event-colors.css
index 3b455df..ea341e1 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/event-colors.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/event-colors.css
@@ -25,6 +25,28 @@ Copyright 2009 Palm, Inc.  All rights reserved.
 .monthview-busy-time.cal-color-purple 				{ background: url(../images/month-busy-time-purple.png) 0 0 fixed repeat; }
 .monthview-busy-time.cal-color-teal 				{ background: url(../images/month-busy-time-teal.png) 0 0 fixed repeat; }
 
+/* Month View: partly busy time */
+.monthview-partly-busy-time.cal-color-blue 			{ background: url(../images/month-busy-time-blue.png) 0 0 fixed repeat; }
+.monthview-partly-busy-time.cal-color-green 		{ background: url(../images/month-busy-time-green.png) 0 0 fixed repeat; }
+.monthview-partly-busy-time.cal-color-yellow 		{ background: url(../images/month-busy-time-yellow.png) 0 0 fixed repeat; }
+.monthview-partly-busy-time.cal-color-gray 			{ background: url(../images/month-busy-time-gray.png) 0 0 fixed repeat; }
+.monthview-partly-busy-time.cal-color-orange 		{ background: url(../images/month-busy-time-orange.png) 0 0 fixed repeat; }
+.monthview-partly-busy-time.cal-color-pink 			{ background: url(../images/month-busy-time-pink.png) 0 0 fixed repeat; }
+.monthview-partly-busy-time.cal-color-red 			{ background: url(../images/month-busy-time-red.png) 0 0 fixed repeat; }
+.monthview-partly-busy-time.cal-color-purple 		{ background: url(../images/month-busy-time-purple.png) 0 0 fixed repeat; }
+.monthview-partly-busy-time.cal-color-teal 			{ background: url(../images/month-busy-time-teal.png) 0 0 fixed repeat; }
+
+/* Month View: partly busy time pixi */
+.monthview-partly-busy-time-pixi.cal-color-blue 			{ background: url(../images/month-busy-time-blue.png) 0 0 fixed repeat; }
+.monthview-partly-busy-time-pixi.cal-color-green 		{ background: url(../images/month-busy-time-green.png) 0 0 fixed repeat; }
+.monthview-partly-busy-time-pixi.cal-color-yellow 		{ background: url(../images/month-busy-time-yellow.png) 0 0 fixed repeat; }
+.monthview-partly-busy-time-pixi.cal-color-gray 			{ background: url(../images/month-busy-time-gray.png) 0 0 fixed repeat; }
+.monthview-partly-busy-time-pixi.cal-color-orange 		{ background: url(../images/month-busy-time-orange.png) 0 0 fixed repeat; }
+.monthview-partly-busy-time-pixi.cal-color-pink 			{ background: url(../images/month-busy-time-pink.png) 0 0 fixed repeat; }
+.monthview-partly-busy-time-pixi.cal-color-red 			{ background: url(../images/month-busy-time-red.png) 0 0 fixed repeat; }
+.monthview-partly-busy-time-pixi.cal-color-purple 		{ background: url(../images/month-busy-time-purple.png) 0 0 fixed repeat; }
+.monthview-partly-busy-time-pixi.cal-color-teal 			{ background: url(../images/month-busy-time-teal.png) 0 0 fixed repeat; }
+ 
 /* Week View: Events */
 .wv_event.cal-color-blue,
 .wv_event.cal-color-green,
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/month.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/month.css
index cafffaf..563d10e 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/month.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/month.css
@@ -124,6 +124,30 @@
 		float: left;
 }
 
+.monthview-partly-busy-time {
+		background: none;
+		background-image: url(../images/busy-time.png);
+		background-repeat: repeat;
+		background-attachment: fixed;
+		background-position: 0 0;
+		/*color: #FF0000;*/
+		width: 100%;
+		height: 16px;
+		float: left;
+}
+
+.monthview-partly-busy-time-pixi {
+		background: none;
+		background-image: url(../images/busy-time.png);
+		background-repeat: repeat;
+		background-attachment: fixed;
+		background-position: 0 0;
+		/*color: #FF0000;*/
+		width: 100%;
+		height: 10px;
+		float: left;
+}
+
 .monthview-busy-time {
 		background: none;
 		background-image: url(../images/busy-time.png);
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/notification.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/notification.css
index 233016d..820a508 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/notification.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/notification.css
@@ -15,9 +15,13 @@
 
 #reminder-email,
 #reminder-dismiss,
-#reminder-snooze {
+#reminder-snooze,
+#reminder-setsnooze,
+#reminder-snz-advance-button,
+#reminder-snz-previous-button,
+#reminder-snz-chosen-button  {
     height: 45px;
-	position: fixed;
+	overflow: hidden;
 	-webkit-box-sizing: border-box;
 	line-height: 45px;
 	text-align: center;
@@ -36,24 +40,47 @@
 #reminder-email .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 0 15 45 15 repeat repeat; }
 #reminder-email:active .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 45 15 0 15 repeat repeat; }
 
+#reminder-setsnooze .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 0 15 45 15 repeat repeat; }
+#reminder-setsnooze:active .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 45 15 0 15 repeat repeat; }
+
+#reminder-snz-advance-button .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 0 15 45 15 repeat repeat; }
+#reminder-snz-advance-button:active .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 45 15 0 15 repeat repeat; }
+
+#reminder-snz-previous-button .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 0 15 45 15 repeat repeat; }
+#reminder-snz-previous-button:active .button-wrapper { -webkit-border-image:url(../images/button-contact.png) 45 15 0 15 repeat repeat; }
+
+#reminder-snz-chosen-button .button-wrapper { -webkit-border-image:url(../images/button-snooze.png) 0 15 45 15 repeat repeat; }
+#reminder-snz-chosen-button:active .button-wrapper { -webkit-border-image:url(../images/button-snooze.png) 45 15 0 15 repeat repeat; }
+
 #reminder-dismiss,
-#reminder-snooze {
-	width: 50%;
-    bottom: 10px;
+#reminder-snooze 
+{
+	width: 40%;
+    float:left; 
+ 	padding-right: 5px;
 }
 
-#reminder-dismiss .button-wrapper { -webkit-border-image:url(../images/button-dismiss.png) 0 15 45 15 repeat repeat; }
-#reminder-dismiss:active .button-wrapper { -webkit-border-image:url(../images/button-dismiss.png) 45 15 0 15 repeat repeat; }
+#reminder-setsnooze {
+	width: 20%;
+	float:left;
+}
 
-#reminder-snooze {
- 	right: 0px; 
- 	padding-left: 5px;
+#reminder-snz-advance-button,
+#reminder-snz-previous-button {
+	width: 25%;
+	float:left;
 }
 
-#reminder-dismiss {
-    padding-right: 5px;
+#reminder-snz-chosen-button {
+	float:left;
+	width: 50%;
+	padding-right: 5px;
+	padding-left: 5px;
 }
 
+#reminder-dismiss .button-wrapper { -webkit-border-image:url(../images/button-dismiss.png) 0 15 45 15 repeat repeat; }
+#reminder-dismiss:active .button-wrapper { -webkit-border-image:url(../images/button-dismiss.png) 45 15 0 15 repeat repeat; }
+
 #reminder-snooze .button-wrapper { -webkit-border-image:url(../images/button-snooze.png) 0 15 45 15 repeat repeat; }
 #reminder-snooze:active .button-wrapper { -webkit-border-image:url(../images/button-snooze.png) 45 15 0 15 repeat repeat; }
 
@@ -112,6 +139,7 @@
 	width: 100%;
 	height: 48px;
 	padding: 2px 0px 0 0;
+	
 	vertical-align: middle;
 }
 
@@ -128,6 +156,7 @@
 }
 
 .dashboard-event-container .dashboard-event-title {
+
     height: 18px;
 	width: inherit;
     margin-top: 7px;
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/repeat.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/repeat.css
index 0a82496..9ecf2cc 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/repeat.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/repeat.css
@@ -19,7 +19,64 @@ Copyright 2009 Palm, Inc.  All rights reserved.
 	padding-left:0px;
 	padding-right:0px;
 }
-
+#RPscrol {
+	height:220px;
+}
+#RPscrolct {
+	position: relative;
+	width:1566;
+	height: 220px;
+}
+.RPmv {
+	position: absolute;
+	display: block;
+	width: 240px;
+}
+#RPmonth_0 {
+	left: 40px;
+	border-right:1px solid black;
+	border-left:1px solid black;
+}
+#RPmonth_1{
+	left: 281px;
+	border-right:1px solid black;
+}
+#RPmonth_2 {
+	left: 522px;
+	border-right:1px solid black;
+}
+#RPmonth_3 {
+	left: 763px;
+	border-right:1px solid black;
+}
+#RPmonth_4 {
+	left: 1004px;
+	border-right:1px solid black;
+}
+#RPmonth_5 {
+	left: 1245px;
+	border-right:1px solid black;
+}
+.rpDrawerBtnClass .palm-button
+{
+background-image:url('../images/notification-large-calendar.png');
+}
+.rpDrawerBtnClass .palm-button.selected
+{
+background-image:url('../images/notification-large.png');
+}
+.rpDrawerBtnClass .palm-button {
+	padding: 10px 0px 0px 0px;
+	width: 50px;
+	height: 50px;
+	vertical-align: bottom;
+	margin-top: 0px;
+	margin-left: 0px;
+	margin-right: 0px;
+	margin-bottom: 0px;
+	overflow: hidden;
+   -webkit-border-image: none; 
+}
 .repeat-day-text {
 	font-size: 14px;
 	text-align: center;
diff --git a/usr/palm/applications/com.palm.app.calendar/stylesheets/week.css b/usr/palm/applications/com.palm.app.calendar/stylesheets/week.css
index 729ae53..56f3513 100644
--- a/usr/palm/applications/com.palm.app.calendar/stylesheets/week.css
+++ b/usr/palm/applications/com.palm.app.calendar/stylesheets/week.css
@@ -122,6 +122,16 @@
 #wv_eventsDay0 {
 	left: 0px;
 }
+#eventsTap {
+	position: absolute;
+	top:0;
+	display:block;
+	border-right:1px solid black;
+/*  for debugging events Tap Canvas
+	border-top:3px solid red;
+	border-bottom:3px solid blue;
+*/
+}
 #wv_eventsDay1 {
 	left: 321px;
 }
diff --git a/usr/palm/frameworks/calendar/submission/29/concatenated.js b/usr/palm/frameworks/calendar/submission/29/concatenated.js
index e1ed3b4..481042e 100755
--- a/usr/palm/frameworks/calendar/submission/29/concatenated.js
+++ b/usr/palm/frameworks/calendar/submission/29/concatenated.js
@@ -25,6 +25,8 @@ var	_			= IMPORTS.underscore._
 
 //@ sourceURL=calendar/datejs/date.js
 
+if (!Date.CultureInfo) {	// Only initialize DateJS if it doesn't already exist in the current scope.
+
 /**
  * Version: 1.0 Alpha-1 
  * Build Date: 13-Nov-2007
@@ -130,7 +132,7 @@ try{r=Date.Grammar.start.call({},s);}catch(e){return null;}
 return((r[1].length===0)?r[0]:null);};Date.getParseFunction=function(fx){var fn=Date.Grammar.formats(fx);return function(s){var r=null;try{r=fn.call({},s);}catch(e){return null;}
 return((r[1].length===0)?r[0]:null);};};Date.parseExact=function(s,fx){return Date.getParseFunction(fx)(s);};
 
-
+}// END: if (!Date.CultureInfo) {	// Only initialize DateJS if it doesn't already exist in the current scope.
 //@ sourceURL=calendar/utils.js
 
 /* Copyright 2010 Palm, Inc.  All rights reserved. */
@@ -411,6 +413,9 @@ Utils.prototype = {
 		return singleton;
 	};
 
+
+
+
 })();
 
 exports.Utils = Utils;
@@ -565,6 +570,11 @@ var TimezoneManager = Class.create ({
 			this.gotLocalTz = true;
 		}			
 					
+		for(var j=tzIds.length-1;j>=0;j--){
+			if(tzIds[j] === "" || !tzIds[j]){
+				tzIds.splice(j,1);
+			}
+		}
 		tzYearPairs = this.findTzYearPairsNotInCache(tzIds, years);
 		if(tzYearPairs.length > 0){
 			future = PalmCall.call("palm://com.palm.systemservice/timezone/", "getTimeZoneRules", tzYearPairs);
@@ -971,6 +981,68 @@ RRuleManager.prototype = {
 	},
 
 	/*
+	 * setPosTest: determines if using a setPos rule
+	 * param rule     a BYDAY rule
+	 * param todayDate a date object
+	 * returns false or {inUse: true, lastDayWanted: Date} object that satisfies the last rule
+	*/
+	setPosTest: function (rule, todayDate) {
+		var inUse = false;
+		var ruleLength = rule.ruleValue.length;
+		if(ruleLength && ruleLength >1) {
+			var byDayArray = [];
+			var ford = parseInt(rule.ruleValue[0].ord, 10);
+			for(var i=0; i<ruleLength; i++) {
+				var ord = parseInt(rule.ruleValue[i].ord, 10);
+				if(ord && ord !== ford) {//we only care about last week type repeat
+					inUse = false; //default to just using first byday
+					return false; //cal doesn't support multiple pos days in monthly repeat 
+				} else if(ord && ord === ford) {
+					var DoW = rule.ruleValue[i].day;
+					if(byDayArray.indexOf(DoW) === -1) {//not in previously
+						byDayArray.push(DoW);
+					}
+					inUse = true;
+				}
+			} //should have an array with the last days wanted
+			if(inUse && byDayArray.length > 0) {
+				var dlen = 24*60*60*1000;
+				if(ford < 0) {
+					var beginMonthDay = -1;
+					var Lmon = todayDate.getMonth();
+					var Lyear = todayDate.getFullYear();
+					var nextMon = (Lmon + 1) > 11 ? Lmon +1 - 12 : Lmon + 1;
+					var nextYear = (Lmon + 1 ) > 11 ? Lyear + 1 : Lyear; 
+					var DayOfMonthTS = new Date(nextYear, nextMon, 1, 0, 0, 0, 0).getTime() + beginMonthDay*dlen;
+				} else if(ford >0) {
+					var beginMonthDay = 1;
+					var Lmon = todayDate.getMonth();
+					var wantedYear = todayDate.getFullYear();
+					var DayOfMonthTS = new Date(wantedYear, Lmon, 1, 0, 0, 0, 0).getTime();
+				}
+				var DoW = new Date(DayOfMonthTS).getDay();
+				for(var i=0; i< Math.abs(ford); i++) {
+					while(byDayArray.indexOf(DoW) === -1) {
+						DayOfMonthTS = DayOfMonthTS + beginMonthDay*dlen;
+						DoW = new Date(DayOfMonthTS).getDay();
+					}
+					if(i !== Math.abs(ford) - 1){
+						DayOfMonthTS = DayOfMonthTS + beginMonthDay*dlen;
+						DoW = new Date(DayOfMonthTS).getDay();
+					}
+				}
+				if(DayOfMonthTS) {
+					inUse = true;
+					var lastDay = new Date(DayOfMonthTS);
+					if(lastDay && lastDay.getMonth() === Lmon) {
+						return {InUse: inUse, WantDay: lastDay};
+					} else {return false;}
+				} else {return false;}
+			} else {return false;}
+		} else {return false;}
+	},
+	
+	/*
 	 * byDayTest: Sets the rulesPresent flag for byDay flag position
 	 * Tests if todayDate matches the recurrence specified by rule and sets rulesTrue.
 	 * param rule      a BYDAY rule
@@ -985,38 +1057,49 @@ RRuleManager.prototype = {
 		var negativeMonthPosition;
 		var monthPosition;
 		var ruleLength = rule.ruleValue.length;
-		for(var i = 0; i < ruleLength; i++) {
-			var ord = rule.ruleValue[i].ord;
-			var day = rule.ruleValue[i].day;
-			//this.rlog("byDayTest: ord: "+ord+", day: "+day);
-			if(ord) {
-				//this.rlog("byDayTest: has ord");
-				//find relevant month position of todayDate
-				if(ord > 0){
-					if (!positiveMonthPosition) {
-						positiveMonthPosition = this.findMonthPosition(todayDate, true);
+		var setProps = this.setPosTest(rule, todayDate);
+		// check for last week day, last weekend day, last work week day from a bysetpos type rule
+		if(setProps && setProps.InUse === true && setProps.WantDay) {
+			if(todayDate.getFullYear() === setProps.WantDay.getFullYear() &&
+				todayDate.getMonth() === setProps.WantDay.getMonth() &&
+				todayDate.getDate() === setProps.WantDay.getDate()) {
+				this.rlog("lastDay yes:  " + setProps.WantDay);				
+				this.setTrueFlag(flags, flagPosition);
+			}
+		} else {
+			for(var i = 0; i < ruleLength; i++) {
+				var ord = rule.ruleValue[i].ord;
+				var day = rule.ruleValue[i].day;
+				//this.rlog("byDayTest: ord: "+ord+", day: "+day);
+				if(ord) {
+					//this.rlog("byDayTest: has ord");
+					//find relevant month position of todayDate
+					if(ord > 0){
+						if (!positiveMonthPosition) {
+							positiveMonthPosition = this.findMonthPosition(todayDate, true);
+						}
+						monthPosition = positiveMonthPosition;
+						//this.rlog("byDayTest: has ord > 0, positiveMonthPosition: "+positiveMonthPosition);	
+					} else {
+						if (!negativeMonthPosition) {
+							negativeMonthPosition = this.findMonthPosition(todayDate, false);
+						}
+						monthPosition = negativeMonthPosition;	
+						//this.rlog("byDayTest: has ord <= 0, negativeMonthPosition: "+negativeMonthPosition);
 					}
-					monthPosition = positiveMonthPosition;
-					//this.rlog("byDayTest: has ord > 0, positiveMonthPosition: "+positiveMonthPosition);	
-				} else {
-					if (!negativeMonthPosition) {
-						negativeMonthPosition = this.findMonthPosition(todayDate, false);
+					//this.rlog("byDayTest: testing: ord: "+ord+" =?= "+monthPosition+" and day: "+ day+" =?= "+todayDate.getDay());
+					if(ord == monthPosition && day == todayDate.getDay()) {
+						this.setTrueFlag(flags, flagPosition);
+						//this.rlog("byDayTest: TRUE");
+						break;
 					}
-					monthPosition = negativeMonthPosition;	
-					//this.rlog("byDayTest: has ord <= 0, negativeMonthPosition: "+negativeMonthPosition);
 				}
-				//this.rlog("byDayTest: testing: ord: "+ord+" =?= "+monthPosition+" and day: "+ day+" =?= "+todayDate.getDay());
-				if(ord == monthPosition && day == todayDate.getDay()) {
+				else if (day == todayDate.getDay()) {
+					//this.rlog("byDayTest: SIMPLE TEST TRUE");
 					this.setTrueFlag(flags, flagPosition);
-					//this.rlog("byDayTest: TRUE");
 					break;
 				}
 			}
-			else if (day == todayDate.getDay()) {
-				//this.rlog("byDayTest: SIMPLE TEST TRUE");
-				this.setTrueFlag(flags, flagPosition);
-				break;
-			}
 		}
 	},
 
@@ -1102,7 +1185,7 @@ RRuleManager.prototype = {
 	 * returns: true if todayDate is in the exception list
 	 */
 	evaluateExceptions: function(date, exdates, eventStart, tzId) {
-		var exdateType;
+		var exdateType, patt, res;
 		var exdatesLength = exdates.length;
 		var exdate;
 		var testDate = new Date(date);
@@ -1117,7 +1200,14 @@ RRuleManager.prototype = {

 		if (exdates && exdatesLength !== 0) {
 			for (var i = 0; i < exdatesLength; i++) {
-
+				patt = new RegExp("(?:[\\d]{8})(?:T[\\d]{6})?(?:Z)?");
+				res = patt.exec(exdates[i]);
+				//console.error("EXdate eval:: " + res);
+				if(!!res){
+					exdates[i] = res +"";
+				} else {
+					return false;
+				}
 				//Figure out the format of the exdate based on the length of the string
 				switch (exdates[i].length) {
 					//date type
@@ -1694,7 +1784,7 @@ var EventManagerUtils = Class.create ({
 		var freq = event.rrule.freq;
 		var interval = event.rrule.interval || 1;
 		var numExdates = (event.exdates && event.exdates.length) || 0;
-		var count = event.rrule.count;
+		var count = parseInt(event.rrule.count,10);
 		var bonusPadding = 3;
 		var base;
 		switch(freq){
@@ -1980,7 +2070,9 @@ var EventManagerUtils = Class.create ({
 			//Did the event's repeat cycle already end?			
 			if(this.repeatEndedBeforeDate(event.rrule, event.countInfo, date)){
 				//this.evlog(this.logLevels.repeatDetails, "findRepeatsInRange: exit: repeat already ended 2");
-				continue;
+				if(eventOccurrences.length > 0 ) {
+					return eventOccurrences;
+				} else { return this.noOccurrences;}
 			}
 	
 			//Has the event's repeat cycle even started yet?
@@ -1996,6 +2088,10 @@ var EventManagerUtils = Class.create ({
 			
 			if(event.dtstart > nextMidnight) {
 				//this.evlog(this.logLevels.repeatDetails, "findRepeatsInRange: exit: repeat hasn't started yet 2");
+				var fastForward = Math.floor((event.dtstart - nextMidnight)/(24*60*60*1000));
+				if(fastForward > 4 && ((i + fastForward - 2) <= datesInRangeSize -3) && fastForward-3 > 0) {
+					i += fastForward - 2; //moving to 2 days before for tZ safety event.dtstart is not TZ adjusted
+				}
 				continue;
 			}		
 						
@@ -2082,6 +2178,44 @@ var EventManagerUtils = Class.create ({
 									
 				eventOccurrences.push (nextOccurrence);
 
+				//we just found an occurence use the rule to estimate when the next time will occur
+				var skip = 0;
+				var ruleInt = 1;
+				switch (event.rrule.freq) {
+					case "YEARLY":
+						// 3 months
+						ruleInt = 90;
+						break;
+						
+					case "MONTHLY":
+						//  <4 weeks
+						ruleInt = 25;
+						break;
+						
+					case "WEEKLY": // possible multiples per week
+					case "DAILY":
+					default:
+						ruleInt = 1;
+						break;
+				}
+				// can't repeat during event or before interval
+				if(event.rrule.interval && event.rrule.interval >= 1) {
+					var inter = event.rrule.interval * ruleInt;
+					if(datesInEventSize && datesInEventSize > 3) {
+						var durAdd = datesInEventSize -2;
+					}
+					if(durAdd && inter) {
+						if(inter > durAdd){
+							skip += inter;
+						} else {
+							skip += durAdd;
+						}
+					}
+				}
+				
+				if(skip >= 0) { // skip forward
+					i += skip;
+				}
 				if (eventOccurrences.length === limit) {
 					//this.evlog(this.logLevels.repeatDetails, "findRepeatsInRange: hit limit");
 					return eventOccurrences;
@@ -2811,7 +2945,7 @@ var EventManager = Class.create ({
 		future.years	= this.utils.getYearsInRange			(tempRange);
 
 		//load the timezone data needed to process this event set
-		future.now	(this.timezoneManager, this.timezoneManager.setup);			
+		future.then	(this.timezoneManager, this.timezoneManager.setup);			
 		future.then	(this.timezoneManager, this.timezoneManager.getTimezones);
 
 		future.then	(this, function (future) {
@@ -2826,10 +2960,19 @@ var EventManager = Class.create ({
 			//We process in chunks and yield periodically to avoid Webkit's JS timeout.
 			function findOccurrences(){
 				
+				var okEvent;
 				//i is the index in the full event set. j is the counter for the chunk limit
 				for (var j = 0; i < eventSetSize && j < chunkLimit; i++, j++) {
 					//this.evlog(this.logLevels.getEventsInRange, "************** Next event ************************");
 					event = eventSet[i];
+					okEvent = ("dtstart" in event) && ("dtend" in event) && isFinite(event.dtstart) && isFinite(event.dtend);
+					if(!okEvent){
+						console.error("===== Skipping malformed calendar event: "+event._id ); 
+						//console.error("skipping: " + JSON.stringify(event));
+						//console.error("attempting calendar delete: " + event._id);
+						DB.del([event._id], true);
+						continue; 
+					}
 					
 					if (!event.rrule) {
 						if (this.utils.occursInRange(event, tempRange)) {
diff --git a/usr/palm/services/com.palm.service.calendar.reminders/on-snooze-handler.js b/usr/palm/services/com.palm.service.calendar.reminders/on-snooze-handler.js
index 0d6fe60..d0fedd7 100644
--- a/usr/palm/services/com.palm.service.calendar.reminders/on-snooze-handler.js
+++ b/usr/palm/services/com.palm.service.calendar.reminders/on-snooze-handler.js
@@ -27,6 +27,7 @@ SnoozeCommandAssistant.prototype.run = function(outFuture){
 	
 	var snoozeDuration = args.snoozeDuration;	
 	var reminderId = args.reminderId;
+	var autoCloseTime = args.autoCloseTime;
 	
 	if (!reminderId) {
 		var errorString = "Missing args! Need reminderId.  Received: "+JSON.stringify(args);
@@ -41,6 +42,19 @@ SnoozeCommandAssistant.prototype.run = function(outFuture){
 	date.setMilliseconds(0);
 	var snoozeUntil = date.getTime() + snoozeDuration;
 	
+	if(!autoCloseTime){
+		var params = {
+		"_id": reminderId,
+		"showTime": snoozeUntil
+		}
+	} else {
+		var params = {
+		"_id": reminderId,
+		"showTime": snoozeUntil,
+		"autoCloseTime": autoCloseTime
+		}
+	}
+
 	//Update the reminder with the new alarm time
 	var future = DB.find(
 		{	"from": "com.palm.service.calendar.reminders:1", 
@@ -56,7 +70,7 @@ SnoozeCommandAssistant.prototype.run = function(outFuture){
 		var returnValue = result.returnValue;
 		var results = result.results;
 		if(returnValue && results && results.length){
-			future.nest(DB.merge([{"_id": reminderId, "showTime": snoozeUntil}]));
+			future.nest(DB.merge([params]));
 		}
 		else{
 			rmdrLog("********** Tried to snooze a reminder that doesn't exist or query failed: "+reminderId);
